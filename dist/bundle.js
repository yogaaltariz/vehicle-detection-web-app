/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var e={9503:function(e,t,n){!function(e,t,n){"use strict";const s={1:{name:"/m/01g317",id:1,displayName:"person"},2:{name:"/m/0199g",id:2,displayName:"bicycle"},3:{name:"/m/0k4j",id:3,displayName:"car"},4:{name:"/m/04_sv",id:4,displayName:"motorcycle"},5:{name:"/m/05czz6l",id:5,displayName:"airplane"},6:{name:"/m/01bjv",id:6,displayName:"bus"},7:{name:"/m/07jdr",id:7,displayName:"train"},8:{name:"/m/07r04",id:8,displayName:"truck"},9:{name:"/m/019jd",id:9,displayName:"boat"},10:{name:"/m/015qff",id:10,displayName:"traffic light"},11:{name:"/m/01pns0",id:11,displayName:"fire hydrant"},13:{name:"/m/02pv19",id:13,displayName:"stop sign"},14:{name:"/m/015qbp",id:14,displayName:"parking meter"},15:{name:"/m/0cvnqh",id:15,displayName:"bench"},16:{name:"/m/015p6",id:16,displayName:"bird"},17:{name:"/m/01yrx",id:17,displayName:"cat"},18:{name:"/m/0bt9lr",id:18,displayName:"dog"},19:{name:"/m/03k3r",id:19,displayName:"horse"},20:{name:"/m/07bgp",id:20,displayName:"sheep"},21:{name:"/m/01xq0k1",id:21,displayName:"cow"},22:{name:"/m/0bwd_0j",id:22,displayName:"elephant"},23:{name:"/m/01dws",id:23,displayName:"bear"},24:{name:"/m/0898b",id:24,displayName:"zebra"},25:{name:"/m/03bk1",id:25,displayName:"giraffe"},27:{name:"/m/01940j",id:27,displayName:"backpack"},28:{name:"/m/0hnnb",id:28,displayName:"umbrella"},31:{name:"/m/080hkjn",id:31,displayName:"handbag"},32:{name:"/m/01rkbr",id:32,displayName:"tie"},33:{name:"/m/01s55n",id:33,displayName:"suitcase"},34:{name:"/m/02wmf",id:34,displayName:"frisbee"},35:{name:"/m/071p9",id:35,displayName:"skis"},36:{name:"/m/06__v",id:36,displayName:"snowboard"},37:{name:"/m/018xm",id:37,displayName:"sports ball"},38:{name:"/m/02zt3",id:38,displayName:"kite"},39:{name:"/m/03g8mr",id:39,displayName:"baseball bat"},40:{name:"/m/03grzl",id:40,displayName:"baseball glove"},41:{name:"/m/06_fw",id:41,displayName:"skateboard"},42:{name:"/m/019w40",id:42,displayName:"surfboard"},43:{name:"/m/0dv9c",id:43,displayName:"tennis racket"},44:{name:"/m/04dr76w",id:44,displayName:"bottle"},46:{name:"/m/09tvcd",id:46,displayName:"wine glass"},47:{name:"/m/08gqpm",id:47,displayName:"cup"},48:{name:"/m/0dt3t",id:48,displayName:"fork"},49:{name:"/m/04ctx",id:49,displayName:"knife"},50:{name:"/m/0cmx8",id:50,displayName:"spoon"},51:{name:"/m/04kkgm",id:51,displayName:"bowl"},52:{name:"/m/09qck",id:52,displayName:"banana"},53:{name:"/m/014j1m",id:53,displayName:"apple"},54:{name:"/m/0l515",id:54,displayName:"sandwich"},55:{name:"/m/0cyhj_",id:55,displayName:"orange"},56:{name:"/m/0hkxq",id:56,displayName:"broccoli"},57:{name:"/m/0fj52s",id:57,displayName:"carrot"},58:{name:"/m/01b9xk",id:58,displayName:"hot dog"},59:{name:"/m/0663v",id:59,displayName:"pizza"},60:{name:"/m/0jy4k",id:60,displayName:"donut"},61:{name:"/m/0fszt",id:61,displayName:"cake"},62:{name:"/m/01mzpv",id:62,displayName:"chair"},63:{name:"/m/02crq1",id:63,displayName:"couch"},64:{name:"/m/03fp41",id:64,displayName:"potted plant"},65:{name:"/m/03ssj5",id:65,displayName:"bed"},67:{name:"/m/04bcr3",id:67,displayName:"dining table"},70:{name:"/m/09g1w",id:70,displayName:"toilet"},72:{name:"/m/07c52",id:72,displayName:"tv"},73:{name:"/m/01c648",id:73,displayName:"laptop"},74:{name:"/m/020lf",id:74,displayName:"mouse"},75:{name:"/m/0qjjc",id:75,displayName:"remote"},76:{name:"/m/01m2v",id:76,displayName:"keyboard"},77:{name:"/m/050k8",id:77,displayName:"cell phone"},78:{name:"/m/0fx9l",id:78,displayName:"microwave"},79:{name:"/m/029bxz",id:79,displayName:"oven"},80:{name:"/m/01k6s3",id:80,displayName:"toaster"},81:{name:"/m/0130jx",id:81,displayName:"sink"},82:{name:"/m/040b_t",id:82,displayName:"refrigerator"},84:{name:"/m/0bt_c3",id:84,displayName:"book"},85:{name:"/m/01x3z",id:85,displayName:"clock"},86:{name:"/m/02s195",id:86,displayName:"vase"},87:{name:"/m/01lsmm",id:87,displayName:"scissors"},88:{name:"/m/0kmg4",id:88,displayName:"teddy bear"},89:{name:"/m/03wvsk",id:89,displayName:"hair drier"},90:{name:"/m/012xff",id:90,displayName:"toothbrush"}};class a{constructor(e,t){this.modelPath=t||`https://storage.googleapis.com/tfjs-models/savedmodel/${this.getPrefix(e)}/model.json`}getPrefix(e){return"lite_mobilenet_v2"===e?"ssd"+e:"ssd_"+e}async load(){this.model=await t.loadGraphModel(this.modelPath);const e=n.zeros([1,300,300,3],"int32"),s=await this.model.executeAsync(e);await Promise.all(s.map((e=>e.data()))),s.map((e=>e.dispose())),e.dispose()}async infer(e,t,s){const a=n.tidy((()=>(e instanceof n.Tensor||(e=n.browser.fromPixels(e)),e.expandDims(0)))),r=a.shape[1],i=a.shape[2],o=await this.model.executeAsync(a),l=o[0].dataSync(),u=o[1].dataSync();a.dispose(),n.dispose(o);const[c,h]=this.calculateMaxScores(l,o[0].shape[1],o[0].shape[2]),p=n.getBackend();"webgl"===n.getBackend()&&n.setBackend("cpu");const d=n.tidy((()=>{const e=n.tensor2d(u,[o[1].shape[1],o[1].shape[3]]);return n.image.nonMaxSuppression(e,c,t,s,s)})),f=d.dataSync();return d.dispose(),p!==n.getBackend()&&n.setBackend(p),this.buildDetectedObjects(i,r,u,c,f,h)}buildDetectedObjects(e,t,n,a,r,i){const o=r.length,l=[];for(let u=0;u<o;u++){const o=[];for(let e=0;e<4;e++)o[e]=n[4*r[u]+e];const c=o[0]*t,h=o[1]*e,p=o[2]*t,d=o[3]*e;o[0]=h,o[1]=c,o[2]=d-h,o[3]=p-c,l.push({bbox:o,class:s[i[r[u]]+1].displayName,score:a[r[u]]})}return l}calculateMaxScores(e,t,n){const s=[],a=[];for(let r=0;r<t;r++){let t=Number.MIN_VALUE,i=-1;for(let s=0;s<n;s++)e[r*n+s]>t&&(t=e[r*n+s],i=s);s[r]=t,a[r]=i}return[s,a]}async detect(e,t=20,n=.5){return this.infer(e,t,n)}dispose(){null!=this.model&&this.model.dispose()}}e.ObjectDetection=a,e.load=async function(e={}){if(null==n)throw new Error("Cannot find TensorFlow.js. If you are using a <script> tag, please also include @tensorflow/tfjs on the page before using this model.");const t=e.base||"lite_mobilenet_v2",s=e.modelUrl;if(-1===["mobilenet_v1","mobilenet_v2","lite_mobilenet_v2"].indexOf(t))throw new Error("ObjectDetection constructed with invalid base model "+t+". Valid names are 'mobilenet_v1', 'mobilenet_v2' and 'lite_mobilenet_v2'.");const r=new a(t,s);return await r.load(),r},e.version="2.2.1",Object.defineProperty(e,"__esModule",{value:!0})}(t,n(3916),n(5998))},8166:(e,t,n)=>{"use strict";n.d(t,{H:()=>a});var s=n(5998);function a(e,t){Array.isArray(e)||(e=[e]),e.forEach((e=>{null!=e&&s.util.assert("complex64"!==e.dtype,(()=>`${t} does not support complex64 tensors in the CPU backend.`))}))}},6772:(e,t,n)=>{"use strict";n.r(t),n.d(t,{MathBackendCPU:()=>i,shared:()=>o,version_cpu:()=>l});var s=n(5998),a=n(8166);const r=s.kernel_impls.whereImpl;class i extends s.KernelBackend{constructor(){super(),this.blockSize=48,this.firstUse=!0,this.data=new s.DataStorage(this,(0,s.engine)())}nextDataId(){return i.nextDataId++}write(e,t,n){this.firstUse&&(this.firstUse=!1,(0,s.env)().get("IS_NODE")&&s.backend_util.warn("\n============================\nHi there ðŸ‘‹. Looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, which binds to TensorFlow C++, by running npm i @tensorflow/tfjs-node, or npm i @tensorflow/tfjs-node-gpu if you have CUDA. Then call require('@tensorflow/tfjs-node'); (-gpu suffix for CUDA) at the start of your program. Visit https://github.com/tensorflow/tfjs-node for more details.\n============================"));const a={id:this.nextDataId()};return this.data.set(a,{values:e,dtype:n,refCount:1}),a}makeTensorInfo(e,t,n){let a;if("string"===t&&null!=n&&n.length>0&&s.util.isString(n[0])){const r=n.map((e=>s.util.encodeString(e)));a=this.write(r,e,t)}else a=this.write(n,e,t);return{dataId:a,shape:e,dtype:t}}refCount(e){return this.data.has(e)?this.data.get(e).refCount:0}incRef(e){this.data.get(e).refCount++}decRef(e){this.data.has(e)&&this.data.get(e).refCount--}move(e,t,n,s,a){this.data.set(e,{values:t,dtype:s,refCount:a})}numDataIds(){return this.data.numDataIds()}async read(e){return this.readSync(e)}readSync(e){const{dtype:t,complexTensorInfos:n}=this.data.get(e);if("complex64"===t){const e=this.readSync(n.real.dataId),t=this.readSync(n.imag.dataId);return s.backend_util.mergeRealAndImagArrays(e,t)}return this.data.get(e).values}bufferSync(e){const t=this.readSync(e.dataId);let n=t;if("string"===e.dtype)try{n=t.map((e=>s.util.decodeString(e)))}catch(e){throw new Error("Failed to decode encoded string bytes into utf-8")}return(0,s.buffer)(e.shape,e.dtype,n)}makeOutput(e,t,n){const a=this.write(e,t,n);return(0,s.engine)().makeTensorFromDataId(a,t,n,this)}disposeData(e,t=!1){if(this.data.has(e)){if(this.data.get(e).refCount--,!t&&this.data.get(e).refCount>0)return!1;const{complexTensorInfos:n}=this.data.get(e);null!=n&&(this.disposeData(n.real.dataId,!0),this.disposeData(n.imag.dataId,!0)),this.data.delete(e)}return!0}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}async time(e){const t=s.util.now();return e(),{kernelMs:s.util.now()-t}}memory(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}}where(e){(0,a.H)([e],"where");const t=this.readSync(e.dataId);return r(e.shape,t)}dispose(){}floatPrecision(){return 32}epsilon(){return super.epsilon()}}i.nextDataId=0;var o=n(5226);const l="3.3.0";(0,s.registerBackend)("cpu",(()=>new i),1);var u=n(6738);const c=(0,u.A)(s.Elu,(e=>e>=0?e:Math.exp(e)-1)),h={kernelName:s.Elu,backendName:"cpu",kernelFunc:c};var p=n(1775);function d(e){const{inputs:t,backend:n,attrs:r}=e,{x:i}=t,{alpha:o}=r;(0,a.H)([i],"leakyRelu");const l=s.util.sizeFromShape(i.shape),u=n.data.get(i.dataId).values,c=s.util.getTypedArrayFromDType("float32",l);for(let e=0;e<u.length;e++)c[e]=u[e]<0?o*u[e]:u[e];return n.makeTensorInfo(i.shape,"float32",c)}const f={kernelName:s.LeakyRelu,backendName:"cpu",kernelFunc:d};var m=n(3533);const g=(0,m.b)(((e,t)=>e<0?t*e:e));function y(e){const{inputs:t,backend:n}=e,{x:s,alpha:r}=t;(0,a.H)([s,r],"prelu");const i=n.data.get(s.dataId).values,o=n.data.get(r.dataId).values,[l,u]=g(s.shape,r.shape,i,o,s.dtype);return n.makeTensorInfo(u,s.dtype,l)}const b={kernelName:s.Prelu,backendName:"cpu",kernelFunc:y},x=(0,u.A)(s.Relu,(e=>Math.max(0,e))),v={kernelName:s.Relu,backendName:"cpu",kernelFunc:x},k=(0,u.A)(s.Relu6,(e=>Math.min(Math.max(0,e),6))),w={kernelName:s.Relu6,backendName:"cpu",kernelFunc:k};function N(e,t,n,s,a){if("linear"===n)return(0,p.y)({inputs:{x:t},backend:e});if("relu"===n)return x({inputs:{x:t},backend:e});if("elu"===n)return c({inputs:{x:t},backend:e});if("relu6"===n)return k({inputs:{x:t},backend:e});if("prelu"===n)return y({inputs:{x:t,alpha:s},backend:e});if("leakyrelu"===n)return d({inputs:{x:t},backend:e,attrs:{alpha:a}});throw new Error(`Activation ${n} has not been implemented for the CPU backend.`)}var I=n(2779);function S(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{shape:i}=a,o=s.util.sizeFromShape(r.shape),l=s.util.inferFromImplicitShape(i,o),u=s.util.sizeFromShape(l);s.util.assert(o===u,(()=>`The new shape (${l}) has ${u} elements and the old shape (${r.shape}) has ${o} elements. The new shape and old shape must have the same number of elements.`)),n.incRef(r.dataId);const c=n.data.get(r.dataId);if(null!=c.complexTensorInfos){const e=c.complexTensorInfos.real,t=c.complexTensorInfos.imag;e.shape=l,t.shape=l}return{dataId:r.dataId,shape:l,dtype:r.dtype}}const T={kernelName:s.Reshape,backendName:"cpu",kernelFunc:S};function C(e){const{inputs:t,backend:n,attrs:r}=e,{a:i,b:o}=t,{transposeA:l,transposeB:u}=r;(0,a.H)([i,o],"matMul");const c=i.shape.length,h=o.shape.length,p=l?i.shape[c-2]:i.shape[c-1],d=u?o.shape[h-1]:o.shape[h-2],f=l?i.shape[c-1]:i.shape[c-2],m=u?o.shape[h-2]:o.shape[h-1],g=i.shape.slice(0,-2),y=o.shape.slice(0,-2),b=s.util.sizeFromShape(g),x=s.util.sizeFromShape(y),v=b===x||1===b||1===x;s.util.assert(c>=2&&h>=2&&v,(()=>`Error in matMul: the input batch dimensions must either be the same or at least one input batch dimension must be 1. Got input batch dimensions of (${g}) and (${y}).`));const k=(b>x?i.shape.slice(0,-2):o.shape.slice(0,-2)).concat([f,m]);s.util.assert(p===d,(()=>`Error in matMul: inner shapes (${p}) and (${d}) of Tensors with shapes ${i.shape} and ${o.shape} and transposeA=${l} and transposeB=${u} must match.`));const w=u?[x,m,d]:[x,d,m],N=S({inputs:{x:i},backend:n,attrs:{shape:l?[b,p,f]:[b,f,p]}}),I=S({inputs:{x:o},backend:n,attrs:{shape:w}}),T=l?N.shape[1]:N.shape[2],C=l?N.shape[2]:N.shape[1],$=u?I.shape[1]:I.shape[2],A=Math.max(b,x),E=n.data.get(N.dataId).values,_=n.data.get(I.dataId).values,R=s.util.computeStrides(N.shape),F=s.util.computeStrides(I.shape),[D,O,M]=l?[R[0],1,R[1]]:[R[0],R[1],1],[z,L,B]=u?[1,F[1],F[0]]:[F[1],1,F[0]],P=C*$,V=(0,s.buffer)([A,C,$],N.dtype),W=V.values,U=n.blockSize;for(let e=0;e<A;e++)for(let t=0;t<C;t+=U)for(let n=0;n<$;n+=U)for(let s=0;s<T;s+=U){const a=Math.min(t+U,C),r=Math.min(n+U,$),i=Math.min(s+U,T);for(let o=t;o<a;o++)for(let t=n;t<r;t++){let n=0;for(let a=s;a<i;a++){const s=Math.min(e,b-1)*D,r=Math.min(e,x-1)*B;n+=E[s+o*O+a*M]*_[a*z+t*L+r]}W[e*P+(o*$+t)]+=n}}return n.disposeIntermediateTensorInfo(N),n.disposeIntermediateTensorInfo(I),n.makeTensorInfo(k,V.dtype,V.values)}const $={kernelName:s.BatchMatMul,backendName:"cpu",kernelFunc:C},A={kernelName:s._FusedMatMul,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{a,b:r,bias:i,preluActivationWeights:o}=t,{transposeA:l,transposeB:u,activation:c,leakyreluAlpha:h}=s;let p,d,f;const m=[];p=C({inputs:{a,b:r},attrs:{transposeA:l,transposeB:u},backend:n}),i&&(d=(0,I.IH)({inputs:{a:p,b:i},backend:n}),m.push(p),p=d),c&&(f=N(n,p,c,o,h),m.push(p),p=f);for(const e of m)n.disposeIntermediateTensorInfo(e);return p}};var E=n(224);const _=(0,u.A)(s.Acos,(e=>Math.acos(e))),R={kernelName:s.Acos,backendName:"cpu",kernelFunc:_},F=(0,u.A)(s.Acosh,(e=>Math.acosh(e))),D={kernelName:s.Acosh,backendName:"cpu",kernelFunc:F},O={kernelName:s.AddN,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,r=t;(0,a.H)(t,"addN");const i=r.map((e=>n.data.get(e.dataId).values)),o=(0,s.buffer)(r[0].shape,r[0].dtype),l=o.values;for(let e=0;e<r.length;e++){const t=i[e];for(let e=0;e<l.length;e++)l[e]+=t[e]}return n.makeTensorInfo(o.shape,o.dtype,o.values)}};var M=n(4802);const z={kernelName:s.All,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:i}=t,{axis:o,keepDims:l}=r;(0,a.H)(i,"all");const u=s.util.parseAxisParam(o,i.shape);let c=u;const h=s.backend_util.getAxesPermutation(c,i.shape.length);let p=i;null!=h&&(p=(0,M.p)({inputs:{x:i},backend:n,attrs:{perm:h}}),c=s.backend_util.getInnerMostAxes(c.length,i.shape.length)),s.backend_util.assertAxesAreInnerMostDims("all",c,p.shape.length);const[d,f]=s.backend_util.computeOutAndReduceShapes(p.shape,c),m=s.util.sizeFromShape(f),g=s.util.makeZerosTypedArray(s.util.sizeFromShape(d),p.dtype),y=n.data.get(p.dataId).values;for(let e=0;e<g.length;++e){const t=e*m;let n=y[t];for(let e=0;e<m;++e){const s=y[t+e];n=n&&s}g[e]=n}null!=h&&n.disposeIntermediateTensorInfo(p);const b=n.makeTensorInfo(d,p.dtype,g);if(l){const e=S({inputs:{x:b},backend:n,attrs:{shape:s.backend_util.expandShapeToKeepDim(d,u)}});return n.disposeIntermediateTensorInfo(b),e}return b}},L={kernelName:s.Any,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:i}=t,{axis:o,keepDims:l}=r;(0,a.H)(i,"any");const u=s.util.parseAxisParam(o,i.shape);let c=u;const h=s.backend_util.getAxesPermutation(c,i.shape.length);let p=i;null!=h&&(p=(0,M.p)({inputs:{x:i},backend:n,attrs:{perm:h}}),c=s.backend_util.getInnerMostAxes(c.length,i.shape.length)),s.backend_util.assertAxesAreInnerMostDims("any",c,p.shape.length);const[d,f]=s.backend_util.computeOutAndReduceShapes(p.shape,c),m=s.util.sizeFromShape(f),g=s.util.makeZerosTypedArray(s.util.sizeFromShape(d),p.dtype),y=n.data.get(p.dataId).values;for(let e=0;e<g.length;++e){const t=e*m;let n=y[t];for(let e=0;e<m;++e){const s=y[t+e];n=n||s}g[e]=n}null!=h&&n.disposeIntermediateTensorInfo(p);const b=n.makeTensorInfo(d,p.dtype,g);if(l){const e=S({inputs:{x:b},backend:n,attrs:{shape:s.backend_util.expandShapeToKeepDim(d,u)}});return n.disposeIntermediateTensorInfo(b),e}return b}},B={kernelName:s.ArgMax,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:i}=t,{axis:o}=r;(0,a.H)(i,"argMax");let l=s.util.parseAxisParam(o,i.shape);const u=s.backend_util.getAxesPermutation(l,i.shape.length);let c=i;const h=[];null!=u&&(c=(0,M.p)({inputs:{x:i},backend:n,attrs:{perm:u}}),h.push(c),l=s.backend_util.getInnerMostAxes(l.length,c.shape.length)),l=[l[0]],s.backend_util.assertAxesAreInnerMostDims("argMax",l,c.shape.length);const[p,d]=s.backend_util.computeOutAndReduceShapes(c.shape,l),f=s.util.sizeFromShape(p),m=s.util.makeZerosTypedArray(f,"int32"),g=s.util.sizeFromShape(d),y=n.data.get(c.dataId).values;for(let e=0;e<m.length;++e){const t=e*g;let n=y[t],s=0;for(let e=0;e<g;++e){const a=y[t+e];a>n&&(n=a,s=e)}m[e]=s}return h.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(p,"int32",m)}},P={kernelName:s.ArgMin,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:i}=t,{axis:o}=r;(0,a.H)(i,"argMin");let l=s.util.parseAxisParam(o,i.shape);const u=s.backend_util.getAxesPermutation(l,i.shape.length);let c=i;const h=[];null!=u&&(c=(0,M.p)({inputs:{x:i},backend:n,attrs:{perm:u}}),h.push(c),l=s.backend_util.getInnerMostAxes(l.length,c.shape.length)),l=[l[0]],s.backend_util.assertAxesAreInnerMostDims("argMin",l,c.shape.length);const[p,d]=s.backend_util.computeOutAndReduceShapes(c.shape,l),f=s.util.sizeFromShape(p),m=s.util.makeZerosTypedArray(f,"int32"),g=s.util.sizeFromShape(d),y=n.data.get(c.dataId).values;for(let e=0;e<m.length;++e){const t=e*g;let n=y[t],s=0;for(let e=0;e<g;++e){const a=y[t+e];a<n&&(n=a,s=e)}m[e]=s}return h.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(p,"int32",m)}},V=(0,u.A)(s.Asin,(e=>Math.asin(e))),W={kernelName:s.Asin,backendName:"cpu",kernelFunc:V},U=(0,u.A)(s.Asinh,(e=>Math.asinh(e))),G={kernelName:s.Asinh,backendName:"cpu",kernelFunc:U},H=(0,u.A)(s.Atan,(e=>Math.atan(e))),j={kernelName:s.Atan,backendName:"cpu",kernelFunc:H};var X=n(6205);const q=(0,m.b)(((e,t)=>Math.atan2(e,t))),K=(0,X.j)(s.Atan2,q),Y={kernelName:s.Atan2,backendName:"cpu",kernelFunc:K},Q=(0,u.A)(s.Atanh,(e=>Math.atanh(e))),J={kernelName:s.Atanh,backendName:"cpu",kernelFunc:Q};function Z(e,t,n,a,r,i){const o=r.strideHeight,l=r.strideWidth,u=r.dilationHeight,c=r.dilationWidth,h=r.effectiveFilterHeight,p=r.effectiveFilterWidth,d=r.padInfo.top,f=r.padInfo.left,m="max"===i?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,g=(0,s.buffer)(r.outShape,n),y=g.values,b=r.outShape[1]*r.outShape[2]*r.outShape[3],x=r.outShape[2]*r.outShape[3],v=r.outShape[3];for(let t=0;t<r.batchSize;++t){const n=t*b,s=t*a[0];for(let t=0;t<r.inChannels;++t)for(let g=0;g<r.outHeight;++g){const b=g*o-d,k=Math.max(0,b),w=Math.min(r.inHeight,h+b),N=n+g*x;for(let n=0;n<r.outWidth;++n){const o=n*l-f,h=Math.max(0,o),d=Math.min(r.inWidth,p+o);let g=m,b=0,x=0;for(let n=k;n<w;n+=u){const r=s+n*a[1];for(let n=h;n<d;n+=c){const s=e[r+n*a[2]+t];"max"===i&&s>g?g=s:"avg"===i&&(b+=s,x++)}if(isNaN(g))break}y[N+n*v+t]="avg"===i?b/x:g}}}return g}function ee(e,t,n,a,r=!1,i=!1){const o=(0,s.buffer)(a.outShape,"int32"),l=a.strideHeight,u=a.strideWidth,c=a.dilationHeight,h=a.dilationWidth,p=a.effectiveFilterHeight,d=a.effectiveFilterWidth,f=a.padInfo.top,m=a.padInfo.left,g=(0,s.buffer)(t,n,e);for(let e=0;e<a.batchSize;++e)for(let t=0;t<a.inChannels;++t)for(let n=0;n<a.outHeight;++n){const s=n*l-f;let y=s;for(;y<0;)y+=c;const b=Math.min(a.inHeight,p+s);for(let l=0;l<a.outWidth;++l){const p=l*u-m;let f=p;for(;f<0;)f+=h;const x=Math.min(a.inWidth,d+p);let v=Number.NEGATIVE_INFINITY,k=-1;for(let n=y;n<b;n+=c){const o=n-s;for(let s=f;s<x;s+=h){const l=s-p,u=g.get(e,n,s,t);u>v&&(v=u,k=r?i?((e*a.inHeight+n)*a.inWidth+s)*a.inChannels+t:(n*a.inWidth+s)*a.inChannels+t:o*d+l)}}o.set(k,e,n,l,t)}}return o}function te(e,t,n,a,r,i){const o=r.strideDepth,l=r.strideHeight,u=r.strideWidth,c=r.dilationDepth,h=r.dilationHeight,p=r.dilationWidth,d=r.effectiveFilterDepth,f=r.effectiveFilterHeight,m=r.effectiveFilterWidth,g=r.padInfo.front,y=r.padInfo.top,b=r.padInfo.left,x="max"===i?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,v=(0,s.buffer)(r.outShape,n),k=v.values,w=r.outShape[1]*r.outShape[2]*r.outShape[3]*r.outShape[4],N=r.outShape[2]*r.outShape[3]*r.outShape[4],I=r.outShape[3]*r.outShape[4],S=r.outShape[4];for(let t=0;t<r.batchSize;++t){const n=t*w,s=t*a[0];for(let t=0;t<r.inChannels;++t)for(let v=0;v<r.outDepth;++v){const w=v*o-g;let T=w;for(;T<0;)T+=c;const C=Math.min(r.inDepth,d+w),$=n+v*N;for(let n=0;n<r.outHeight;++n){const o=n*l-y;let d=o;for(;d<0;)d+=h;const g=Math.min(r.inHeight,f+o),v=$+n*I;for(let n=0;n<r.outWidth;++n){const o=n*u-b;let l=o;for(;l<0;)l+=p;const f=Math.min(r.inWidth,m+o),y=v+n*S;let w=x,N=0,I=0;for(let n=T;n<C;n+=c){const r=s+n*a[1];for(let n=d;n<g;n+=h){const s=r+n*a[2];for(let n=l;n<f;n+=p){const r=e[s+n*a[3]+t];if("max"===i&&r>w?w=r:"avg"===i&&(N+=r,I++),isNaN(w))break}if(isNaN(w))break}if(isNaN(w))break}k[y+t]="avg"===i?N/I:w}}}}return v}const ne={kernelName:s.AvgPool,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:i}=t;(0,a.H)(i,"avgPool");const{filterSize:o,strides:l,pad:u,dimRoundingMode:c}=r;s.util.assert(s.backend_util.eitherStridesOrDilationsAreOne(l,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${l} and dilations '1'`));const h=s.backend_util.computePool2DInfo(i.shape,o,l,1,u,c);let d;if(1===h.filterWidth&&1===h.filterHeight&&s.util.arraysEqual(h.inShape,h.outShape))d=(0,p.y)({inputs:{x:i},backend:n});else{const e=n.data.get(i.dataId).values,t=s.util.computeStrides(i.shape),a=Z(e,i.shape,i.dtype,t,h,"avg");d=n.makeTensorInfo(h.outShape,i.dtype,a.values)}return d}},se={kernelName:s.AvgPool3D,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:i}=t,{filterSize:o,strides:l,pad:u,dimRoundingMode:c,dataFormat:h}=r;(0,a.H)(i,"avgPool3d");const p=s.backend_util.computePool3DInfo(i.shape,o,l,1,u,c,h),d=te(n.data.get(i.dataId).values,i.shape,i.dtype,s.util.computeStrides(i.shape),p,"avg");return n.makeTensorInfo(d.shape,"float32",d.values)}},ae={kernelName:s.AvgPool3DGrad,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:i,input:o}=t,{filterSize:l,strides:u,pad:c,dimRoundingMode:h}=r;(0,a.H)([i,o],"avgPool3DGrad");const p=s.backend_util.computePool3DInfo(o.shape,l,u,1,c,h),d=p.strideDepth,f=p.strideHeight,m=p.strideWidth,g=p.filterDepth,y=p.filterHeight,b=p.filterWidth,x=p.dilationDepth,v=p.dilationHeight,k=p.dilationWidth,w=p.effectiveFilterDepth,N=p.effectiveFilterHeight,I=p.effectiveFilterWidth,S=w-1-p.padInfo.front,T=I-1-p.padInfo.left,C=N-1-p.padInfo.top,$=(0,s.buffer)(o.shape,"float32"),A=1/(g*y*b),E=n.bufferSync(i);for(let e=0;e<p.batchSize;++e)for(let t=0;t<p.inChannels;++t)for(let n=0;n<p.inDepth;++n)for(let s=0;s<p.inHeight;++s)for(let a=0;a<p.inWidth;++a){const r=n-S,i=s-C,o=a-T;let l=0;for(let n=0;n<w;n+=x){const s=(r+n)/d;if(!(s<0||s>=p.outDepth||Math.floor(s)!==s))for(let n=0;n<N;n+=v){const a=(i+n)/f;if(!(a<0||a>=p.outHeight||Math.floor(a)!==a))for(let n=0;n<I;n+=k){const r=(o+n)/m;r<0||r>=p.outWidth||Math.floor(r)!==r||(l+=E.get(e,s,a,r,t))}}}$.set(l*A,e,n,s,a,t)}return n.makeTensorInfo($.shape,$.dtype,$.values)}},re={kernelName:s.AvgPoolGrad,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:i,input:o}=t,l=o;(0,a.H)([i,o],"avgPoolGrad");const{filterSize:u,strides:c,pad:h}=r,p=s.backend_util.computePool2DInfo(l.shape,u,c,1,h),d=p.strideHeight,f=p.strideWidth,m=p.filterHeight,g=p.filterWidth,y=p.dilationHeight,b=p.dilationWidth,x=p.effectiveFilterHeight,v=p.effectiveFilterWidth,k=v-1-p.padInfo.left,w=x-1-p.padInfo.top,N=(0,s.buffer)(l.shape,"float32"),I=1/(m*g),S=n.data.get(i.dataId).values,T=(0,s.buffer)(i.shape,"float32",S);for(let e=0;e<p.batchSize;++e)for(let t=0;t<p.inChannels;++t)for(let n=0;n<p.inHeight;++n)for(let s=0;s<p.inWidth;++s){const a=n-w,r=s-k;let i=0;for(let n=0;n<x;n+=y){const s=(a+n)/d;if(!(s<0||s>=p.outHeight||Math.floor(s)!==s))for(let n=0;n<v;n+=b){const a=(r+n)/f;a<0||a>=p.outWidth||Math.floor(a)!==a||(i+=T.get(e,s,a,t))}}N.set(i*I,e,n,s,t)}return n.makeTensorInfo(N.shape,N.dtype,N.values)}},ie={kernelName:s.FusedBatchNorm,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:i,scale:o,offset:l,mean:u,variance:c}=t;s.util.assert(u.shape.length===c.shape.length,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),s.util.assert(null==l||u.shape.length===l.shape.length,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),s.util.assert(null==o||u.shape.length===o.shape.length,(()=>"Batch normalization gradient requires mean and scale to have equal ranks.")),(0,a.H)([i,u,c,o,l],"batchNorm");let{varianceEpsilon:h}=r;null==h&&(h=.001);const p=n.data.get(i.dataId).values,d=n.data.get(u.dataId).values,f=n.data.get(c.dataId).values,m=o?n.data.get(o.dataId).values:new Float32Array([1]),g=l?n.data.get(l.dataId).values:new Float32Array([0]),y=new Float32Array(p.length),b=g.length,x=m.length,v=f.length,k=d.length;let w=0,N=0,I=0,S=0;for(let e=0;e<p.length;++e)y[e]=g[w++]+(p[e]-d[N++])*m[I++]/Math.sqrt(f[S++]+h),w>=b&&(w=0),N>=k&&(N=0),I>=x&&(I=0),S>=v&&(S=0);return n.makeTensorInfo(i.shape,i.dtype,y)}};var oe=n(2578);const le={kernelName:s.BatchToSpaceND,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:i}=t,{blockShape:o,crops:l}=r;(0,a.H)([i],"batchToSpaceND");const u=o.reduce(((e,t)=>e*t)),c=s.backend_util.getReshaped(i.shape,o,u),h=s.backend_util.getPermuted(c.length,o.length),p=s.backend_util.getReshapedPermuted(i.shape,o,u),d=s.backend_util.getSliceBeginCoords(l,o.length),f=s.backend_util.getSliceSize(p,l,o.length),m=S({inputs:{x:i},backend:n,attrs:{shape:c}}),g=(0,M.p)({inputs:{x:m},backend:n,attrs:{perm:h}}),y=S({inputs:{x:g},backend:n,attrs:{shape:p}}),b=(0,oe.tP)({inputs:{x:y},backend:n,attrs:{begin:d,size:f}});return n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(g),n.disposeIntermediateTensorInfo(y),b}};var ue=n(8607);const ce={kernelName:s.Bincount,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,weights:r}=t,{size:i}=s,o=n.data.get(a.dataId).values,l=n.data.get(r.dataId).values,u=(0,ue.W)(o,l,r.dtype,r.shape,i);return n.makeTensorInfo([i],r.dtype,u)}};var he=n(9258),pe=n(4769);const de=(0,u.A)(s.ClipByValue,((e,t)=>{const n=t;return e>n.clipValueMax?n.clipValueMax:e<n.clipValueMin?n.clipValueMin:e})),fe={kernelName:s.ClipByValue,backendName:"cpu",kernelFunc:de};var me=n(6961);const ge={kernelName:s.ComplexAbs,backendName:"cpu",kernelFunc:e=>{const{x:t}=e.inputs,n=e.backend,a=new Float32Array(s.util.sizeFromShape(t.shape)),r=n.data.get(t.dataId),i=r.complexTensorInfos.real,o=r.complexTensorInfos.imag,l=n.data.get(i.dataId).values,u=n.data.get(o.dataId).values;for(let e=0;e<l.length;e++){const t=l[e],n=u[e];a[e]=Math.hypot(t,n)}return n.makeOutput(a,t.shape,"float32")}};var ye=n(8926);function be(e){const{inputs:t,backend:n}=e,{input:s}=t,a=n.data.get(s.dataId).complexTensorInfos.imag,r=n.data.get(a.dataId).values;return n.makeTensorInfo(a.shape,a.dtype,r)}const xe={kernelName:s.Imag,backendName:"cpu",kernelFunc:be};var ve=n(2186);function ke(e){const{inputs:t,backend:n,attrs:a}=e,{axis:r}=a,i=s.util.parseAxisParam(r,t[0].shape)[0];let o=s.backend_util.computeOutShape(t.map((e=>e.shape)),i);if(0===s.util.sizeFromShape(o))return n.makeTensorInfo(o,t[0].dtype,[]);const l=t.filter((e=>s.util.sizeFromShape(e.shape)>0));if(1===l.length)return(0,p.y)({inputs:{x:l[0]},backend:n});const u=l.map((e=>e.shape));if(s.backend_util.assertParamsConsistent(u,i),"complex64"===l[0].dtype){const e=l.map((e=>(0,ve.k)({inputs:{input:e},backend:n}))),t=l.map((e=>be({inputs:{input:e},backend:n}))),s=ke({inputs:e,backend:n,attrs:{axis:i}}),a=ke({inputs:t,backend:n,attrs:{axis:i}}),r=(0,me.P)({inputs:{real:s,imag:a},backend:n});return e.forEach((e=>n.disposeIntermediateTensorInfo(e))),t.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(a),r}const c=l.map((e=>{const t=s.util.sizeFromShape(e.shape.slice(i));return S({inputs:{x:e},backend:n,attrs:{shape:[-1,t]}})})),h=c.map((e=>({vals:n.data.get(e.dataId).values,shape:e.shape})));o=s.backend_util.computeOutShape(c.map((e=>e.shape)),1);const d=1===c[0].shape[0],f=(0,ye.j)(h,o,t[0].dtype,d),m=s.backend_util.computeOutShape(l.map((e=>e.shape)),i),g=n.makeTensorInfo(m,t[0].dtype,f);return c.forEach((e=>n.disposeIntermediateTensorInfo(e))),g}const we={kernelName:s.Concat,backendName:"cpu",kernelFunc:ke};function Ne(e){const{inputs:t,backend:n,attrs:r}=e,{x:i,filter:o}=t,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:p}=r;(0,a.H)([i,o],"conv2d");const d=s.backend_util.convertConv2DDataFormat(c),f=s.backend_util.computeConv2DInfo(i.shape,o.shape,l,h,u,p,!1,d),m=f.filterHeight,g=f.filterWidth,y=f.dilationHeight,b=f.dilationWidth,x=f.padInfo.left,v=f.padInfo.top,k="channelsLast"===f.dataFormat,w=new s.TensorBuffer(f.outShape,i.dtype),N=s.util.computeStrides(i.shape),I=s.util.computeStrides(o.shape),S=N[0],T=k?N[1]:N[2],C=k?N[2]:1,$=k?1:N[1],A=w.strides[0],E=k?w.strides[1]:w.strides[2],_=k?w.strides[2]:1,R=k?1:w.strides[1],F=n.data.get(i.dataId).values,D=n.data.get(o.dataId).values,O=w.values;for(let e=0;e<f.batchSize;++e){const t=e*S,n=e*A;for(let e=0;e<f.outHeight;++e){const s=n+e*E,a=e*f.strideHeight-v;for(let e=0;e<m;++e){const n=a+e*y;if(n<0||n>=f.inHeight)continue;const r=e*I[0],i=t+n*T;for(let e=0;e<f.outWidth;++e){const t=s+e*_,n=e*f.strideWidth-x;for(let e=0;e<g;++e){const s=n+e*b;if(s<0||s>=f.inWidth)continue;const a=i+s*C;let o=r+e*I[1];for(let e=0;e<f.inChannels;++e){const n=F[a+e*$];for(let e=0;e<f.outChannels;++e)O[t+e*R]+=n*D[o+e];o+=f.outChannels}}}}}}return n.makeTensorInfo(w.shape,w.dtype,O)}const Ie={kernelName:s.Conv2D,backendName:"cpu",kernelFunc:Ne},Se={kernelName:s.Conv2DBackpropFilter,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:i,dy:o}=t,{strides:l,pad:u,dataFormat:c,dimRoundingMode:h,filterShape:p}=r;(0,a.H)([i,o],"conv2dBackpropFilter");const d=s.backend_util.convertConv2DDataFormat(c),f=s.backend_util.computeConv2DInfo(i.shape,p,l,1,u,h,!1,d),{strideHeight:m,strideWidth:g,filterHeight:y,filterWidth:b}=f,x="channelsLast"===f.dataFormat,v=new s.TensorBuffer(f.filterShape,"float32"),k=f.padInfo.left,w=f.padInfo.top,N=n.data.get(i.dataId).values,I=n.data.get(o.dataId).values,S=new s.TensorBuffer(i.shape,i.dtype,N),T=new s.TensorBuffer(o.shape,o.dtype,I);for(let e=0;e<y;++e){const t=Math.max(0,Math.ceil((w-e)/m)),n=Math.min(f.outHeight,(f.inHeight+w-e)/m);for(let s=0;s<b;++s){const a=Math.max(0,Math.ceil((k-s)/g)),r=Math.min(f.outWidth,(f.inWidth+k-s)/g);for(let i=0;i<f.inChannels;++i)for(let o=0;o<f.outChannels;++o){let l=0;for(let u=0;u<f.batchSize;++u)for(let c=t;c<n;++c){const t=e+c*m-w;for(let e=a;e<r;++e){const n=s+e*g-k;l+=x?S.get(u,t,n,i)*T.get(u,c,e,o):S.get(u,i,t,n)*T.get(u,o,c,e)}}v.set(l,e,s,i,o)}}}return n.makeTensorInfo(v.shape,v.dtype,v.values)}},Te={kernelName:s.Conv2DBackpropInput,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:i,filter:o}=t,{inputShape:l,strides:u,pad:c,dataFormat:h,dimRoundingMode:p}=r;(0,a.H)([i,o],"conv2dBackpropInput");const d=s.util.computeStrides(o.shape),f=s.util.computeStrides(i.shape);let m=s.backend_util.convertConv2DDataFormat(h);const g=s.backend_util.computeConv2DInfo(l,o.shape,u,1,c,p,!1,m),y=new s.TensorBuffer(g.inShape,"float32"),b=y.values,x=n.data.get(i.dataId).values,v=n.data.get(o.dataId).values,[k,w,N]=d,{batchSize:I,filterHeight:S,filterWidth:T,inChannels:C,inHeight:$,inWidth:A,outChannels:E,outHeight:_,outWidth:R,strideHeight:F,strideWidth:D}=g;m=g.dataFormat;const O=S-1-g.padInfo.top,M=T-1-g.padInfo.left,z="channelsLast"===m,L=y.strides[0],B=z?y.strides[1]:y.strides[2],P=z?y.strides[2]:1,V=z?1:y.strides[1],W=f[0],U=z?f[1]:f[2],G=z?f[2]:1,H=z?1:f[1];for(let e=0;e<I;++e)for(let t=0;t<C;++t)for(let n=0;n<$;++n){const s=n-O,a=Math.max(0,Math.ceil(s/F)),r=Math.min(_,(S+s)/F);for(let i=0;i<A;++i){const o=i-M,l=Math.max(0,Math.ceil(o/D)),u=Math.min(R,(T+o)/D);let c=0;for(let n=a;n<r;++n){const a=n*F-s;for(let s=l;s<u;++s){const r=W*e+U*n+G*s,i=k*(S-1-a)+w*(T-1-(s*D-o))+N*t;for(let e=0;e<E;++e)c+=x[r+H*e]*v[i+e]}}b[L*e+B*n+P*i+V*t]=c}}return n.makeTensorInfo(y.shape,y.dtype,y.values)}},Ce={kernelName:s.Conv3D,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:i,filter:o}=t,{strides:l,pad:u,dilations:c}=r;(0,a.H)([i,o],"conv3d");const h=s.backend_util.computeConv3DInfo(i.shape,o.shape,l,c,u),{filterDepth:p,filterHeight:d,filterWidth:f,dilationDepth:m,dilationHeight:g,dilationWidth:y,padInfo:b}=h,x=b.front,v=b.left,k=b.top,w=new s.TensorBuffer(h.outShape,i.dtype),N=n.data.get(i.dataId).values,I=n.data.get(o.dataId).values,S=w.values,T=s.util.computeStrides(i.shape),C=s.util.computeStrides(o.shape);for(let e=0;e<h.batchSize;++e){const t=e*T[0],n=e*w.strides[0];for(let e=0;e<h.outDepth;++e){const s=n+e*w.strides[1],a=e*h.strideDepth-x;for(let e=0;e<p;++e){const n=a+e*m;if(n<0||n>=h.inDepth)continue;const r=e*C[0],i=t+n*T[1];for(let e=0;e<h.outHeight;++e){const t=s+e*w.strides[2],n=e*h.strideHeight-k;for(let e=0;e<d;++e){const s=n+e*g;if(s<0||s>=h.inHeight)continue;const a=r+e*C[1],o=i+s*T[2];for(let e=0;e<h.outWidth;++e){const n=t+e*h.outChannels,s=e*h.strideWidth-v;for(let e=0;e<f;++e){const t=s+e*y;if(t<0||t>=h.inWidth)continue;const r=a+e*C[2],i=o+t*h.inChannels;let l=r;for(let e=0;e<h.inChannels;++e){const t=N[i+e];for(let e=0;e<h.outChannels;++e)S[n+e]+=t*I[l+e];l+=h.outChannels}}}}}}}}return n.makeTensorInfo(w.shape,w.dtype,w.values)}},$e={kernelName:s.Conv3DBackpropFilterV2,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:i,dy:o}=t,{strides:l,pad:u,filterShape:c}=r;(0,a.H)([i,o],"conv3dBackpropFilterV2");const h=s.util.computeStrides(i.shape),p=s.util.computeStrides(o.shape),d=s.backend_util.computeConv3DInfo(i.shape,c,l,1,u),f=d.strideDepth,m=d.strideHeight,g=d.strideWidth,y=d.filterDepth,b=d.filterHeight,x=d.filterWidth,v=new s.TensorBuffer(d.filterShape,"float32"),k=v.values,[w,N,I,S]=v.strides,T=n.data.get(o.dataId).values,[C,$,A,E]=p,_=n.data.get(i.dataId).values,[R,F,D,O]=h,M=d.padInfo.front,z=d.padInfo.left,L=d.padInfo.top;for(let e=0;e<y;++e){const t=Math.max(0,Math.ceil((M-e)/f)),n=Math.min(d.outDepth,(d.inDepth+M-e)/f),s=e*w;for(let a=0;a<b;++a){const r=Math.max(0,Math.ceil((L-a)/m)),i=Math.min(d.outHeight,(d.inHeight+L-a)/m),o=a*N+s;for(let s=0;s<x;++s){const l=Math.max(0,Math.ceil((z-s)/g)),u=Math.min(d.outWidth,(d.inWidth+z-s)/g),c=s*I+o;for(let o=0;o<d.inChannels;++o){const h=o*S+c;for(let c=0;c<d.outChannels;++c){let p=0;for(let h=0;h<d.batchSize;++h){const d=h*R,y=h*C;for(let h=t;h<n;++h){const t=(e+h*f-M)*F+d,n=h*$+y;for(let e=r;e<i;++e){const r=(a+e*m-L)*D+t,i=e*A+n;for(let e=l;e<u;++e){const t=e*E+i;p+=_[(s+e*g-z)*O+r+o]*T[t+c]}}}}k[h+c]=p}}}}}return n.makeTensorInfo(v.shape,v.dtype,v.values)}},Ae={kernelName:s.Conv3DBackpropInputV2,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:i,filter:o}=t,{pad:l,strides:u,inputShape:c}=r;(0,a.H)([i],"conv3dBackpropInputV2");const h=s.util.computeStrides(i.shape),p=s.util.computeStrides(o.shape),d=s.backend_util.computeConv3DInfo(c,o.shape,u,1,l),f=new s.TensorBuffer(d.inShape,"float32"),m=f.values,[g,y,b,x]=f.strides,v=n.data.get(i.dataId).values,[k,w,N,I]=h,S=n.data.get(o.dataId).values,[T,C,$,A]=p,{batchSize:E,filterDepth:_,filterHeight:R,filterWidth:F,inChannels:D,inDepth:O,inHeight:M,inWidth:z,outChannels:L,outDepth:B,outHeight:P,outWidth:V,strideDepth:W,strideHeight:U,strideWidth:G}=d,H=_-1-d.padInfo.front,j=R-1-d.padInfo.top,X=F-1-d.padInfo.left;for(let e=0;e<E;++e)for(let t=0;t<D;++t)for(let n=0;n<O;++n){const s=n-H,a=Math.max(0,Math.ceil(s/W)),r=Math.min(B,(_+s)/W);for(let i=0;i<M;++i){const o=i-j,l=Math.max(0,Math.ceil(o/U)),u=Math.min(P,(R+o)/U);for(let c=0;c<z;++c){const h=c-X,p=Math.max(0,Math.ceil(h/G)),d=Math.min(V,(F+h)/G);let f=0;for(let n=a;n<r;++n){const a=n*W-s;for(let s=l;s<u;++s){const r=s*U-o;for(let i=p;i<d;++i){const o=k*e+w*n+N*s+I*i,l=T*(_-1-a)+C*(R-1-r)+$*(F-1-(i*G-h))+A*t;for(let e=0;e<L;++e)f+=v[o+e]*S[l+e]}}}m[g*e+y*n+b*i+x*c+t]=f}}}return n.makeTensorInfo(f.shape,f.dtype,f.values)}},Ee=(0,u.A)(s.Cos,(e=>Math.cos(e))),_e={kernelName:s.Cos,backendName:"cpu",kernelFunc:Ee},Re=(0,u.A)(s.Cosh,(e=>Math.cosh(e))),Fe={kernelName:s.Cosh,backendName:"cpu",kernelFunc:Re},De={kernelName:s.CropAndResize,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{image:r,boxes:i,boxInd:o}=t,{cropSize:l,method:u,extrapolationValue:c}=a,[h,p,d,f]=r.shape,m=i.shape[0],[g,y]=l,b=(0,s.buffer)([m,g,y,f],"float32"),x=n.data.get(i.dataId).values,v=n.data.get(o.dataId).values,k=n.data.get(r.dataId).values,w=s.util.computeStrides(r.shape),N=s.util.computeStrides(b.shape);for(let e=0;e<m;e++){const t=4*e,n=x[t],s=x[t+1],a=x[t+2],r=x[t+3],i=v[e];if(i>=h)continue;const o=g>1?(a-n)*(p-1)/(g-1):0,l=y>1?(r-s)*(d-1)/(y-1):0;for(let t=0;t<g;t++){const h=g>1?n*(p-1)+t*o:.5*(n+a)*(p-1);if(h<0||h>p-1)for(let n=0;n<y;n++)for(let s=0;s<f;s++){const a=s+n*N[2]+t*N[1]+e*N[0];b.values[a]=c}else if("bilinear"===u){const n=Math.floor(h),a=Math.ceil(h),o=h-n;for(let u=0;u<y;u++){const h=y>1?s*(d-1)+u*l:.5*(s+r)*(d-1);if(h<0||h>d-1){for(let n=0;n<f;n++){const s=n+u*N[2]+t*N[1]+e*N[0];b.values[s]=c}continue}const p=Math.floor(h),m=Math.ceil(h),g=h-p;for(let s=0;s<f;s++){let r=s+p*w[2]+n*w[1]+i*w[0];const l=k[r];r=s+m*w[2]+n*w[1]+i*w[0];const c=k[r];r=s+p*w[2]+a*w[1]+i*w[0];const h=k[r];r=s+m*w[2]+a*w[1]+i*w[0];const d=l+(c-l)*g,f=h+(k[r]-h)*g;r=s+u*N[2]+t*N[1]+e*N[0],b.values[r]=d+(f-d)*o}}}else for(let n=0;n<y;++n){const a=y>1?s*(d-1)+n*l:.5*(s+r)*(d-1);if(a<0||a>d-1){for(let s=0;s<f;s++){const a=s+n*N[2]+t*N[1]+e*N[0];b.values[a]=c}continue}const o=Math.round(a),u=Math.round(h);for(let s=0;s<f;s++){const a=s+o*w[2]+u*w[1]+i*w[0],r=s+n*N[2]+t*N[1]+e*N[0];b.values[r]=k[a]}}}}return n.makeTensorInfo(b.shape,b.dtype,b.values)}},Oe={kernelName:s.Cumsum,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:i}=t,{axis:o,exclusive:l,reverse:u}=r;(0,a.H)(i,"cumsum");const c=s.backend_util.getAxesPermutation([o],i.shape.length);let h=i;null!=c&&(h=(0,M.p)({inputs:{x:i},backend:n,attrs:{perm:c}}));const p=s.backend_util.getInnerMostAxes(1,i.shape.length)[0];if(p!==h.shape.length-1)throw new Error(`backend.cumsum in CPU expects an inner-most axis=${h.shape.length-1} but got axis=${p}`);const d=(0,s.upcastType)(h.dtype,"int32"),f=s.util.makeZerosTypedArray(s.util.sizeFromShape(h.shape),d),m=n.data.get(h.dataId).values,g=h.shape[h.shape.length-1],y=u?(e,t)=>e+g-t-1:(e,t)=>e+t;for(let e=0;e<m.length;e+=g)for(let t=0;t<g;t++){const n=y(e,t);if(0===t)f[n]=l?0:m[n];else{const s=y(e,t-1);f[n]=l?m[s]+f[s]:m[n]+f[s]}}const b=n.makeTensorInfo(h.shape,d,f);if(null!=c){const e=s.backend_util.getUndoAxesPermutation(c),t=(0,M.p)({inputs:{x:b},backend:n,attrs:{perm:e}});return n.disposeIntermediateTensorInfo(b),n.disposeIntermediateTensorInfo(h),t}return b}},Me={kernelName:s.DenseBincount,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,weights:r}=t,{size:i,binaryOutput:o}=s;if(1===a.shape.length){const e=n.data.get(a.dataId).values,t=n.data.get(r.dataId).values,s=(0,ue.W)(e,t,r.dtype,r.shape,i);return n.makeTensorInfo([i],r.dtype,s)}if(2===a.shape.length){const e=n.bufferSync(a),t=n.bufferSync(r),s=(0,ue.i)(e,t,i,o);return n.makeTensorInfo(s.shape,r.dtype,s.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${a.shape.length}.`)}},ze={kernelName:s.DepthToSpace,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{blockSize:i,dataFormat:o}=a;s.util.assert("NHWC"===o,(()=>`Only NHWC dataFormat supported on CPU for depthToSpace. Got ${o}`)),s.util.assert(i>1,(()=>`blockSize should be > 1 for depthToSpace, but was: ${i}`));const l=r.shape[0],u=r.shape[1],c=r.shape[2],h=r.shape[3],p=u*i,d=c*i,f=h/(i*i),m=n.data.get(r.dataId).values,g=new Float32Array(l*p*d*f);let y=0;for(let e=0;e<l;++e)for(let t=0;t<p;++t){const n=Math.floor(t/i),s=t%i;for(let t=0;t<d;++t){const a=Math.floor(t/i),r=(s*i+t%i)*f;for(let t=0;t<f;++t){const s=t+r+h*(a+c*(n+u*e));g[y++]=m[s]}}}return n.makeTensorInfo([l,p,d,f],r.dtype,g)}};function Le(e){const{inputs:t,backend:n,attrs:r}=e,{x:i,filter:o}=t,{strides:l,pad:u,dilations:c,dimRoundingMode:h}=r;(0,a.H)([i,o],"depthwiseConv2DNative");const p=s.util.computeStrides(i.shape),d=s.util.computeStrides(o.shape);let f=c;null==f&&(f=[1,1]),s.util.assert(s.backend_util.eitherStridesOrDilationsAreOne(l,f),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${l} and dilations '${f}'`));const m=s.backend_util.computeConv2DInfo(i.shape,o.shape,l,f,u,h,!0),{filterHeight:g,filterWidth:y,dilationHeight:b,dilationWidth:x,padInfo:v}=m,k=v.left,w=v.top,N=m.outChannels/m.inChannels,I=new s.TensorBuffer(m.outShape,i.dtype),S=n.data.get(i.dataId).values,T=n.data.get(o.dataId).values,C=I.values;for(let e=0;e<m.batchSize;++e){const t=e*p[0],n=e*I.strides[0];for(let e=0;e<m.outHeight;++e){const s=n+e*I.strides[1],a=e*m.strideHeight-k;for(let e=0;e<g;++e){const n=a+e*b;if(n<0||n>=m.inHeight)continue;const r=e*d[0],i=t+n*p[1];for(let e=0;e<m.outWidth;++e){const t=s+e*I.strides[2],n=e*m.strideWidth-w;for(let e=0;e<y;++e){const s=n+e*x;if(s<0||s>=m.inWidth)continue;const a=r+e*d[1],o=i+s*m.inChannels;let l=t,u=a;for(let e=0;e<m.inChannels;++e){const t=S[o+e];for(let e=0;e<N;++e)C[l+e]+=t*T[u+e];l+=N,u+=N}}}}}}return n.makeTensorInfo(I.shape,I.dtype,I.values)}const Be={kernelName:s.DepthwiseConv2dNative,backendName:"cpu",kernelFunc:Le},Pe={kernelName:s.DepthwiseConv2dNativeBackpropFilter,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:i,dy:o}=t,{strides:l,dilations:u,pad:c,dimRoundingMode:h,filterShape:p}=r;(0,a.H)([i,o],"depthwiseConv2dNativeBackpropFilter");const d=s.backend_util.computeConv2DInfo(i.shape,p,l,u,c,h,!0),{strideHeight:f,strideWidth:m,filterHeight:g,filterWidth:y}=d,b=new s.TensorBuffer(d.filterShape,"float32"),x=d.padInfo.left,v=d.padInfo.top,k=d.outChannels/d.inChannels,w=n.data.get(i.dataId).values,N=new s.TensorBuffer(i.shape,i.dtype,w),I=n.data.get(o.dataId).values,S=new s.TensorBuffer(o.shape,o.dtype,I);for(let e=0;e<g;++e){const t=Math.max(0,Math.ceil((v-e)/f)),n=Math.min(d.outHeight,(d.inHeight+v-e)/f);for(let s=0;s<y;++s){const a=Math.max(0,Math.ceil((x-s)/m)),r=Math.min(d.outWidth,(d.inWidth+x-s)/m);for(let i=0;i<d.outChannels;++i){const o=Math.trunc(i/k),l=i%k;let u=0;for(let l=0;l<d.batchSize;++l)for(let c=t;c<n;++c){const t=e+c*f-v;for(let e=a;e<r;++e){const n=s+e*m-x;u+=N.get(l,t,n,o)*S.get(l,c,e,i)}}b.set(u,e,s,o,l)}}}return n.makeTensorInfo(b.shape,b.dtype,b.values)}},Ve={kernelName:s.DepthwiseConv2dNativeBackpropInput,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:i,filter:o}=t,{strides:l,dilations:u,pad:c,dimRoundingMode:h,inputShape:p}=r;(0,a.H)([i,o],"depthwiseConv2DNativeBackpropInput");const d=s.util.computeStrides(i.shape),f=s.util.computeStrides(o.shape),m=s.backend_util.computeConv2DInfo(p,o.shape,l,u,c,h,!0),g=new s.TensorBuffer(m.inShape,"float32"),y=g.values,[b,x,v]=g.strides,k=n.data.get(i.dataId).values,[w,N,I]=d,S=n.data.get(o.dataId).values,[T,C,$]=f,{batchSize:A,filterHeight:E,filterWidth:_,inChannels:R,inHeight:F,inWidth:D,outChannels:O,outHeight:M,outWidth:z,strideHeight:L,strideWidth:B}=m,P=E-1-m.padInfo.top,V=_-1-m.padInfo.left,W=O/R;for(let e=0;e<A;++e)for(let t=0;t<R;++t)for(let n=0;n<F;++n){const s=n-P,a=Math.max(0,Math.ceil(s/L)),r=Math.min(M,(E+s)/L);for(let i=0;i<D;++i){const o=i-V,l=Math.max(0,Math.ceil(o/B)),u=Math.min(z,(_+o)/B);let c=0;for(let n=a;n<r;++n){const a=n*L-s;for(let s=l;s<u;++s){const r=w*e+N*n+I*s,i=T*(E-1-a)+C*(_-1-(s*B-o))+$*t;for(let e=0;e<W;++e)c+=k[r+(t*W+e)]*S[i+e]}}y[b*e+x*n+v*i+t]=c}}return n.makeTensorInfo(g.shape,g.dtype,g.values)}},We={kernelName:s.Diag,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:a}=t,r=s.util.sizeFromShape(a.shape),i=n.data.get(a.dataId).values,o=(0,s.buffer)([r,r],a.dtype),l=o.values;for(let e=0;e<i.length;e++)l[e*r+e]=i[e];const u=[...a.shape,...a.shape];return n.makeTensorInfo(u,o.dtype,o.values)}},Ue={kernelName:s.Dilation2D,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:a,filter:r}=e,{strides:i,pad:o,dilations:l}=n,u=t,c=u.data.get(a.dataId).values,h=a.shape.length,p=u.data.get(r.dataId).values,d=r.shape.length,{batchSize:f,inHeight:m,inWidth:g,inChannels:y,outHeight:b,outWidth:x,padInfo:v,strideHeight:k,strideWidth:w,filterHeight:N,filterWidth:I,dilationHeight:S,dilationWidth:T,outShape:C}=s.backend_util.computeDilation2DInfo(a.shape,r.shape,i,o,"NHWC",l),$=s.util.sizeFromShape(C),A=C.length,E=s.util.getArrayFromDType(a.dtype,$);for(let e=0;e<f;++e)for(let t=0;t<b;++t){const n=t*k-v.top;for(let i=0;i<x;++i){const o=i*w-v.left;for(let l=0;l<y;++l){let u=Number.MIN_SAFE_INTEGER;for(let t=0;t<N;++t){const i=n+t*S;if(i>=0&&i<m)for(let n=0;n<I;++n){const f=o+n*T;if(f>=0&&f<g){const o=s.util.locToIndex([e,i,f,l],h,s.util.computeStrides(a.shape)),m=s.util.locToIndex([t,n,l],d,s.util.computeStrides(r.shape)),g=c[o]+p[m];g>u&&(u=g)}}}E[s.util.locToIndex([e,t,i,l],A,s.util.computeStrides(C))]=u}}}return{dataId:u.write(s.util.toTypedArray(E,a.dtype),C,a.dtype),shape:C,dtype:a.dtype}}},Ge={kernelName:s.Dilation2DBackpropFilter,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:a,filter:r,dy:i}=e,{strides:o,pad:l,dilations:u}=n,c=t,h=s.util.toNestedArray(a.shape,c.data.get(a.dataId).values),p=s.util.toNestedArray(r.shape,c.data.get(r.dataId).values),{batchSize:d,inHeight:f,inWidth:m,inChannels:g,outHeight:y,outWidth:b,padInfo:x,strideHeight:v,strideWidth:k,filterHeight:w,filterWidth:N,dilationHeight:I,dilationWidth:S,outShape:T}=s.backend_util.computeDilation2DInfo(a.shape,r.shape,o,l,"NHWC",u);s.util.assert(i.rank===T.length,(()=>`Error in ${s.Dilation2DBackpropFilter}, dy must have the same rank as output ${T.length}, but got ${i.rank}`));const C=s.util.toNestedArray(T,c.data.get(i.dataId).values),$=s.util.makeZerosNestedTypedArray(r.shape,r.dtype);for(let e=0;e<d;++e)for(let t=0;t<y;++t){const n=t*v-x.top;for(let s=0;s<b;++s){const a=s*k-x.left;for(let r=0;r<g;++r){let i=Number.MIN_SAFE_INTEGER,o=0,l=0;for(let t=0;t<w;++t){const s=n+t*I;if(s>=0&&s<f)for(let n=0;n<N;++n){const u=a+n*S;if(u>=0&&u<m){const a=h[e][s][u][r]+p[t][n][r];a>i&&(i=a,o=t,l=n)}}}$[o][l][r]+=C[e][t][s][r]}}}return{dataId:c.write(s.util.toTypedArray($,a.dtype),r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},He={kernelName:s.Dilation2DBackpropInput,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:a,filter:r,dy:i}=e,{strides:o,pad:l,dilations:u}=n,c=t,h=s.util.toNestedArray(a.shape,c.data.get(a.dataId).values),p=s.util.toNestedArray(r.shape,c.data.get(r.dataId).values),{batchSize:d,inHeight:f,inWidth:m,inChannels:g,outHeight:y,outWidth:b,padInfo:x,strideHeight:v,strideWidth:k,filterHeight:w,filterWidth:N,dilationHeight:I,dilationWidth:S,outShape:T}=s.backend_util.computeDilation2DInfo(a.shape,r.shape,o,l,"NHWC",u);s.util.assert(i.rank===T.length,(()=>`Error in ${s.Dilation2DBackpropInput}, dy must have the same rank as output ${T.length}, but got ${i.rank}`));const C=s.util.toNestedArray(T,c.data.get(i.dataId).values),$=s.util.makeZerosNestedTypedArray(a.shape,a.dtype);for(let e=0;e<d;++e)for(let t=0;t<y;++t){const n=t*v-x.top;for(let s=0;s<b;++s){const a=s*k-x.left;for(let r=0;r<g;++r){let i=Number.MIN_SAFE_INTEGER,o=n<0?0:n,l=a<0?0:a;for(let t=0;t<w;++t){const s=n+t*I;if(s>=0&&s<f)for(let n=0;n<N;++n){const u=a+n*S;if(u>=0&&u<m){const a=h[e][s][u][r]+p[t][n][r];a>i&&(i=a,o=s,l=u)}}}$[e][o][l][r]+=C[e][t][s][r]}}}return{dataId:c.write(s.util.toTypedArray($,a.dtype),a.shape,a.dtype),shape:a.shape,dtype:a.dtype}}},je={kernelName:s.EluGrad,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{dy:r,y:i}=t;(0,a.H)([r,i],"eluGrad");const o=new Float32Array(s.util.sizeFromShape(i.shape)),l=n.data.get(i.dataId).values,u=n.data.get(r.dataId).values;for(let e=0;e<l.length;++e){const t=l[e];o[e]=t>=1?u[e]:u[e]*(t+1)}return n.makeTensorInfo(i.shape,"float32",o)}},Xe=(0,m.b)(((e,t)=>e===t?1:0)),qe=(0,X.j)(s.Equal,Xe,null,"bool"),Ke={kernelName:s.Equal,backendName:"cpu",kernelFunc:qe},Ye=s.backend_util.ERF_P,Qe=s.backend_util.ERF_A1,Je=s.backend_util.ERF_A2,Ze=s.backend_util.ERF_A3,et=s.backend_util.ERF_A4,tt=s.backend_util.ERF_A5,nt=(0,u.A)(s.Erf,(e=>{const t=Math.sign(e),n=Math.abs(e),s=1/(1+Ye*n);return t*(1-((((tt*s+et)*s+Ze)*s+Je)*s+Qe)*s*Math.exp(-n*n))})),st={kernelName:s.Erf,backendName:"cpu",kernelFunc:nt};var at=n(1211);function rt(e){const{inputs:t,backend:n,attrs:a}=e,{input:r}=t,{dim:i}=a,o=r.shape.length,l=r.shape.slice();let u=i;return i<0&&(s.util.assert(-(o+1)<=i,(()=>`Axis must be in the interval [${-(o+1)}, ${o}]`)),u=o+i+1),l.splice(u,0,1),S({inputs:{x:r},backend:n,attrs:{shape:l}})}const it={kernelName:s.ExpandDims,backendName:"cpu",kernelFunc:rt};var ot=n(969),lt=n(1917);const ut=(0,m.b)(((e,t)=>e/t)),ct=(0,X.j)(s.RealDiv,ut),ht={kernelName:s.RealDiv,backendName:"cpu",kernelFunc:ct};var pt=n(1649);function dt(e,t,n){const a=e.shape,r=a[0],i=a[1],o=n.data.get(e.dataId),l=o.complexTensorInfos.real,u=o.complexTensorInfos.imag,c=[r,i],h=s.util.sizeFromShape(c),p=s.util.getTypedArrayFromDType("float32",h),d=s.util.getTypedArrayFromDType("float32",h);for(let e=0;e<r;e++){const a=(0,oe.tP)({inputs:{x:l},backend:n,attrs:{begin:[e,0],size:[1,i]}}),r=(0,oe.tP)({inputs:{x:u},backend:n,attrs:{begin:[e,0],size:[1,i]}}),o=(0,me.P)({inputs:{real:a,imag:r},backend:n}),{real:c,imag:h}=ft(o,t,n),f=s.backend_util.mergeRealAndImagArrays(c,h);for(let t=0;t<i;t++){const n=s.backend_util.getComplexWithIndex(f,t);p[e*i+t]=n.real,d[e*i+t]=n.imag}n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(o)}const f=n.makeTensorInfo(c,"float32",p),m=n.makeTensorInfo(c,"float32",d),g=(0,me.P)({inputs:{real:f,imag:m},backend:n});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),g}function ft(e,t,n){const a=s.util.sizeFromShape(e.shape),r=n.data.get(e.dataId),i=n.data.get(r.complexTensorInfos.real.dataId).values,o=n.data.get(r.complexTensorInfos.imag.dataId).values;if(0==((l=a)&l-1)){const r=mt(i,o,a,t,n),l=[e.shape[0],e.shape[1]];if(t){const e=n.makeTensorInfo(l,"float32",r.real),t=n.makeTensorInfo(l,"float32",r.imag),i=n.makeTensorInfo([],"float32",s.util.createScalarValue(a,"float32")),o=(0,p.y)({inputs:{x:i},backend:n}),u=ht.kernelFunc({inputs:{a:e,b:i},backend:n}),c=ht.kernelFunc({inputs:{a:t,b:o},backend:n}),h=n.data.get(u.dataId).values,d=n.data.get(c.dataId).values;return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(c),{real:h,imag:d}}return r}{const e=function(e,t,n){const a=new Float32Array(2*t);for(let r=0;r<t;r++){let i=0,o=0;for(let a=0;a<t;a++){const l=s.backend_util.exponent(r*a,t,n),u=s.backend_util.getComplexWithIndex(e,a);i+=u.real*l.real-u.imag*l.imag,o+=u.real*l.imag+u.imag*l.real}n&&(i/=t,o/=t),s.backend_util.assignToTypedArray(a,i,o,r)}return a}(s.backend_util.mergeRealAndImagArrays(i,o),a,t);return s.backend_util.splitRealAndImagArrays(e)}var l}function mt(e,t,n,a,r){if(1===n)return{real:e,imag:t};const i=s.backend_util.mergeRealAndImagArrays(e,t),o=n/2,l=s.backend_util.complexWithEvenIndex(i),u=l.real,c=l.imag,h=[u.length],p=r.makeTensorInfo(h,"float32",u),d=r.makeTensorInfo(h,"float32",c),f=(0,me.P)({inputs:{real:p,imag:d},backend:r}),m=s.backend_util.complexWithOddIndex(i),g=m.real,y=m.imag,b=[g.length],x=r.makeTensorInfo(b,"float32",g),v=r.makeTensorInfo(b,"float32",y),k=(0,me.P)({inputs:{real:x,imag:v},backend:r}),w=mt(u,c,o,a,r),N=w.real,S=w.imag,T=[N.length],C=r.makeTensorInfo(T,"float32",N),$=r.makeTensorInfo(T,"float32",S),A=(0,me.P)({inputs:{real:C,imag:$},backend:r}),E=mt(g,y,o,a,r),_=E.real,R=E.imag,F=[_.length],D=r.makeTensorInfo(F,"float32",_),O=r.makeTensorInfo(F,"float32",R),M=(0,me.P)({inputs:{real:D,imag:O},backend:r}),z=s.backend_util.exponents(n,a),L=[z.real.length],B=r.makeTensorInfo(L,"float32",z.real),P=r.makeTensorInfo(L,"float32",z.imag),V=(0,me.P)({inputs:{real:B,imag:P},backend:r}),W=(0,lt.Jp)({inputs:{a:V,b:M},backend:r}),U=(0,I.IH)({inputs:{a:A,b:W},backend:r}),G=(0,pt.lu)({inputs:{a:A,b:W},backend:r}),H=(0,ve.k)({inputs:{input:U},backend:r}),j=(0,ve.k)({inputs:{input:G},backend:r}),X=be({inputs:{input:U},backend:r}),q=be({inputs:{input:G},backend:r}),K=ke({inputs:[H,j],backend:r,attrs:{axis:0}}),Y=ke({inputs:[X,q],backend:r,attrs:{axis:0}}),Q=r.data.get(K.dataId).values,J=r.data.get(Y.dataId).values;return r.disposeIntermediateTensorInfo(p),r.disposeIntermediateTensorInfo(d),r.disposeIntermediateTensorInfo(f),r.disposeIntermediateTensorInfo(x),r.disposeIntermediateTensorInfo(v),r.disposeIntermediateTensorInfo(k),r.disposeIntermediateTensorInfo(C),r.disposeIntermediateTensorInfo($),r.disposeIntermediateTensorInfo(A),r.disposeIntermediateTensorInfo(D),r.disposeIntermediateTensorInfo(O),r.disposeIntermediateTensorInfo(M),r.disposeIntermediateTensorInfo(B),r.disposeIntermediateTensorInfo(P),r.disposeIntermediateTensorInfo(V),r.disposeIntermediateTensorInfo(W),r.disposeIntermediateTensorInfo(U),r.disposeIntermediateTensorInfo(G),r.disposeIntermediateTensorInfo(H),r.disposeIntermediateTensorInfo(X),r.disposeIntermediateTensorInfo(j),r.disposeIntermediateTensorInfo(q),r.disposeIntermediateTensorInfo(K),r.disposeIntermediateTensorInfo(Y),{real:Q,imag:J}}const gt={kernelName:s.FFT,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:a}=t,r=s.util.sizeFromShape(a.shape),i=a.shape[a.shape.length-1],o=S({inputs:{x:a},backend:n,attrs:{shape:[r/i,i]}}),l=dt(o,!1,n),u=S({inputs:{x:l},backend:n,attrs:{shape:a.shape}});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(l),u}};function yt(e){const{backend:t,attrs:n}=e,{shape:a,value:r,dtype:i}=n,o=i||s.util.inferDtype(r),l=s.util.getArrayFromDType(o,s.util.sizeFromShape(a));return function(e,t,n){e.fill(t)}(l,r),t.makeTensorInfo(a,o,l)}const bt={kernelName:s.Fill,backendName:"cpu",kernelFunc:yt},xt={kernelName:s.FlipLeftRight,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:a}=e,r=n,i=s.util.getTypedArrayFromDType(a.dtype,s.util.sizeFromShape(a.shape)),[o,l,u,c]=a.shape,h=r.data.get(a.dataId).values;for(let e=0;e<o;e++){const t=e*u*l*c;for(let e=0;e<l;e++){const n=e*(u*c);for(let s=0;s<u;s++){const a=s*c;for(let r=0;r<c;r++){const l=[o,e,s,r][2],p=Math.round(u-l),d=t+n+a+r;let f=h[d];p>=0&&p<u&&(f=h[t+n+p*c+r]),i[d]=f}}}}return{dataId:r.write(i,a.shape,a.dtype),shape:a.shape,dtype:a.dtype}}};var vt=n(6574);const kt=(0,m.b)(((e,t)=>Math.floor(e/t))),wt=(0,X.j)(s.FloorDiv,kt,null,"int32"),Nt={kernelName:s.FloorDiv,backendName:"cpu",kernelFunc:wt},It={kernelName:s.FusedConv2D,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,filter:r,bias:i,preluActivationWeights:o}=t,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:p,activation:d,leakyreluAlpha:f}=s;let m=Ne({inputs:{x:a,filter:r},backend:n,attrs:{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:p}});if(i){const e=m;m=(0,I.IH)({inputs:{a:m,b:i},backend:n}),n.disposeIntermediateTensorInfo(e)}if(d){const e=m;m=N(n,m,d,o,f),n.disposeIntermediateTensorInfo(e)}return m}},St={kernelName:s.FusedDepthwiseConv2D,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,filter:r,bias:i,preluActivationWeights:o}=t,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:p,activation:d,leakyreluAlpha:f}=s;let m=Le({inputs:{x:a,filter:r},backend:n,attrs:{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:p}});if(i){const e=m;m=(0,I.IH)({inputs:{a:m,b:i},backend:n}),n.disposeIntermediateTensorInfo(e)}if(d){const e=m;m=N(n,m,d,o,f),n.disposeIntermediateTensorInfo(e)}return m}},Tt={kernelName:s.GatherNd,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{params:a,indices:r}=t,i=s.util.sizeFromShape(a.shape),o=r.shape,l=o[o.length-1],[u,c,h,p]=s.backend_util.prepareAndValidate(a,r);if(0===c)return n.makeTensorInfo(u,a.dtype,[]);const d=(0,s.buffer)([c,h],a.dtype),f=n.data.get(r.dataId).values,m=n.data.get(a.dataId).values;for(let e=0;e<c;e++){const t=[];let n=0;for(let s=0;s<l;s++){const a=f[e*l+s];n+=a*p[s],t.push(a)}if(n<0||n>=i/h)throw new Error(`Invalid indices: ${t} does not index into ${a.shape}`);for(let t=0;t<h;t++)d.values[e*h+t]=m[n*h+t]}return n.makeTensorInfo(u,d.dtype,d.values)}};var Ct=n(4468);const $t={kernelName:s.GatherV2,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:i,indices:o}=t,{axis:l,batchDims:u}=r;(0,a.H)([i,o],"gatherV2");let c=u;null==u&&(c=0);const h=s.util.sizeFromShape(o.shape),p=s.util.parseAxisParam(l,i.shape)[0],d=s.backend_util.segment_util.collectGatherOpShapeInfo(i,o,p,c),f=S({inputs:{x:i},backend:n,attrs:{shape:[d.batchSize,d.outerSize,d.dimSize,d.sliceSize]}}),m=S({inputs:{x:o},backend:n,attrs:{shape:[d.batchSize,h/d.batchSize]}}),g=[d.batchSize,d.outerSize,h/d.batchSize,d.sliceSize],y=n.bufferSync(m),b=n.bufferSync(f),x=(0,Ct.i)(b,y,g);return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),n.makeTensorInfo(d.outputShape,x.dtype,x.values)}};var At=n(6272);const Et=(0,m.b)(((e,t)=>e>=t?1:0)),_t=(0,X.j)(s.GreaterEqual,Et,null,"bool"),Rt={kernelName:s.GreaterEqual,backendName:"cpu",kernelFunc:_t},Ft={kernelName:s.IFFT,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:a}=t,r=s.util.sizeFromShape(a.shape),i=a.shape[a.shape.length-1],o=S({inputs:{x:a},backend:n,attrs:{shape:[r/i,i]}}),l=dt(o,!0,n),u=S({inputs:{x:l},backend:n,attrs:{shape:a.shape}});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(l),u}},Dt=(0,u.A)(s.IsFinite,(e=>Number.isFinite(e)?1:0),"bool"),Ot={kernelName:s.IsFinite,backendName:"cpu",kernelFunc:Dt},Mt=(0,u.A)(s.IsInf,(e=>Math.abs(e)===1/0?1:0),"bool"),zt={kernelName:s.IsInf,backendName:"cpu",kernelFunc:Mt},Lt=(0,u.A)(s.IsNan,(e=>Number.isNaN(e)?1:0),"bool"),Bt={kernelName:s.IsNan,backendName:"cpu",kernelFunc:Lt};var Pt=n(8405);const Vt=(0,m.b)(((e,t)=>e<=t?1:0)),Wt=(0,X.j)(s.LessEqual,Vt,null,"bool"),Ut={kernelName:s.LessEqual,backendName:"cpu",kernelFunc:Wt};var Gt=n(1325);const Ht={kernelName:s.LinSpace,backendName:"cpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:s,stop:a,num:r}=n,i=(0,Gt.b)(s,a,r);return t.makeTensorInfo([i.length],"float32",i)}};var jt=n(5223);const Xt=(0,u.A)(s.Log1p,(e=>Math.log1p(e))),qt={kernelName:s.Log1p,backendName:"cpu",kernelFunc:Xt},Kt=(0,m.b)(((e,t)=>e&&t)),Yt=(0,X.j)(s.LogicalAnd,Kt,null,"bool"),Qt={kernelName:s.LogicalAnd,backendName:"cpu",kernelFunc:Yt},Jt=(0,u.A)(s.LogicalNot,(e=>e?0:1),"bool"),Zt={kernelName:s.LogicalNot,backendName:"cpu",kernelFunc:Jt},en=(0,m.b)(((e,t)=>e||t)),tn=(0,X.j)(s.LogicalOr,en,null,"bool"),nn={kernelName:s.LogicalOr,backendName:"cpu",kernelFunc:tn},sn={kernelName:s.LRN,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:i}=t,{depthRadius:o,bias:l,alpha:u,beta:c}=r;(0,a.H)(i,"LRN");const h=i.shape[3],p=h-1,d=n.data.get(i.dataId).values,f=s.util.sizeFromShape(i.shape),m=new Float32Array(f);function g(e){const t=e%h;let n=e-t+Math.max(0,t-o);const s=e-t+Math.min(t+o,p);let a=0;for(;n<=s;n++){const e=d[n];a+=e*e}return a}for(let e=0;e<f;e++){const t=g(e),n=d[e]*Math.pow(l+u*t,-c);m[e]=n}return n.makeTensorInfo(i.shape,i.dtype,m)}},an={kernelName:s.LRNGrad,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:i,y:o,dy:l}=t,{depthRadius:u,bias:c,alpha:h,beta:p}=r;(0,a.H)(l,"LRNGrad");const d=s.util.sizeFromShape(l.shape),f=l.shape[3],m=n.data.get(l.dataId).values,g=n.data.get(i.dataId).values,y=n.data.get(o.dataId).values,b=new Float32Array(d),x=d;for(let e=0;e<x;e++){const t=e%f,n=e-t+Math.max(0,t-u),s=e-t+Math.min(f,t+u+1);let a=0;for(let e=n;e<s;e++)a+=Math.pow(g[e],2);a=h*a+c;for(let t=n;t<s;t++){let n=-2*h*p*g[t]*y[e]/a;e===t&&(n+=Math.pow(a,-p)),n*=m[e],b[t]+=n}}return n.makeTensorInfo(l.shape,i.dtype,b)}};var rn=n(5126),on=n(7107);function ln(e){const{inputs:t,backend:n,attrs:r}=e,{x:i}=t,{reductionIndices:o,keepDims:l}=r,u=n;let c=i.shape;const h=c.length,p=s.util.parseAxisParam(o,c);let d=p;const f=s.backend_util.getAxesPermutation(d,h);let m=u.data.get(i.dataId).values;if(null!=f){const e=new Array(h);for(let t=0;t<e.length;t++)e[t]=c[f[t]];m=(0,on.H)(m,c,i.dtype,f,e),d=s.backend_util.getInnerMostAxes(d.length,h),c=e}(0,a.H)(i,"max"),s.backend_util.assertAxesAreInnerMostDims("max",d,h);const[g,y]=s.backend_util.computeOutAndReduceShapes(c,d),b=s.util.sizeFromShape(y),x=(0,rn.B)(m,b,g,i.dtype),v=u.write(x,g,i.dtype);let k=g;return l&&(k=s.backend_util.expandShapeToKeepDim(g,p)),{dataId:v,shape:k,dtype:i.dtype}}const un={kernelName:s.Max,backendName:"cpu",kernelFunc:ln};var cn=n(1717);const hn={kernelName:s.MaxPool,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:i}=t;(0,a.H)(i,"maxPool");const{filterSize:o,strides:l,pad:u,dimRoundingMode:c}=r;s.util.assert(s.backend_util.eitherStridesOrDilationsAreOne(l,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${l} and dilations '1'`));const h=s.backend_util.computePool2DInfo(i.shape,o,l,1,u,c);let d;if(1===h.filterWidth&&1===h.filterHeight&&s.util.arraysEqual(h.inShape,h.outShape))d=(0,p.y)({inputs:{x:i},backend:n});else{const e=n.data.get(i.dataId).values,t=s.util.computeStrides(i.shape),a=Z(e,i.shape,i.dtype,t,h,"max");d=n.makeTensorInfo(h.outShape,i.dtype,a.values)}return d}},pn={kernelName:s.MaxPool3D,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:i}=t,{filterSize:o,strides:l,pad:u,dimRoundingMode:c,dataFormat:h}=r;(0,a.H)(i,"maxPool3d");const p=s.backend_util.computePool3DInfo(i.shape,o,l,1,u,c,h),d=te(n.data.get(i.dataId).values,i.shape,i.dtype,s.util.computeStrides(i.shape),p,"max");return n.makeTensorInfo(d.shape,"float32",d.values)}},dn={kernelName:s.MaxPool3DGrad,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:i,input:o}=t,{filterSize:l,strides:u,pad:c,dimRoundingMode:h}=r;(0,a.H)([i,o],"maxPool3DGrad");const p=s.backend_util.computePool3DInfo(o.shape,l,u,1,c,h),d=function(e,t){const n=(0,s.buffer)(t.outShape,"int32"),a=t.strideDepth,r=t.strideHeight,i=t.strideWidth,o=t.dilationDepth,l=t.dilationHeight,u=t.dilationWidth,c=t.effectiveFilterDepth,h=t.effectiveFilterHeight,p=t.effectiveFilterWidth,d=t.padInfo.front,f=t.padInfo.top,m=t.padInfo.left;for(let s=0;s<t.batchSize;++s)for(let g=0;g<t.inChannels;++g)for(let y=0;y<t.outDepth;++y){const b=y*a-d;let x=b;for(;x<0;)x+=o;const v=Math.min(t.inDepth,c+b);for(let a=0;a<t.outHeight;++a){const c=a*r-f;let d=c;for(;d<0;)d+=l;const k=Math.min(t.inHeight,h+c);for(let r=0;r<t.outWidth;++r){const f=r*i-m;let w=f;for(;w<0;)w+=u;const N=Math.min(t.inWidth,p+f);let I=Number.NEGATIVE_INFINITY,S=-1;for(let t=x;t<v;t+=o){const n=t-b;for(let a=d;a<k;a+=l){const r=a-c;for(let i=w;i<N;i+=u){const o=i-f,l=e.get(s,t,a,i,g);l>=I&&(I=l,S=n*h*p+r*h+o)}}}n.set(S,s,y,a,r,g)}}}return n}(n.bufferSync(o),p),f=p.strideDepth,m=p.strideHeight,g=p.strideWidth,y=p.dilationDepth,b=p.dilationHeight,x=p.dilationWidth,v=p.effectiveFilterDepth,k=p.effectiveFilterHeight,w=p.effectiveFilterWidth,N=v-1-p.padInfo.front,I=w-1-p.padInfo.left,S=k-1-p.padInfo.top,T=(0,s.buffer)(o.shape,"float32"),C=n.bufferSync(i);for(let e=0;e<p.batchSize;++e)for(let t=0;t<p.inChannels;++t)for(let n=0;n<p.inDepth;++n)for(let s=0;s<p.inHeight;++s)for(let a=0;a<p.inWidth;++a){const r=n-N,i=s-S,o=a-I;let l=0;for(let n=0;n<v;n+=y){const s=(r+n)/f;if(!(s<0||s>=p.outDepth||Math.floor(s)!==s))for(let a=0;a<k;a+=b){const r=(i+a)/m;if(!(r<0||r>=p.outHeight||Math.floor(r)!==r))for(let i=0;i<w;i+=x){const u=(o+i)/g;if(u<0||u>=p.outWidth||Math.floor(u)!==u)continue;const c=v*k*w-1-d.get(e,s,r,u,t)===n*k*w+a*w+i?1:0;0!==c&&(l+=C.get(e,s,r,u,t)*c)}}}T.set(l,e,n,s,a,t)}return n.makeTensorInfo(T.shape,T.dtype,T.values)}},fn={kernelName:s.MaxPoolGrad,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:i,input:o,output:l}=t,u=o;(0,a.H)([o,l],"maxPoolGrad");const{filterSize:c,strides:h,pad:p,dimRoundingMode:d}=r,f=s.backend_util.computePool2DInfo(u.shape,c,h,1,p,d),m=n.data.get(u.dataId).values,g=(0,s.buffer)(f.outShape,u.dtype,ee(m,u.shape,u.dtype,f).values),y=f.strideHeight,b=f.strideWidth,x=f.dilationHeight,v=f.dilationWidth,k=f.effectiveFilterHeight,w=f.effectiveFilterWidth,N=w-1-f.padInfo.left,I=k-1-f.padInfo.top,S=(0,s.buffer)(u.shape,"float32"),T=n.data.get(i.dataId).values,C=(0,s.buffer)(i.shape,"float32",T);for(let e=0;e<f.batchSize;++e)for(let t=0;t<f.inChannels;++t)for(let n=0;n<f.inHeight;++n)for(let s=0;s<f.inWidth;++s){const a=n-I,r=s-N;let i=0;for(let n=0;n<k;n+=x){const s=(a+n)/y;if(!(s<0||s>=f.outHeight||Math.floor(s)!==s))for(let a=0;a<w;a+=v){const o=(r+a)/b;if(o<0||o>=f.outWidth||Math.floor(o)!==o)continue;const l=k*w-1-g.get(e,s,o,t)===n*w+a?1:0;0!==l&&(i+=C.get(e,s,o,t)*l)}}S.set(i,e,n,s,t)}return n.makeTensorInfo(S.shape,S.dtype,S.values)}},mn={kernelName:s.MaxPoolWithArgmax,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:r}=e,{filterSize:i,strides:o,pad:l,includeBatchInIndex:u}=t,c=n;(0,a.H)(r,"MaxPoolWithArgmax");const h=c.data.get(r.dataId).values,p=s.backend_util.computePool2DInfo(r.shape,i,o,[1,1],l),[d,f]=function(e,t,n,a,r){const i=Z(e,0,n,s.util.computeStrides(t),r,"max"),o=ee(e,t,n,r,!0,a);return[i.values,o.values]}(h,r.shape,r.dtype,u,p),m=c.write(d,p.outShape,r.dtype),g=c.write(f,p.outShape,r.dtype);return[{dataId:m,shape:p.outShape,dtype:r.dtype},{dataId:g,shape:p.outShape,dtype:"int32"}]}};var gn=n(4391);function yn(e){const{inputs:t,backend:n,attrs:r}=e,{x:i}=t,{axis:o,keepDims:l}=r;let u;(0,a.H)(i,"sum"),u="bool"===i.dtype?(0,he.p)({inputs:{x:i},backend:n,attrs:{dtype:"int32"}}):(0,p.y)({inputs:{x:i},backend:n});const c=u.shape.length,h=s.util.parseAxisParam(o,u.shape),d=s.backend_util.getAxesPermutation(h,c);let f=h,m=u;null!=d&&(m=(0,M.p)({inputs:{x:u},backend:n,attrs:{perm:d}}),f=s.backend_util.getInnerMostAxes(f.length,c)),s.backend_util.assertAxesAreInnerMostDims("sum",f,m.shape.length);const[g,y]=s.backend_util.computeOutAndReduceShapes(m.shape,f),b=s.backend_util.upcastType(m.dtype,"int32");let x=(0,gn.l)(n,g,b);const v=s.util.sizeFromShape(y),k=n.data.get(x.dataId).values,w=n.data.get(m.dataId).values;for(let e=0;e<k.length;++e){const t=e*v;let n=0;for(let e=0;e<v;++e)n+=w[t+e];k[e]=n}if(l){const e=x;x=S({inputs:{x},backend:n,attrs:{shape:s.backend_util.expandShapeToKeepDim(x.shape,h)}}),n.disposeIntermediateTensorInfo(e)}return n.disposeIntermediateTensorInfo(u),null!=d&&n.disposeIntermediateTensorInfo(m),x}const bn={kernelName:s.Sum,backendName:"cpu",kernelFunc:yn},xn={kernelName:s.Mean,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{axis:i,keepDims:o}=a,l=s.util.parseAxisParam(i,r.shape),u=s.backend_util.computeOutAndReduceShapes(r.shape,l)[1],c=s.util.sizeFromShape(u),h=[],p=n.makeTensorInfo([],"float32",new Float32Array([c]));h.push(p);const d=(0,he.p)({inputs:{x:r},backend:n,attrs:{dtype:"float32"}});h.push(d);const f=ct({inputs:{a:d,b:p},backend:n});h.push(f);const m=yn({inputs:{x:f},backend:n,attrs:{axis:i,keepDims:o}});return h.forEach((e=>n.disposeIntermediateTensorInfo(e))),m}},vn={kernelName:s.Min,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:i}=t,{axis:o,keepDims:l}=r;(0,a.H)(i,"min");const u=s.util.parseAxisParam(o,i.shape);let c=u;const h=s.backend_util.getAxesPermutation(c,i.shape.length);let p=i;null!=h&&(p=(0,M.p)({inputs:{x:i},backend:n,attrs:{perm:h}}),c=s.backend_util.getInnerMostAxes(c.length,i.shape.length)),s.backend_util.assertAxesAreInnerMostDims("min",c,p.shape.length);const[d,f]=s.backend_util.computeOutAndReduceShapes(p.shape,c),m=s.util.sizeFromShape(f),g=s.util.makeZerosTypedArray(s.util.sizeFromShape(d),p.dtype),y=n.data.get(p.dataId).values;for(let e=0;e<g.length;++e){const t=e*m;let n=y[t];for(let e=0;e<m;++e){const s=y[t+e];s<n&&(n=s)}g[e]=n}null!=h&&n.disposeIntermediateTensorInfo(p);const b=n.makeTensorInfo(d,p.dtype,g);if(l){const e=S({inputs:{x:b},backend:n,attrs:{shape:s.backend_util.expandShapeToKeepDim(d,u)}});return n.disposeIntermediateTensorInfo(b),e}return b}};var kn=n(612);const wn={kernelName:s.MirrorPad,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:i}=t,{paddings:o,mode:l}=r;(0,a.H)(i,"mirrorPad");const u=o.map(((e,t)=>e[0]+i.shape[t]+e[1])),c=o.map((e=>e[0])),h=o.map(((e,t)=>e[0]+i.shape[t])),p="reflect"===l?0:1,d=n.data.get(i.dataId).values,f=i.shape.length,m=s.util.computeStrides(i.shape),g=s.util.sizeFromShape(u),y=u.length,b=s.util.computeStrides(u),x=s.util.getTypedArrayFromDType(i.dtype,g);for(let e=0;e<g;e++){let t=s.util.indexToLoc(e,y,b);for(let e=0;e<y;e++)t[e]<c[e]?t[e]=2*c[e]-t[e]-p:t[e]>=h[e]&&(t[e]=2*(h[e]-1)-t[e]+p);t=t.map(((e,t)=>e-c[t]));const n=s.util.locToIndex(t,f,m);x[e]=d[n]}return{dataId:n.write(x,u,i.dtype),shape:u,dtype:i.dtype}}},Nn=(0,m.b)(((e,t)=>{const n=e%t;return e<0&&t<0||e>=0&&t>=0?n:(n+t)%t})),In=(0,X.j)(s.Mod,Nn),Sn={kernelName:s.Mod,backendName:"cpu",kernelFunc:In};var Tn=n(6377);function Cn(e){const{inputs:t,backend:n,attrs:a}=e,{logits:r}=t,{dim:i}=a,o=r.shape.length;let l=i;if(-1===l&&(l=o-1),l!==o-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${o} and dim was ${l}`);const u=s.util.parseAxisParam([l],r.shape),c=ln({inputs:{x:r},backend:n,attrs:{reductionIndices:u,keepDims:!1}}),h=s.backend_util.expandShapeToKeepDim(c.shape,u),p=S({inputs:{x:c},backend:n,attrs:{shape:h}}),d=(0,pt.lu)({inputs:{a:r,b:p},backend:n}),f=(0,at.Qq)({inputs:{x:d},backend:n}),m=yn({inputs:{x:f},backend:n,attrs:{axis:u,keepDims:!1}}),g=S({inputs:{x:m},backend:n,attrs:{shape:h}}),y=ct({inputs:{a:f,b:g},backend:n});return n.disposeIntermediateTensorInfo(c),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(g),y}const $n={kernelName:s.Softmax,backendName:"cpu",kernelFunc:Cn},An={kernelName:s.Multinomial,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{logits:i}=t,{numSamples:o,seed:l,normalized:u}=r;(0,a.H)(i,"multinomial");const c=u?i:Cn({inputs:{logits:i},backend:n,attrs:{dim:-1}}),h=c.shape[0],p=c.shape[1],d=n.data.get(c.dataId).values,f=[h,o],m=s.util.makeZerosTypedArray(s.util.sizeFromShape(f),"int32");for(let e=0;e<h;++e){const t=e*p,n=new Float32Array(p-1);n[0]=d[t];for(let e=1;e<n.length;++e)n[e]=n[e-1]+d[t+e];const s=Tn.alea(l.toString()),a=e*o;for(let e=0;e<o;++e){const t=s();m[a+e]=n.length;for(let s=0;s<n.length;s++)if(t<n[s]){m[a+e]=s;break}}}return u||n.disposeIntermediateTensorInfo(c),n.makeTensorInfo(f,"int32",m)}};var En=n(854);const _n=s.kernel_impls.nonMaxSuppressionV3Impl,Rn={kernelName:s.NonMaxSuppressionV3,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:i}=t,{maxOutputSize:o,iouThreshold:l,scoreThreshold:u}=s;(0,a.H)(r,"NonMaxSuppression");const c=n.data.get(r.dataId).values,h=n.data.get(i.dataId).values,{selectedIndices:p}=_n(c,h,o,l,u);return n.makeTensorInfo([p.length],"int32",new Int32Array(p))}},Fn=s.kernel_impls.nonMaxSuppressionV4Impl,Dn={kernelName:s.NonMaxSuppressionV4,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:i}=t,{maxOutputSize:o,iouThreshold:l,scoreThreshold:u,padToMaxOutputSize:c}=s;(0,a.H)(r,"NonMaxSuppressionPadded");const h=n.data.get(r.dataId).values,p=n.data.get(i.dataId).values,{selectedIndices:d,validOutputs:f}=Fn(h,p,o,l,u,c);return[n.makeTensorInfo([d.length],"int32",new Int32Array(d)),n.makeTensorInfo([],"int32",new Int32Array([f]))]}},On=s.kernel_impls.nonMaxSuppressionV5Impl,Mn={kernelName:s.NonMaxSuppressionV5,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:i}=t,{maxOutputSize:o,iouThreshold:l,scoreThreshold:u,softNmsSigma:c}=s;(0,a.H)(r,"NonMaxSuppressionWithScore");const h=n.data.get(r.dataId).values,p=n.data.get(i.dataId).values,d=o,f=l,m=u,g=c,{selectedIndices:y,selectedScores:b}=On(h,p,d,f,m,g);return[n.makeTensorInfo([y.length],"int32",new Int32Array(y)),n.makeTensorInfo([b.length],"float32",new Float32Array(b))]}};var zn=n(8584);const Ln={kernelName:s.OneHot,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{indices:i}=t,{depth:o,onValue:l,offValue:u}=r;(0,a.H)(i,"oneHot");const c=s.util.sizeFromShape(i.shape),h=new Float32Array(c*o);h.fill(u);const p=n.data.get(i.dataId).values;for(let e=0;e<c;++e)p[e]>=0&&p[e]<o&&(h[e*o+p[e]]=l);return n.makeTensorInfo([...i.shape,o],"int32",h)}};function Bn(e){const{inputs:t,backend:n}=e,{x:s}=t;if("string"===s.dtype)throw new Error("zerosLike is not supported for string tensors");if("complex64"===s.dtype){const e=(0,ve.k)({inputs:{input:s},backend:n}),t=Bn({inputs:{x:e},backend:n}),a=be({inputs:{input:s},backend:n}),r=Bn({inputs:{x:a},backend:n}),i=(0,me.P)({inputs:{real:t,imag:r},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(r),i}return yt({backend:n,attrs:{shape:s.shape,value:0,dtype:s.dtype}})}const Pn={kernelName:s.ZerosLike,backendName:"cpu",kernelFunc:Bn},Vn={kernelName:s.OnesLike,backendName:"cpu",kernelFunc:function e(t){const{inputs:n,backend:s}=t,{x:a}=n;if("string"===a.dtype)throw new Error("onesLike is not supported for string tensors");if("complex64"===a.dtype){const t=(0,ve.k)({inputs:{input:a},backend:s}),n=e({inputs:{x:t},backend:s}),r=be({inputs:{input:a},backend:s}),i=Bn({inputs:{x:r},backend:s}),o=(0,me.P)({inputs:{real:n,imag:i},backend:s});return s.disposeIntermediateTensorInfo(t),s.disposeIntermediateTensorInfo(n),s.disposeIntermediateTensorInfo(r),s.disposeIntermediateTensorInfo(i),o}return yt({backend:s,attrs:{shape:a.shape,value:1,dtype:a.dtype}})}};function Wn(e){const{inputs:t,backend:n,attrs:a}=e,{axis:r}=a;if(1===t.length)return rt({inputs:{input:t[0]},backend:n,attrs:{dim:r}});const i=t[0].shape,o=t[0].dtype;t.forEach((e=>{s.util.assertShapesMatch(i,e.shape,"All tensors passed to stack must have matching shapes"),s.util.assert(o===e.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));const l=[],u=ke({inputs:t.map((e=>{const t=rt({inputs:{input:e},backend:n,attrs:{dim:r}});return l.push(t),t})),backend:n,attrs:{axis:r}});return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),u}const Un={kernelName:s.Pack,backendName:"cpu",kernelFunc:Wn},Gn={kernelName:s.PadV2,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:i}=t,{paddings:o,constantValue:l}=r;(0,a.H)(i,"pad");const u=o.map(((e,t)=>e[0]+i.shape[t]+e[1])),c=o.map((e=>e[0])),h=n.data.get(i.dataId).values,p=s.util.sizeFromShape(i.shape),d=i.shape.length,f=s.util.computeStrides(i.shape),m=s.util.sizeFromShape(u),g=u.length,y=s.util.computeStrides(u),b=s.util.getTypedArrayFromDType(i.dtype,m);0!==l&&b.fill(l);for(let e=0;e<p;e++){const t=s.util.indexToLoc(e,d,f).map(((e,t)=>e+c[t]));b[s.util.locToIndex(t,g,y)]=h[e]}return{dataId:n.write(b,u,i.dtype),shape:u,dtype:i.dtype}}},Hn=(0,m.b)(((e,t)=>Math.pow(e,t))),jn=(0,X.j)(s.Pow,Hn),Xn={kernelName:s.Pow,backendName:"cpu",kernelFunc:jn};var qn=n(9560),Kn=n(9230);const Yn={kernelName:s.Range,backendName:"cpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:s,stop:a,dtype:r,step:i}=n,o=(0,Kn.b)(s,a,i,r);return t.makeTensorInfo([o.length],r,o)}},Qn=(0,u.A)(s.Reciprocal,(e=>1/e)),Jn={kernelName:s.Reciprocal,backendName:"cpu",kernelFunc:Qn},Zn={kernelName:s.ResizeBilinear,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:i}=t,{alignCorners:o,halfPixelCenters:l,size:u}=r;(0,a.H)(i,"resizeBilinear");const c=s.util.computeStrides(i.shape),[h,p]=u,[d,f,m,g]=i.shape,y=n.data.get(i.dataId).values,b=new Float32Array(s.util.sizeFromShape([d,h,p,g])),x=[o&&h>1?f-1:f,o&&p>1?m-1:m],v=[o&&h>1?h-1:h,o&&p>1?p-1:p];let k=0;const w=x[0]/v[0],N=x[1]/v[1];for(let e=0;e<d;e++)for(let t=0;t<h;t++){let n;n=l?w*(t+.5)-.5:w*t;const s=Math.max(0,Math.floor(n)),a=n-s,r=Math.min(f-1,Math.ceil(n)),i=e*c[0]+s*c[1],o=e*c[0]+r*c[1];for(let e=0;e<p;e++){let t;t=l?N*(e+.5)-.5:N*e;const n=Math.max(0,Math.floor(t)),s=t-n,r=Math.min(m-1,Math.ceil(t)),u=i+n*c[2],h=o+n*c[2],p=i+r*c[2],d=o+r*c[2];for(let e=0;e<g;e++){const t=y[u+e],n=y[h+e],r=t+(y[p+e]-t)*s,i=r+(n+(y[d+e]-n)*s-r)*a;b[k++]=i}}}return n.makeTensorInfo([d,h,p,g],"float32",b)}},es={kernelName:s.ResizeBilinearGrad,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:i,dy:o}=t,{alignCorners:l}=r;(0,a.H)([o,i],"resizeBilinearGrad");const u=s.util.computeStrides(i.shape),[c,h,p,d]=i.shape,[,f,m]=o.shape,g=new Float32Array(c*h*p*d),y=[l&&f>1?h-1:h,l&&m>1?p-1:p],b=[l&&f>1?f-1:f,l&&m>1?m-1:m],x=y[0]/b[0],v=y[1]/b[1],k=n.data.get(o.dataId).values;let w=0;for(let e=0;e<c;e++){const t=e*u[0];for(let e=0;e<f;e++){const n=e*x,s=Math.floor(n),a=Math.min(Math.ceil(n),h-1),r=t+s*u[1],i=t+a*u[1],o=n-s,l=1-o;for(let e=0;e<m;e++){const t=e*v,n=Math.floor(t),s=Math.min(Math.ceil(t),p-1),a=t-n,c=1-a,h=r+n*u[2],f=r+s*u[2],m=i+n*u[2],y=i+s*u[2],b=l*c,x=l*a,N=o*c,I=o*a;for(let e=0;e<d;e++){const t=k[w++];g[h+e]+=t*b,g[f+e]+=t*x,g[m+e]+=t*N,g[y+e]+=t*I}}}}return n.makeTensorInfo([c,p,h,d],"float32",g)}},ts={kernelName:s.ResizeNearestNeighbor,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:i}=t,{alignCorners:o,halfPixelCenters:l,size:u}=r;(0,a.H)(i,"resizeNearestNeighbor");const c=s.util.computeStrides(i.shape),[h,p]=u,[d,f,m,g]=i.shape,y=n.data.get(i.dataId).values,b=new Float32Array(d*h*p*g),x=[o&&h>1?f-1:f,o&&p>1?m-1:m],v=[o&&h>1?h-1:h,o&&p>1?p-1:p],k=x[0]/v[0],w=x[1]/v[1];let N=0;for(let e=0;e<d;e++){const t=e*c[0];for(let e=0;e<h;e++){const n=l?k*(e+.5):k*e;let s=Math.min(f-1,o?Math.round(n):Math.floor(n));l&&(s=Math.max(0,s));const a=t+s*c[1];for(let e=0;e<p;e++){const t=l?w*(e+.5):w*e;let n=Math.min(m-1,o?Math.round(t):Math.floor(t));l&&(n=Math.max(0,n));const s=a+n*c[2];for(let e=0;e<g;e++){const t=y[s+e];b[N++]=t}}}}return n.makeTensorInfo([d,h,p,g],i.dtype,b)}},ns={kernelName:s.ResizeNearestNeighborGrad,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:i,dy:o}=t,{alignCorners:l}=r;(0,a.H)([o,i],"resizeNearestNeighborGrad");const u=s.util.computeStrides(i.shape),c=s.util.computeStrides(o.shape),[h,p,d,f]=i.shape,[,m,g]=o.shape,y=new Float32Array(h*p*d*f),b=n.data.get(o.dataId).values,x=[l&&m>1?p-1:p,l&&g>1?d-1:d],v=[l&&m>1?m-1:m,l&&g>1?g-1:g],k=x[0]/v[0],w=x[1]/v[1],N=1/k,I=1/w,S=2*Math.ceil(N)+2,T=2*Math.ceil(I)+2;for(let e=0;e<h;e++){const t=e*u[0];for(let e=0;e<p;e++){const n=t+e*u[1],s=Math.floor(e*N),a=Math.floor(s-S/2);for(let s=0;s<d;s++){const r=n+s*u[2],i=Math.floor(s*I),o=Math.floor(i-T/2);for(let n=0;n<f;n++){let i=0;for(let r=0;r<S;r++){const u=r+a;if(u<0||u>=m)continue;const h=t+u*c[1],f=u*k;if(e===Math.min(p-1,l?Math.round(f):Math.floor(f)))for(let e=0;e<T;e++){const t=e+o;if(t<0||t>=g)continue;const a=h+t*c[2],r=t*w;s===Math.min(d-1,l?Math.round(r):Math.floor(r))&&(i+=b[a+n])}}y[r+n]=i}}}}return n.makeTensorInfo(i.shape,i.dtype,y)}},ss={kernelName:s.Reverse,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:i}=t,{dims:o}=r;(0,a.H)(i,"reverse");const l=i.shape.length,u=s.util.parseAxisParam(o,i.shape);if(0===l)return(0,p.y)({inputs:{x:i},backend:n});const c=new s.TensorBuffer(i.shape,i.dtype),h=n.bufferSync(i);for(let e=0;e<c.size;e++){const t=c.indexToLoc(e),n=t.slice();u.forEach((e=>n[e]=i.shape[e]-1-n[e])),c.set(h.get(...n),...t)}return n.makeTensorInfo(c.shape,c.dtype,c.values)}},as={kernelName:s.RotateWithOffset,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:a}=e,{radians:r,fillValue:i,center:o}=t,l=n,u=s.util.getTypedArrayFromDType(a.dtype,s.util.sizeFromShape(a.shape)),[c,h,p,d]=a.shape,[f,m]=s.backend_util.getImageCenter(o,h,p),g=Math.sin(r),y=Math.cos(r),b=l.data.get(a.dataId).values;for(let e=0;e<c;e++){const t=e*p*h*d;for(let e=0;e<h;e++){const n=e*(p*d);for(let s=0;s<p;s++){const a=s*d;for(let r=0;r<d;r++){const o=[c,e,s,r],l=o[2],x=o[1];let v=(l-f)*y-(x-m)*g,k=(l-f)*g+(x-m)*y;v=Math.round(v+f),k=Math.round(k+m);let w=i;"number"!=typeof i&&(w=3===r?255:i[r]),v>=0&&v<p&&k>=0&&k<h&&(w=b[t+k*(p*d)+v*d+r]),u[t+n+a+r]=w}}}}return{dataId:l.write(u,a.shape,a.dtype),shape:a.shape,dtype:a.dtype}}},rs=(0,u.A)(s.Round,(e=>{const t=Math.floor(e);return e-t<.5?Math.floor(e):e-t>.5?Math.ceil(e):t%2==0?t:t+1})),is={kernelName:s.Round,backendName:"cpu",kernelFunc:rs};var os=n(7742);function ls(e,t,n,a,r,i,o,l,u,c){const h=[a/r,r],p=e.values,d=t.values;if(0===a)return(0,s.buffer)(n,t.dtype);const f=(0,s.buffer)(h,t.dtype);f.values.fill(u);for(let e=0;e<i;e++){const s=[];let i=0;for(let t=0;t<o;t++){const n=p[e*o+t];s.push(n),i+=n*l[t]}if(i<0||i>=a/r)throw new Error(`Invalid indices: ${s} does not index into ${n}`);for(let n=0;n<r;n++)c?f.values[i*r+n]+=d[e*r+n]:f.values[i*r+n]=0===t.rank?d[0]:d[e*r+n]}return f}const us={kernelName:s.ScatterNd,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{indices:r,updates:i}=t,{shape:o}=a,{sliceRank:l,numUpdates:u,sliceSize:c,strides:h,outputSize:p}=s.backend_util.calculateShapes(i,r,o),d=ls(n.bufferSync(r),n.bufferSync(i),o,p,c,u,l,h,0,!0);return n.makeTensorInfo(o,d.dtype,d.values)}},cs={kernelName:s.Select,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{condition:r,t:i,e:o}=t;(0,a.H)([r,i,o],"select");const l=r.shape.length,u=n.data.get(r.dataId).values,c=n.data.get(i.dataId).values,h=n.data.get(o.dataId).values,p=(0,s.upcastType)(i.dtype,o.dtype),d=s.util.makeZerosTypedArray(s.util.sizeFromShape(i.shape),p);let f=0;const m=0===l||l>1||1===i.shape.length?1:s.util.sizeFromShape(i.shape.slice(1));for(let e=0;e<u.length;e++)for(let t=0;t<m;t++)1===u[e]?d[f++]=c[e]:d[f++]=h[e];return n.makeTensorInfo(i.shape,p,d)}},hs=s.backend_util.SELU_SCALEALPHA,ps=s.backend_util.SELU_SCALE,ds=(0,u.A)(s.Selu,(e=>e>=0?ps*e:hs*(Math.exp(e)-1))),fs={kernelName:s.Selu,backendName:"cpu",kernelFunc:ds},ms=(0,u.A)(s.Sigmoid,(e=>1/(1+Math.exp(-e)))),gs={kernelName:s.Sigmoid,backendName:"cpu",kernelFunc:ms},ys=(0,u.A)(s.Sign,(e=>e<0?-1:e>0?1:0)),bs={kernelName:s.Sign,backendName:"cpu",kernelFunc:ys},xs=(0,u.A)(s.Sin,(e=>Math.sin(e))),vs={kernelName:s.Sin,backendName:"cpu",kernelFunc:xs},ks=(0,u.A)(s.Sinh,(e=>Math.sinh(e))),ws={kernelName:s.Sinh,backendName:"cpu",kernelFunc:ks},Ns=Math.log(1.1920928955078125e-7)+2,Is=(0,u.A)(s.Softplus,(e=>{const t=e>-Ns,n=e<Ns,s=Math.exp(e);let a;return a=n?s:t?e:Math.log(1+s),a})),Ss={kernelName:s.Softplus,backendName:"cpu",kernelFunc:Is},Ts={kernelName:s.SpaceToBatchND,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:i}=t,{blockShape:o,paddings:l}=r;(0,a.H)([i],"spaceToBatchND");const u=s.util.sizeFromShape(o),c=[[0,0]];c.push(...l);for(let e=1+o.length;e<i.shape.length;++e)c.push([0,0]);const h=Gn.kernelFunc({inputs:{x:i},backend:n,attrs:{paddings:c,constantValue:0}}),p=s.backend_util.getReshaped(h.shape,o,u,!1),d=s.backend_util.getPermuted(p.length,o.length,!1),f=s.backend_util.getReshapedPermuted(h.shape,o,u,!1),m=S({inputs:{x:h},backend:n,attrs:{shape:p}}),g={x:m},y={perm:d},b=(0,M.p)({inputs:g,backend:n,attrs:y}),x=S({inputs:{x:b},backend:n,attrs:{shape:f}});return n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(b),x}},Cs={kernelName:s.SparseToDense,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{sparseIndices:r,sparseValues:i,defaultValue:o}=t,{outputShape:l}=a,{sliceRank:u,numUpdates:c,sliceSize:h,strides:p,outputSize:d}=s.backend_util.calculateShapes(i,r,l),f=ls(n.bufferSync(r),n.bufferSync(i),l,d,h,c,u,p,n.data.get(o.dataId).values[0],!1);return n.makeTensorInfo(l,f.dtype,f.values)}},$s={kernelName:s.SplitV,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{numOrSizeSplits:i,axis:o}=a,l=s.util.parseAxisParam(o,r.shape)[0],u=s.backend_util.prepareSplitSize(r,i,l),c=new Array(r.shape.length).fill(0),h=r.shape.slice();return u.map((e=>{const t=[...h];t[l]=e;const s=(0,oe.tP)({inputs:{x:r},backend:n,attrs:{begin:c,size:t}});return c[l]+=e,s}))}},As=(0,u.A)(s.Sqrt,(e=>Math.sqrt(e))),Es={kernelName:s.Sqrt,backendName:"cpu",kernelFunc:As},_s={kernelName:s.Square,backendName:"cpu",kernelFunc:({inputs:e,backend:t})=>{const{x:n}=e,s=t;(0,a.H)(n,"square");const r=s.data.get(n.dataId).values,i=new Float32Array(r.length);for(let e=0;e<r.length;++e){const t=r[e];i[e]=t*t}return{dataId:s.write(i,n.shape,n.dtype),shape:n.shape,dtype:n.dtype}}};var Rs=n(212);const Fs=(0,u.A)(s.Step,((e,t)=>{const n=t;return isNaN(e)?NaN:e>0?1:n.alpha})),Ds={kernelName:s.Step,backendName:"cpu",kernelFunc:Fs};var Os=n(2210);const Ms={kernelName:s.StridedSlice,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:i}=t,{begin:o,end:l,strides:u,beginMask:c,endMask:h,ellipsisMask:p,newAxisMask:d,shrinkAxisMask:f}=r;(0,a.H)(i,"stridedSlice");const{nonStrided:m,$begin:g,$strides:y,size:b,newShape:x,outShape:v}=s.slice_util.sliceInfo(i.shape,o,l,u,c,h,p,d,f),k=S({inputs:{x:i},backend:n,attrs:{shape:x}});let w;if(m){const e=(0,oe.tP)({inputs:{x:k},backend:n,attrs:{begin:g,size:b}});w=S({inputs:{x:e},backend:n,attrs:{shape:v}}),n.disposeIntermediateTensorInfo(e)}else if(v.some((e=>0===e)))w=n.makeTensorInfo(v,i.dtype,[]);else{const e=n.bufferSync(k),t=(0,Os.t)(v,e,y,g);w=n.makeTensorInfo(t.shape,t.dtype,t.values)}const N=S({inputs:{x:w},backend:n,attrs:{shape:v}});return n.disposeIntermediateTensorInfo(k),n.disposeIntermediateTensorInfo(w),N}},zs=(0,u.A)(s.Tan,(e=>Math.tan(e))),Ls={kernelName:s.Tan,backendName:"cpu",kernelFunc:zs},Bs=(0,u.A)(s.Tanh,(e=>Math.tanh(e))),Ps={kernelName:s.Tanh,backendName:"cpu",kernelFunc:Bs};var Vs=n(7723);const Ws={kernelName:s.Tile,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{reps:i}=s;(0,a.H)(r,"tile");const o=(0,Vs.R)(n.bufferSync(r),i);return n.makeTensorInfo(o.shape,o.dtype,o.values)}};var Us=n(9556);const Gs={kernelName:s.TopK,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{k:i,sorted:o}=s;(0,a.H)(r,"topk");const l=n.data.get(r.dataId).values,[u,c]=(0,Us.W)(l,r.shape,r.dtype,i,o);return[n.makeTensorInfo(u.shape,u.dtype,u.values),n.makeTensorInfo(c.shape,c.dtype,c.values)]}},Hs={kernelName:s.Transform,backendName:"cpu",kernelFunc:function(e){const{inputs:t,attrs:n,backend:a}=e,{image:r,transforms:i}=t,{interpolation:o,fillMode:l,fillValue:u,outputShape:c}=n,[h,p,d,f]=r.shape,[m,g]=null!=c?c:[p,d],y=[h,m,g,f],b=s.util.computeStrides(r.shape),x=b[0],v=b[1],k=b[2],w=s.util.getTypedArrayFromDType(r.dtype,s.util.sizeFromShape(y));w.fill(u);const N=a.data.get(r.dataId).values,I=a.data.get(i.dataId).values;for(let e=0;e<h;++e){const t=1===i.shape[0]?I:I.subarray(8*e,8*e+8);for(let n=0;n<m;++n)for(let s=0;s<g;++s)for(let a=0;a<f;++a){let r;const i=t[6]*s+t[7]*n+1;if(0===i)continue;const c=(t[0]*s+t[1]*n+t[2])/i,h=(t[3]*s+t[4]*n+t[5])/i,f=js(c,d,l),m=js(h,p,l);switch(o){case"nearest":r=qs(N,p,d,x,v,k,e,m,f,a,u);break;case"bilinear":r=Ks(N,p,d,x,v,k,e,m,f,a,u);break;default:throw new Error(`Error in Transform: Expect 'nearest' or 'bilinear', but got ${o}`)}w[e*x+n*v+s*k+a]=r}return a.makeTensorInfo(y,r.dtype,w)}return{dataId:a.write(w,y,r.dtype),shape:r.shape,dtype:r.dtype}}};function js(e,t,n){switch(n){case"reflect":return function(e,t){let n=e;if(n<0)if(t<=1)n=0;else{const e=2*t;n<e&&(n=e*Math.trunc(-n/e)+n),n=n<-t?n+e:-n-1}else if(n>t-1)if(t<=1)n=0;else{const e=2*t;n-=e*Math.trunc(n/e),n>=t&&(n=e-n-1)}return s.util.clamp(0,n,t-1)}(e,t);case"wrap":return function(e,t){let n=e;if(n<0)if(t<=1)n=0;else{const e=t-1;n+=t*(Math.trunc(-n/e)+1)}else if(n>t-1)if(t<=1)n=0;else{const e=t-1;n-=t*Math.trunc(n/e)}return s.util.clamp(0,n,t-1)}(e,t);case"nearest":return function(e,t){return s.util.clamp(0,e,t-1)}(e,t);case"constant":default:return function(e,t){return e}(e)}}function Xs(e,t,n,s,a,r,i,o,l,u,c){return 0<=o&&o<t&&0<=l&&l<n?e[i*s+o*a+l*r+u]:c}function qs(e,t,n,s,a,r,i,o,l,u,c){return Xs(e,t,n,s,a,r,i,Math.round(o),Math.round(l),u,c)}function Ks(e,t,n,s,a,r,i,o,l,u,c){const h=Math.floor(o),p=Math.floor(l),d=h+1,f=p+1;return(d-o)*((f-l)*Xs(e,t,n,s,a,r,i,h,p,u,c)+(l-p)*Xs(e,t,n,s,a,r,i,h,f,u,c))+(o-h)*((f-l)*Xs(e,t,n,s,a,r,i,d,p,u,c)+(l-p)*Xs(e,t,n,s,a,r,i,d,f,u,c))}var Ys=n(5638);const Qs={kernelName:s.Unique,backendName:"cpu",kernelFunc:function(e){const{inputs:t,attrs:n,backend:s}=e,{axis:r}=n,{x:i}=t;(0,a.H)(i,"unique");const o=s.data.get(i.dataId).values,{outputValues:l,outputShape:u,indices:c}=(0,Ys.S)(o,r,i.shape,i.dtype);return[s.makeTensorInfo(u,i.dtype,l),s.makeTensorInfo([c.length],"int32",c)]}},Js={kernelName:s.Unpack,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{value:a}=t;let{axis:r}=s;r<0&&(r+=a.shape.length);const i=a.shape.length,o=a.shape[r],l=new Array(i-1);let u=0;for(let e=0;e<i;e++)e!==r&&(l[u++]=a.shape[e]);const c=new Array(i).fill(0),h=a.shape.slice();h[r]=1;const p=new Array(o);for(let e=0;e<p.length;e++){c[r]=e;const t=(0,oe.tP)({inputs:{x:a},backend:n,attrs:{begin:c,size:h}});p[e]=S({inputs:{x:t},backend:n,attrs:{shape:l}}),n.disposeIntermediateTensorInfo(t)}return p}},Zs={kernelName:s.UnsortedSegmentSum,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:i,segmentIds:o}=t,{numSegments:l}=r;(0,a.H)(i,"unsortedSegmentSum");const u=[],c=[],h=i.shape.length-o.shape.length;let p=o;for(let e=0;e<h;++e){const t=rt({inputs:{input:p},backend:n,attrs:{dim:e+1}});p=t,c.push(t)}for(let e=0;e<l;++e){const t=s.util.createScalarValue(e,"int32"),a=n.makeTensorInfo([],"int32",t),r=qe({inputs:{a,b:p},backend:n}),o=(0,he.p)({inputs:{x:r},backend:n,attrs:{dtype:"float32"}}),l=(0,lt.Jp)({inputs:{a:o,b:i},backend:n}),h=yn({inputs:{x:l},backend:n,attrs:{axis:0,keepDims:!1}});u.push(h),c.push(a),c.push(r),c.push(o),c.push(l),c.push(h)}const d=Wn({inputs:u,backend:n,attrs:{axis:0}});return c.forEach((e=>n.disposeIntermediateTensorInfo(e))),d}},ea=[A,E.fC,R,D,I.j4,O,z,L,B,P,W,G,j,Y,J,ne,se,ae,re,$,ie,le,ce,he.M,pe.y2,fe,me.z,ge,we,Se,Te,Ie,$e,Ae,Ce,_e,Fe,De,Oe,Me,ze,Be,Pe,Ve,We,Ue,He,Ge,ht,h,je,Ke,st,at.SX,it,ot.Vu,gt,bt,xt,vt.Ao,Nt,It,St,Tt,$t,At.Ce,Rt,p.I,Ft,xe,Ot,zt,Bt,f,Pt.zh,Ut,Ht,jt.xM,qt,Qt,Zt,nn,sn,an,cn.eJ,hn,pn,dn,fn,mn,un,xn,vn,kn.u0,wn,Sn,An,lt.f$,En.AF,Rn,Dn,Mn,zn.nP,Ln,Vn,Un,Gn,Xn,b,qn.Iz,Yn,ve.O,Jn,v,w,T,Zn,es,ts,ns,ss,as,is,os.FY,us,cs,fs,gs,bs,vs,ws,oe.C6,$n,Ss,Ts,Cs,$s,Es,_s,Rs.MS,Ds,Ms,pt.GR,bn,Ls,Ps,Ws,Gs,M.b,Hs,Qs,Js,Zs,Pn];for(const e of ea)(0,s.registerKernel)(e)},224:(e,t,n)=>{"use strict";n.d(t,{bk:()=>r,fC:()=>i});var s=n(5998),a=n(8166);function r(e){const t=new Float32Array(e.length);for(let n=0;n<e.length;++n)t[n]=Math.abs(e[n]);return t}const i={kernelName:s.Abs,backendName:"cpu",kernelFunc:e=>{const{x:t}=e.inputs,n=e.backend;(0,a.H)(t,"abs");let i=new Float32Array(s.util.sizeFromShape(t.shape));return i=r(n.data.get(t.dataId).values),n.makeOutput(i,t.shape,"float32")}}},2779:(e,t,n)=>{"use strict";n.d(t,{EH:()=>i,IH:()=>l,j4:()=>u});var s=n(5998),a=n(3533),r=n(6205);const i=(0,a.b)(((e,t)=>e+t)),o=(0,r.H)(((e,t,n,s)=>({real:e+n,imag:t+s}))),l=(0,r.j)(s.Add,i,o),u={kernelName:s.Add,backendName:"cpu",kernelFunc:l}},8607:(e,t,n)=>{"use strict";n.d(t,{W:()=>a,i:()=>r});var s=n(5998);function a(e,t,n,a,r){const i=s.util.sizeFromShape(a),o=s.util.makeZerosTypedArray(r,n);for(let n=0;n<e.length;n++){const s=e[n];if(s<0)throw new Error("Input x must be non-negative!");s>=r||(o[s]+=i>0?t[n]:1)}return o}function r(e,t,n,a=!1){const r=e.shape[0],i=e.shape[1],o=(0,s.buffer)([r,n],t.dtype);for(let s=0;s<r;s++)for(let r=0;r<i;r++){const i=e.get(s,r);if(i<0)throw new Error("Input x must be non-negative!");i>=n||(a?o.set(1,s,i):t.size>0?o.set(o.get(s,i)+t.get(s,r),s,i):o.set(o.get(s,i)+1,s,i))}return o}},9258:(e,t,n)=>{"use strict";n.d(t,{p:()=>u,M:()=>c});var s=n(5998),a=n(3533),r=n(4391),i=n(6961),o=n(1775),l=n(2186);function u(e){const{inputs:t,backend:n,attrs:c}=e,{x:h}=t,{dtype:p}=c;if("complex64"===p){if("complex64"===h.dtype)return(0,o.y)({inputs:{x:h},backend:n});const e=(0,r.l)(n,h.shape,h.dtype),t=u({inputs:{x:h},backend:n,attrs:{dtype:"float32"}}),s=(0,i.P)({inputs:{real:t,imag:e},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),s}if("complex64"===h.dtype){const e=(0,l.k)({inputs:{input:h},backend:n}),t=u({inputs:{x:e},backend:n,attrs:{dtype:p}});return n.disposeIntermediateTensorInfo(e),t}if(!s.util.hasEncodingLoss(h.dtype,p)){const e=(0,o.y)({inputs:{x:h},backend:n});return{dataId:e.dataId,shape:e.shape,dtype:p}}if("int32"===p){const e=n.data.get(h.dataId).values,t=Int32Array.from(e);return n.makeTensorInfo(h.shape,"int32",t)}if("bool"===p){const e=n.data.get(h.dataId).values,t=s.util.toTypedArray([0],h.dtype),[r,i]=(0,a.b)(((e,t)=>e!==t?1:0))(h.shape,[],e,t,"bool");return n.makeTensorInfo(i,"bool",r)}throw new Error(`Error in Cast: failed to cast ${h.dtype} to ${p}`)}const c={kernelName:s.Cast,backendName:"cpu",kernelFunc:u}},4769:(e,t,n)=>{"use strict";n.d(t,{__:()=>i,y2:()=>l});var s=n(5998),a=n(8029),r=n(6738);const i=(0,a.a)((e=>Math.ceil(e))),o=(0,r.O)(s.Ceil,i),l={kernelName:s.Ceil,backendName:"cpu",kernelFunc:o}},6961:(e,t,n)=>{"use strict";function s(e){const{inputs:t,backend:n}=e,{real:s,imag:a}=t,r=n.data.get(s.dataId).values,i=n.data.get(a.dataId).values,o=n.makeTensorInfo(s.shape,"complex64");return n.data.get(o.dataId).complexTensorInfos={real:n.makeTensorInfo(s.shape,"float32",r),imag:n.makeTensorInfo(a.shape,"float32",i)},o}n.d(t,{P:()=>s,z:()=>a});const a={kernelName:n(5998).Complex,backendName:"cpu",kernelFunc:s}},8926:(e,t,n)=>{"use strict";n.d(t,{j:()=>a});var s=n(5998);function a(e,t,n,a){const r=s.util.getArrayFromDType(n,s.util.sizeFromShape(t));if(a&&"string"!==n){let t=0;e.forEach((e=>{const n=s.util.sizeFromShape(e.shape);r.set(e.vals,t),t+=n}))}else{let a=0;e.forEach((e=>{const i="string"===n?s.backend_util.fromUint8ToStringArray(e.vals):e.vals;let o=0;for(let n=0;n<e.shape[0];++n){const s=n*t[1]+a;for(let t=0;t<e.shape[1];++t)r[s+t]=i[o++]}a+=e.shape[1]}))}return r}},1211:(e,t,n)=>{"use strict";n.d(t,{Ro:()=>i,Qq:()=>o,SX:()=>l});var s=n(5998),a=n(8029),r=n(6738);const i=(0,a.a)((e=>Math.exp(e))),o=(0,r.O)(s.Exp,i),l={kernelName:s.Exp,backendName:"cpu",kernelFunc:o}},969:(e,t,n)=>{"use strict";n.d(t,{OF:()=>i,Vu:()=>l});var s=n(5998),a=n(8029),r=n(6738);const i=(0,a.a)((e=>Math.expm1(e))),o=(0,r.O)(s.Expm1,i),l={kernelName:s.Expm1,backendName:"cpu",kernelFunc:o}},6574:(e,t,n)=>{"use strict";n.d(t,{r6:()=>i,Ao:()=>l});var s=n(5998),a=n(8029),r=n(6738);const i=(0,a.a)((e=>Math.floor(e))),o=(0,r.O)(s.Floor,i),l={kernelName:s.Floor,backendName:"cpu",kernelFunc:o}},4468:(e,t,n)=>{"use strict";n.d(t,{i:()=>a});var s=n(5998);function a(e,t,n){const a=(0,s.buffer)(n,e.dtype);for(let n=0;n<a.size;++n){const s=a.indexToLoc(n).slice(),r=s[0],i=s[2],o=t.locToIndex([r,i]);s[2]=t.values[o];const l=e.locToIndex(s);a.values[n]=e.values[l]}return a}},6272:(e,t,n)=>{"use strict";n.d(t,{o:()=>i,Ce:()=>l});var s=n(5998),a=n(3533),r=n(6205);const i=(0,a.b)(((e,t)=>e>t?1:0)),o=(0,r.j)(s.Greater,i,null,"bool"),l={kernelName:s.Greater,backendName:"cpu",kernelFunc:o}},1775:(e,t,n)=>{"use strict";function s(e){const{inputs:t,backend:n}=e,{x:s}=t;return n.incRef(s.dataId),{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}n.d(t,{y:()=>s,I:()=>a});const a={kernelName:n(5998).Identity,backendName:"cpu",kernelFunc:s}},8405:(e,t,n)=>{"use strict";n.d(t,{rO:()=>i,zh:()=>l});var s=n(5998),a=n(3533),r=n(6205);const i=(0,a.b)(((e,t)=>e<t?1:0)),o=(0,r.j)(s.Less,i,null,"bool"),l={kernelName:s.Less,backendName:"cpu",kernelFunc:o}},1325:(e,t,n)=>{"use strict";n.d(t,{b:()=>a});var s=n(5998);function a(e,t,n){const a=(t-e)/(n-1),r=s.util.makeZerosTypedArray(n,"float32");r[0]=e;for(let e=1;e<r.length;e++)r[e]=r[e-1]+a;return r}},5223:(e,t,n)=>{"use strict";n.d(t,{vX:()=>i,xM:()=>l});var s=n(5998),a=n(8029),r=n(6738);const i=(0,a.a)((e=>Math.log(e))),o=(0,r.O)(s.Log,i),l={kernelName:s.Log,backendName:"cpu",kernelFunc:o}},5126:(e,t,n)=>{"use strict";n.d(t,{B:()=>a});var s=n(5998);function a(e,t,n,a){const r=s.util.getTypedArrayFromDType(a,s.util.sizeFromShape(n));for(let n=0;n<r.length;++n){const s=n*t;let a=e[s];for(let n=0;n<t;++n){const t=e[s+n];t>a&&(a=t)}r[n]=a}return r}},1717:(e,t,n)=>{"use strict";n.d(t,{wS:()=>i,eJ:()=>l});var s=n(5998),a=n(3533),r=n(6205);const i=(0,a.b)(((e,t)=>Math.max(e,t))),o=(0,r.j)(s.Maximum,i),l={kernelName:s.Maximum,backendName:"cpu",kernelFunc:o}},612:(e,t,n)=>{"use strict";n.d(t,{vP:()=>i,u0:()=>l});var s=n(5998),a=n(3533),r=n(6205);const i=(0,a.b)(((e,t)=>Math.min(e,t))),o=(0,r.j)(s.Minimum,i),l={kernelName:s.Minimum,backendName:"cpu",kernelFunc:o}},1917:(e,t,n)=>{"use strict";n.d(t,{$3:()=>i,Jp:()=>l,f$:()=>u});var s=n(5998),a=n(3533),r=n(6205);const i=(0,a.b)(((e,t)=>e*t)),o=(0,r.H)(((e,t,n,s)=>({real:e*n-t*s,imag:e*s+t*n}))),l=(0,r.j)(s.Multiply,i,o),u={kernelName:s.Multiply,backendName:"cpu",kernelFunc:l}},854:(e,t,n)=>{"use strict";n.d(t,{uC:()=>i,AF:()=>o});var s=n(5998),a=n(8166),r=n(1917);function i(e,t,n){const a=s.util.createScalarValue(-1,n);return(0,r.$3)([],t,a,e,n)}const o={kernelName:s.Neg,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t;(0,a.H)(s,"neg");const r=n.data.get(s.dataId).values,[o,l]=i(r,s.shape,s.dtype);return n.makeTensorInfo(l,s.dtype,o)}}},8584:(e,t,n)=>{"use strict";n.d(t,{Gj:()=>i,nP:()=>l});var s=n(5998),a=n(3533),r=n(6205);const i=(0,a.b)(((e,t)=>e!==t?1:0)),o=(0,r.j)(s.NotEqual,i,null,"bool"),l={kernelName:s.NotEqual,backendName:"cpu",kernelFunc:o}},9560:(e,t,n)=>{"use strict";n.d(t,{Qg:()=>i,Iz:()=>o});var s=n(5998),a=n(8166),r=n(4802);function i(e,t,n,a){const[r,i]=s.backend_util.computeOutAndReduceShapes(e,a),o=(0,s.upcastType)(t,"int32"),l=s.util.makeZerosTypedArray(s.util.sizeFromShape(r),o),u=s.util.sizeFromShape(i);for(let e=0;e<l.length;++e){const t=e*u;let s=1;for(let e=0;e<u;++e)s*=n[t+e];l[e]=s}return{outVals:l,outShape:r,outDtype:o}}const o={kernelName:s.Prod,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:o}=e,{x:l}=t,{axis:u,keepDims:c}=o;(0,a.H)(l,"prod");const h=l.shape.length,p=s.util.parseAxisParam(u,l.shape),d=s.backend_util.getAxesPermutation(p,h);let f=p,m=l;const g=[];null!=d&&(m=(0,r.p)({inputs:{x:l},backend:n,attrs:{perm:d}}),g.push(m),f=s.backend_util.getInnerMostAxes(f.length,h));const y=n.data.get(m.dataId).values,{outVals:b,outShape:x,outDtype:v}=i(m.shape,m.dtype,y,f);let k=x;return c&&(k=s.backend_util.expandShapeToKeepDim(x,p)),g.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(k,v,b)}}},9230:(e,t,n)=>{"use strict";n.d(t,{b:()=>a});var s=n(5998);function a(e,t,n,a){if(e===t||e<t&&n<0||t<e&&n>1)return s.util.makeZerosTypedArray(0,a);const r=Math.abs(Math.ceil((t-e)/n)),i=s.util.makeZerosTypedArray(r,a);t<e&&1===n&&(n=-1),i[0]=e;for(let e=1;e<i.length;e++)i[e]=i[e-1]+n;return i}},2186:(e,t,n)=>{"use strict";function s(e){const{inputs:t,backend:n}=e,{input:s}=t,a=n.data.get(s.dataId).complexTensorInfos.real,r=n.data.get(a.dataId).values;return n.makeTensorInfo(a.shape,a.dtype,r)}n.d(t,{k:()=>s,O:()=>a});const a={kernelName:n(5998).Real,backendName:"cpu",kernelFunc:s}},7742:(e,t,n)=>{"use strict";n.d(t,{zd:()=>i,FY:()=>l});var s=n(5998),a=n(8029),r=n(6738);const i=(0,a.a)((e=>1/Math.sqrt(e))),o=(0,r.O)(s.Rsqrt,i),l={kernelName:s.Rsqrt,backendName:"cpu",kernelFunc:o}},2578:(e,t,n)=>{"use strict";n.d(t,{rT:()=>r,tP:()=>i,C6:()=>o});var s=n(5998),a=n(8166);function r(e,t,n,a,r){const i=s.slice_util.isSliceContinous(a,t,n),o=s.util.sizeFromShape(n),l=s.util.computeStrides(a);if(i){const n=s.slice_util.computeFlatOffset(t,l);return"string"===r?e.slice(n,n+o):e.subarray(n,n+o)}const u="string"===r?s.backend_util.fromUint8ToStringArray(e):e,c=(0,s.buffer)(a,r,u),h=(0,s.buffer)(n,r);for(let e=0;e<h.size;++e){const n=h.indexToLoc(e),s=n.map(((e,n)=>e+t[n]));h.set(c.get(...s),...n)}return"string"===r?s.backend_util.fromStringArrayToUint8(h.values):h.values}function i(e){const{inputs:t,backend:n,attrs:i}=e,{x:o}=t,{begin:l,size:u}=i;(0,a.H)(o,"slice");const[c,h]=s.slice_util.parseSliceParams(o,l,u);s.slice_util.assertParamsValid(o,c,h);const p=r(n.data.get(o.dataId).values,c,h,o.shape,o.dtype);return n.makeTensorInfo(h,o.dtype,p)}const o={kernelName:s.Slice,backendName:"cpu",kernelFunc:i}},212:(e,t,n)=>{"use strict";n.d(t,{Hz:()=>i,MS:()=>l});var s=n(5998),a=n(3533),r=n(6205);const i=(0,a.b)(((e,t)=>{const n=e-t;return n*n})),o=(0,r.j)(s.SquaredDifference,i),l={kernelName:s.SquaredDifference,backendName:"cpu",kernelFunc:o}},2210:(e,t,n)=>{"use strict";n.d(t,{t:()=>a});var s=n(5998);function a(e,t,n,a){const r=(0,s.buffer)(e,t.dtype);for(let e=0;e<r.size;e++){const s=r.indexToLoc(e),i=new Array(s.length);for(let e=0;e<i.length;e++)i[e]=s[e]*n[e]+a[e];r.set(t.get(...i),...s)}return r}},1649:(e,t,n)=>{"use strict";n.d(t,{VY:()=>i,lu:()=>l,GR:()=>u});var s=n(5998),a=n(3533),r=n(6205);const i=(0,a.b)(((e,t)=>e-t)),o=(0,r.H)(((e,t,n,s)=>({real:e-n,imag:t-s}))),l=(0,r.j)(s.Sub,i,o),u={kernelName:s.Sub,backendName:"cpu",kernelFunc:l}},7723:(e,t,n)=>{"use strict";n.d(t,{R:()=>a});var s=n(5998);function a(e,t){const n=new Array(e.rank);for(let s=0;s<n.length;s++)n[s]=e.shape[s]*t[s];const a=(0,s.buffer)(n,e.dtype);for(let t=0;t<a.values.length;++t){const n=a.indexToLoc(t),s=new Array(e.rank);for(let t=0;t<s.length;t++)s[t]=n[t]%e.shape[t];const r=e.locToIndex(s);a.values[t]=e.values[r]}return a}},9556:(e,t,n)=>{"use strict";n.d(t,{W:()=>a});var s=n(5998);function a(e,t,n,a,r){const i=t[t.length-1],[o,l]=[e.length/i,i],u=s.util.getTypedArrayFromDType(n,o*a),c=s.util.getTypedArrayFromDType("int32",o*a);for(let t=0;t<o;t++){const n=t*l,s=e.subarray(n,n+l),r=[];for(let e=0;e<s.length;e++)r.push({value:s[e],index:e});r.sort(((e,t)=>t.value-e.value));const i=t*a,o=u.subarray(i,i+a),h=c.subarray(i,i+a);for(let e=0;e<a;e++)o[e]=r[e].value,h[e]=r[e].index}const h=t.slice();return h[h.length-1]=a,[(0,s.buffer)(h,n,u),(0,s.buffer)(h,"int32",c)]}},4802:(e,t,n)=>{"use strict";n.d(t,{p:()=>i,b:()=>o});var s=n(5998),a=n(8166),r=n(7107);function i(e){const{inputs:t,attrs:n,backend:s}=e,{x:i}=t,{perm:o}=n;(0,a.H)(i,"transpose");const l=i.shape.length,u=new Array(l);for(let e=0;e<u.length;e++)u[e]=i.shape[o[e]];const c=s.data.get(i.dataId).values,h=(0,r.H)(c,i.shape,i.dtype,o,u);return{dataId:s.write(h,u,i.dtype),shape:u,dtype:i.dtype}}const o={kernelName:s.Transpose,backendName:"cpu",kernelFunc:i}},7107:(e,t,n)=>{"use strict";n.d(t,{H:()=>a});var s=n(5998);function a(e,t,n,a,r){const i=t.length,o=s.util.sizeFromShape(t),l=s.util.computeStrides(t),u=s.util.computeStrides(r),c=s.util.getTypedArrayFromDType(n,s.util.sizeFromShape(r));for(let t=0;t<o;++t){const n=s.util.indexToLoc(t,i,l),r=new Array(n.length);for(let e=0;e<r.length;e++)r[e]=n[a[e]];c[s.util.locToIndex(r,i,u)]=e[t]}return c}},5638:(e,t,n)=>{"use strict";n.d(t,{S:()=>a});var s=n(5998);function a(e,t,n,a){const r=s.util.parseAxisParam(t,n)[0],i=[1,n[0],1];for(let e=0;e<r;e++)i[0]*=n[e];i[1]=n[r];for(let e=r+1;e<n.length;e++)i[2]*=n[e];const o={},l=new Int32Array(n[r]),u=new s.TensorBuffer(i,a,e),c=[],h=1===i[0]&&1===i[2];for(let t=0;t<n[r];t++){let n;if(h)n=e[t].toString();else{const e=[];for(let n=0;n<i[0];n++)for(let s=0;s<i[2];s++)e.push(u.get(n,t,s));n=e.join(",")}if(void 0!==o[n])l[t]=o[n];else{const e=Object.keys(o).length;o[n]=e,l[t]=e,c.push(t)}}const p=i.slice();p[1]=Object.keys(o).length;const d=new s.TensorBuffer(p,a);c.forEach(((e,t)=>{for(let n=0;n<i[0];n++)for(let s=0;s<i[2];s++)d.set(u.get(n,e,s),n,t,s)}));const f=n.slice();return f[r]=p[1],{outputValues:d.values,outputShape:f,indices:l}}},5226:(e,t,n)=>{"use strict";n.r(t),n.d(t,{simpleAbsImpl:()=>s.bk,addImpl:()=>a.EH,bincountImpl:()=>r.W,bincountReduceImpl:()=>r.i,ceilImpl:()=>i.__,concatImpl:()=>o.j,expImpl:()=>l.Ro,expm1Impl:()=>u.OF,floorImpl:()=>c.r6,gatherV2Impl:()=>h.i,greaterImpl:()=>p.o,lessImpl:()=>d.rO,linSpaceImpl:()=>f.b,logImpl:()=>m.vX,maxImpl:()=>g.B,maximumImpl:()=>y.wS,minimumImpl:()=>b.vP,multiplyImpl:()=>x.$3,negImpl:()=>v.uC,notEqualImpl:()=>k.Gj,prodImpl:()=>w.Qg,rangeImpl:()=>N.b,rsqrtImpl:()=>I.zd,sliceImpl:()=>S.rT,squaredDifferenceImpl:()=>T.Hz,stridedSliceImpl:()=>C.t,subImpl:()=>$.VY,tileImpl:()=>A.R,topKImpl:()=>E.W,transposeImpl:()=>_.H,uniqueImpl:()=>R.S});var s=n(224),a=n(2779),r=n(8607),i=n(4769),o=n(8926),l=n(1211),u=n(969),c=n(6574),h=n(4468),p=n(6272),d=n(8405),f=n(1325),m=n(5223),g=n(5126),y=n(1717),b=n(612),x=n(1917),v=n(854),k=n(8584),w=n(9560),N=n(9230),I=n(7742),S=n(2578),T=n(212),C=n(2210),$=n(1649),A=n(7723),E=n(9556),_=n(7107),R=n(5638)},3533:(e,t,n)=>{"use strict";n.d(t,{b:()=>a});var s=n(5998);function a(e){return(t,n,a,r,i)=>{const o=s.backend_util.assertAndGetBroadcastShape(t,n),l=o.length,u=s.util.computeStrides(o),c=s.util.sizeFromShape(o),h=s.util.getTypedArrayFromDType(i,c),p=t.length,d=n.length,f=s.util.computeStrides(t),m=s.util.computeStrides(n),g=s.backend_util.getBroadcastDims(t,o),y=s.backend_util.getBroadcastDims(n,o);if(g.length+y.length===0)for(let t=0;t<h.length;++t)h[t]=e(a[t%a.length],r[t%r.length]);else for(let t=0;t<h.length;++t){const n=s.util.indexToLoc(t,l,u),i=n.slice(-p);g.forEach((e=>i[e]=0));const o=s.util.locToIndex(i,p,f),c=n.slice(-d);y.forEach((e=>c[e]=0));const b=s.util.locToIndex(c,d,m);h[t]=e(a[o],r[b])}return[h,o]}}},6205:(e,t,n)=>{"use strict";n.d(t,{j:()=>o,H:()=>l});var s=n(5998),a=n(8166),r=n(9258),i=n(6961);function o(e,t,n,s){return null==n?({inputs:n,backend:r})=>{const{a:i,b:o}=n,l=r;(0,a.H)([i,o],e);const u=l.data.get(i.dataId).values,c=l.data.get(o.dataId).values,h=s||i.dtype,[p,d]=t(i.shape,o.shape,u,c,h);return l.makeTensorInfo(d,h,p)}:({inputs:e,backend:a})=>{const{a:o,b:l}=e,u=a;if("complex64"===o.dtype||"complex64"===l.dtype){const e=(0,r.p)({inputs:{x:o},backend:u,attrs:{dtype:"complex64"}}),t=u.data.get(e.dataId),s=t.complexTensorInfos.real,a=t.complexTensorInfos.imag,c=u.data.get(s.dataId).values,h=u.data.get(a.dataId).values,p=(0,r.p)({inputs:{x:l},backend:u,attrs:{dtype:"complex64"}}),d=u.data.get(p.dataId),f=d.complexTensorInfos.real,m=d.complexTensorInfos.imag,g=u.data.get(f.dataId).values,y=u.data.get(m.dataId).values,[b,x,v]=n(o.shape,l.shape,c,h,g,y),k=u.makeTensorInfo(v,"float32",b),w=u.makeTensorInfo(v,"float32",x),N=(0,i.P)({inputs:{real:k,imag:w},backend:u});return u.disposeIntermediateTensorInfo(e),u.disposeIntermediateTensorInfo(p),u.disposeIntermediateTensorInfo(k),u.disposeIntermediateTensorInfo(w),N}{const e=u.data.get(o.dataId).values,n=u.data.get(l.dataId).values,a=s||o.dtype,[r,i]=t(o.shape,l.shape,e,n,a);return u.makeTensorInfo(i,a,r)}}}function l(e){return(t,n,a,r,i,o)=>{const l=s.backend_util.assertAndGetBroadcastShape(t,n),u=s.util.sizeFromShape(l),c=l.length,h=s.util.computeStrides(l),p=s.util.getTypedArrayFromDType("float32",u),d=s.util.getTypedArrayFromDType("float32",u),f=s.backend_util.getBroadcastDims(t,l),m=s.backend_util.getBroadcastDims(n,l),g=s.backend_util.mergeRealAndImagArrays(a,r),y=s.backend_util.mergeRealAndImagArrays(i,o),b=t.length,x=s.util.computeStrides(t),v=n.length,k=s.util.computeStrides(n);if(f.length+m.length===0)for(let t=0;t<p.length;t++){const n=t%g.length,s=t%y.length,a=e(g[2*n],g[2*n+1],y[2*s],y[2*s+1]);p[t]=a.real,d[t]=a.imag}else for(let t=0;t<p.length;t++){const n=s.util.indexToLoc(t,c,h),a=n.slice(-b);f.forEach((e=>a[e]=0));const r=s.util.locToIndex(a,b,x),i=n.slice(-v);m.forEach((e=>i[e]=0));const o=s.util.locToIndex(i,v,k),l=e(g[2*r],g[2*r+1],y[2*o],y[2*o+1]);p[t]=l.real,d[t]=l.imag}return[p,d,l]}}},8029:(e,t,n)=>{"use strict";n.d(t,{a:()=>a});var s=n(5998);function a(e){return(t,n,a)=>{const r=s.util.getTypedArrayFromDType(n,t.length);for(let n=0;n<t.length;++n)r[n]=e(t[n],a);return r}}},6738:(e,t,n)=>{"use strict";n.d(t,{A:()=>r,O:()=>i});var s=n(5998),a=n(8166);function r(e,t,n){return({inputs:r,attrs:i,backend:o})=>{const{x:l}=r;if((0,a.H)(l,e),"string"===l.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const u=o,c=u.data.get(l.dataId).values,h=s.util.sizeFromShape(l.shape),p=n||l.dtype,d=s.util.getArrayFromDType(p,h);for(let e=0;e<h;++e)d[e]=t(c[e],i);return u.makeTensorInfo(l.shape,p,d)}}function i(e,t,n){return({inputs:s,attrs:r,backend:i})=>{const{x:o}=s;if((0,a.H)(o,e),"string"===o.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const l=i,u=l.data.get(o.dataId).values,c=n||o.dtype,h=t(u,c,r);return l.makeTensorInfo(o.shape,c,h)}}},4391:(e,t,n)=>{"use strict";n.d(t,{l:()=>r});var s=n(5998),a=n(6961);function r(e,t,n="float32"){if("complex64"===n){const n=r(e,t,"float32"),s=r(e,t,"float32");return(0,a.P)({inputs:{real:n,imag:s},backend:e})}const i=s.util.makeZerosTypedArray(s.util.sizeFromShape(t),n);return e.makeTensorInfo(t,n,i)}},3448:(e,t,n)=>{"use strict";n.r(t),n.d(t,{GPGPUContext:()=>He,MathBackendWebGL:()=>Qt,forceHalfFloat:()=>Zt,gpgpu_util:()=>a,setWebGLContext:()=>l,version_webgl:()=>Jt,webgl:()=>en,webgl_util:()=>s});var s={};n.r(s),n.d(s,{assertNotComplex:()=>he,bindCanvasToFramebuffer:()=>B,bindColorTextureToFramebuffer:()=>P,bindTextureToProgramUniformSampler:()=>L,bindTextureUnit:()=>D,bindVertexBufferToProgramAttribute:()=>F,callAndCheck:()=>y,canBeRepresented:()=>b,createFragmentShader:()=>w,createFramebuffer:()=>R,createProgram:()=>I,createStaticIndexBuffer:()=>$,createStaticVertexBuffer:()=>C,createTexture:()=>E,createVertexShader:()=>k,getBatchDim:()=>j,getExtensionOrThrow:()=>v,getFramebufferErrorMessage:()=>U,getMaxTexturesInShader:()=>se,getNumChannels:()=>A,getProgramUniformLocation:()=>z,getProgramUniformLocationOrThrow:()=>M,getRowsCols:()=>X,getShapeAs3D:()=>q,getTextureShapeFromLogicalShape:()=>K,getWebGLDisjointQueryTimerVersion:()=>ae,getWebGLErrorMessage:()=>x,getWebGLMaxTextureSize:()=>ee,hasExtension:()=>re,isCapableOfRenderingToFloatTexture:()=>oe,isDownloadFloatTextureEnabled:()=>le,isReshapeFree:()=>Q,isWebGLFenceEnabled:()=>ce,isWebGLVersionEnabled:()=>ie,linkProgram:()=>S,resetMaxTextureSize:()=>te,resetMaxTexturesInShader:()=>ne,unbindColorTextureFromFramebuffer:()=>V,unbindTextureUnit:()=>O,validateFramebuffer:()=>W,validateProgram:()=>T,validateTextureSize:()=>_});var a={};n.r(a),n.d(a,{bindVertexProgramAttributeStreams:()=>ze,createBufferFromOutputTexture:()=>Pe,createFloat16MatrixTexture:()=>Ee,createFloat16PackedMatrixTexture:()=>Me,createFloat32MatrixTexture:()=>$e,createIndexBuffer:()=>Se,createPackedMatrixTexture:()=>De,createUnsignedBytesMatrixTexture:()=>Re,createVertexBuffer:()=>Ie,createVertexShader:()=>Ne,downloadByteEncodedFloatMatrixFromOutputTexture:()=>We,downloadFloat32MatrixFromBuffer:()=>Ve,downloadMatrixFromPackedOutputTexture:()=>Ge,downloadPackedMatrixFromBuffer:()=>Ue,getInternalFormatForFloat16MatrixTexture:()=>Ae,getInternalFormatForFloat16PackedMatrixTexture:()=>Oe,getInternalFormatForFloat32MatrixTexture:()=>Ce,getInternalFormatForPackedMatrixTexture:()=>Fe,getInternalFormatForUnsignedBytesMatrixTexture:()=>_e,uploadDenseMatrixToTexture:()=>Le,uploadPixelDataToTexture:()=>Be});var r=n(5998);const i={},o={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function l(e,t){i[e]=t}function u(e){if(!(e in i)){const t=function(e){if(1!==e&&2!==e)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");const t=function(e){if("undefined"!=typeof OffscreenCanvas&&2===e)return new OffscreenCanvas(300,150);if("undefined"!=typeof document)return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}(e);return t.addEventListener("webglcontextlost",(t=>{t.preventDefault(),delete i[e]}),!1),1===e?t.getContext("webgl",o)||t.getContext("experimental-webgl",o):t.getContext("webgl2",o)}(e);if(null===t)return console.log("Could not get context for WebGL version",e),null;i[e]=t}const t=i[e];return t.isContextLost()?(delete i[e],u(e)):(t.disable(t.DEPTH_TEST),t.disable(t.STENCIL_TEST),t.disable(t.BLEND),t.disable(t.DITHER),t.disable(t.POLYGON_OFFSET_FILL),t.disable(t.SAMPLE_COVERAGE),t.enable(t.SCISSOR_TEST),t.enable(t.CULL_FACE),t.cullFace(t.BACK),i[e])}var c,h,p;function d(e,t){return[t,e]}function f(e){const t=r.util.sizeFromShape(e),n=Math.ceil(t/4);return r.util.sizeToSquarishShape(n)}function m(e,t){return[Math.max(1,Math.ceil(t/2)),Math.max(1,Math.ceil(e/2))]}function g(e,t){const n=e;let s,a,i,o,l,u,c,h,p,d;return 2===(0,r.env)().getNumber("WEBGL_VERSION")?(s=n.R32F,a=n.R16F,i=n.RGBA16F,o=n.RGBA32F,l=n.RED,c=4,h=1,p=n.HALF_FLOAT,d=n.FLOAT):(s=e.RGBA,a=e.RGBA,i=e.RGBA,o=n.RGBA,l=e.RGBA,c=4,h=4,p=null!=t?t.HALF_FLOAT_OES:null,d=e.FLOAT),u=e.RGBA,{internalFormatFloat:s,internalFormatHalfFloat:a,internalFormatPackedHalfFloat:i,internalFormatPackedFloat:o,textureFormatFloat:l,downloadTextureFormat:u,downloadUnpackNumChannels:c,defaultNumChannels:h,textureTypeHalfFloat:p,textureTypeFloat:d}}function y(e,t){const n=t();return(0,r.env)().getBool("DEBUG")&&function(e){const t=e.getError();if(t!==e.NO_ERROR)throw new Error("WebGL Error: "+x(e,t))}(e),n}function b(e){return!!((0,r.env)().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===e||5.96e-8<Math.abs(e)&&Math.abs(e)<65504)}function x(e,t){switch(t){case e.NO_ERROR:return"NO_ERROR";case e.INVALID_ENUM:return"INVALID_ENUM";case e.INVALID_VALUE:return"INVALID_VALUE";case e.INVALID_OPERATION:return"INVALID_OPERATION";case e.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case e.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case e.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return`Unknown error code ${t}`}}function v(e,t){return G(e,(()=>e.getExtension(t)),'Extension "'+t+'" not supported on this browser.')}function k(e,t){const n=G(e,(()=>e.createShader(e.VERTEX_SHADER)),"Unable to create vertex WebGLShader.");if(y(e,(()=>e.shaderSource(n,t))),y(e,(()=>e.compileShader(n))),!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw console.log(e.getShaderInfoLog(n)),new Error("Failed to compile vertex shader.");return n}function w(e,t){const n=G(e,(()=>e.createShader(e.FRAGMENT_SHADER)),"Unable to create fragment WebGLShader.");if(y(e,(()=>e.shaderSource(n,t))),y(e,(()=>e.compileShader(n))),!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw function(e,t){const n=N.exec(t);if(null==n)return console.log(`Couldn't parse line number in error: ${t}`),void console.log(e);const s=+n[1],a=e.split("\n"),i=a.length.toString().length+2,o=a.map(((e,t)=>r.util.rightPad((t+1).toString(),i)+e));let l=0;for(let e=0;e<o.length;e++)l=Math.max(o[e].length,l);const u=o.slice(0,s-1),c=o.slice(s-1,s),h=o.slice(s);console.log(u.join("\n")),console.log(t.split("\n")[0]),console.log(`%c ${r.util.rightPad(c[0],l)}`,"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(h.join("\n"))}(t,e.getShaderInfoLog(n)),new Error("Failed to compile fragment shader.");return n}!function(e){e[e.DENSE=0]="DENSE",e[e.SHARED_BATCH=1]="SHARED_BATCH"}(c||(c={})),function(e){e[e.RENDER=0]="RENDER",e[e.UPLOAD=1]="UPLOAD",e[e.PIXELS=2]="PIXELS",e[e.DOWNLOAD=3]="DOWNLOAD"}(h||(h={})),function(e){e[e.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",e[e.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",e[e.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",e[e.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",e[e.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16"}(p||(p={}));const N=/ERROR: [0-9]+:([0-9]+):/g;function I(e){return G(e,(()=>e.createProgram()),"Unable to create WebGLProgram.")}function S(e,t){if(y(e,(()=>e.linkProgram(t))),!1===e.getProgramParameter(t,e.LINK_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Failed to link vertex and fragment shaders.")}function T(e,t){if(y(e,(()=>e.validateProgram(t))),!1===e.getProgramParameter(t,e.VALIDATE_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Shader program validation failed.")}function C(e,t){const n=G(e,(()=>e.createBuffer()),"Unable to create WebGLBuffer");return y(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,n))),y(e,(()=>e.bufferData(e.ARRAY_BUFFER,t,e.STATIC_DRAW))),n}function $(e,t){const n=G(e,(()=>e.createBuffer()),"Unable to create WebGLBuffer");return y(e,(()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,n))),y(e,(()=>e.bufferData(e.ELEMENT_ARRAY_BUFFER,t,e.STATIC_DRAW))),n}function A(){return 2===(0,r.env)().getNumber("WEBGL_VERSION")?1:4}function E(e){return G(e,(()=>e.createTexture()),"Unable to create WebGLTexture.")}function _(e,t){const n=(0,r.env)().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(e<=0||t<=0)throw new Error(`Requested texture size [${e}x${t}] is invalid.`);if(e>n||t>n)throw new Error(`Requested texture size [${e}x${t}] greater than WebGL maximum on this browser / GPU [${n}x${n}].`)}function R(e){return G(e,(()=>e.createFramebuffer()),"Unable to create WebGLFramebuffer.")}function F(e,t,n,s,a,r,i){const o=e.getAttribLocation(t,n);return-1!==o&&(y(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,s))),y(e,(()=>e.vertexAttribPointer(o,a,e.FLOAT,!1,r,i))),y(e,(()=>e.enableVertexAttribArray(o))),!0)}function D(e,t,n){H(e,n),y(e,(()=>e.activeTexture(e.TEXTURE0+n))),y(e,(()=>e.bindTexture(e.TEXTURE_2D,t)))}function O(e,t){H(e,t),y(e,(()=>e.activeTexture(e.TEXTURE0+t))),y(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}function M(e,t,n){return G(e,(()=>e.getUniformLocation(t,n)),'uniform "'+n+'" not present in program.')}function z(e,t,n){return e.getUniformLocation(t,n)}function L(e,t,n,s){y(e,(()=>D(e,t,s))),y(e,(()=>e.uniform1i(n,s)))}function B(e){y(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,null))),y(e,(()=>e.viewport(0,0,e.canvas.width,e.canvas.height))),y(e,(()=>e.scissor(0,0,e.canvas.width,e.canvas.height)))}function P(e,t,n){y(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,n))),y(e,(()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,t,0)))}function V(e,t){y(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,t))),y(e,(()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,null,0)))}function W(e){const t=e.checkFramebufferStatus(e.FRAMEBUFFER);if(t!==e.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+U(e,t))}function U(e,t){switch(t){case e.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case e.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return`unknown error ${t}`}}function G(e,t,n){const s=y(e,(()=>t()));if(null==s)throw new Error(n);return s}function H(e,t){const n=e.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,s=t+e.TEXTURE0;if(s<e.TEXTURE0||s>n)throw new Error(`textureUnit must be in [gl.TEXTURE0, gl.TEXTURE${n}].`)}function j(e,t=2){return r.util.sizeFromShape(e.slice(0,e.length-t))}function X(e){if(0===e.length)throw Error("Cannot get rows and columns of an empty shape array.");return[e.length>1?e[e.length-2]:1,e[e.length-1]]}function q(e){let t=[1,1,1];return 0===e.length||1===e.length&&1===e[0]||(t=[j(e),...X(e)]),t}function K(e,t=!1){let n=(0,r.env)().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(t&&(n*=2,1===(e=e.map(((t,n)=>n>=e.length-2?r.util.nearestLargerEven(e[n]):e[n]))).length&&(e=[2,e[0]])),2!==e.length){const t=r.util.squeezeShape(e);e=t.newShape}let s=r.util.sizeFromShape(e);if(e.length<=1&&s<=n)return[1,s];if(2===e.length&&e[0]<=n&&e[1]<=n)return e;if(3===e.length&&e[0]*e[1]<=n&&e[2]<=n)return[e[0]*e[1],e[2]];if(3===e.length&&e[0]<=n&&e[1]*e[2]<=n)return[e[0],e[1]*e[2]];if(4===e.length&&e[0]*e[1]*e[2]<=n&&e[3]<=n)return[e[0]*e[1]*e[2],e[3]];if(4===e.length&&e[0]<=n&&e[1]*e[2]*e[3]<=n)return[e[0],e[1]*e[2]*e[3]];if(t){const t=j(e);let n=2,a=2;return e.length&&([n,a]=X(e)),s=t*(n/2)*(a/2),r.util.sizeToSquarishShape(s).map((e=>2*e))}return r.util.sizeToSquarishShape(s)}function Y(e){return e%2==0}function Q(e,t){if(e=e.slice(-2),t=t.slice(-2),r.util.arraysEqual(e,t))return!0;if(!e.length||!t.length)return!0;if(0===e[0]||0===e[1]||0===t[0]||0===t[1])return!0;if(e.length!==t.length){const n=e.slice(-1)[0],s=t.slice(-1)[0];if(n===s)return!0;if(Y(n)&&Y(s)&&(1===e[0]||1===t[0]))return!0}return e[1]===t[1]&&Y(e[0])&&Y(t[0])}let J,Z;function ee(e){if(null==J){const t=u(e);J=t.getParameter(t.MAX_TEXTURE_SIZE)}return J}function te(){J=null}function ne(){Z=null}function se(e){if(null==Z){const t=u(e);Z=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,Z)}function ae(e){if(0===e)return 0;let t;const n=u(e);return t=re(n,"EXT_disjoint_timer_query_webgl2")&&2===e?2:re(n,"EXT_disjoint_timer_query")?1:0,t}function re(e,t){return null!=e.getExtension(t)}function ie(e){try{if(null!=u(e))return!0}catch(e){return console.log("Error when getting WebGL context: ",e),!1}return!1}function oe(e){if(0===e)return!1;const t=u(e);if(1===e){if(!re(t,"OES_texture_float"))return!1}else if(!re(t,"EXT_color_buffer_float"))return!1;return ue(t)}function le(e){if(0===e)return!1;const t=u(e);if(1!==e){if(re(t,"EXT_color_buffer_float"))return ue(t);const e="EXT_color_buffer_half_float";if(re(t,e)){const n=t.getExtension(e);return function(e,t){const n=g(e,t),s=e.createTexture();e.bindTexture(e.TEXTURE_2D,s);e.texImage2D(e.TEXTURE_2D,0,n.internalFormatHalfFloat,1,1,0,n.textureFormatFloat,n.textureTypeHalfFloat,null);const a=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,a),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,s,0);const r=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(s),e.deleteFramebuffer(a),r}(t,n)}return!1}return!!re(t,"OES_texture_float")&&(!!re(t,"WEBGL_color_buffer_float")&&ue(t))}function ue(e){const t=g(e),n=e.createTexture();e.bindTexture(e.TEXTURE_2D,n),e.texImage2D(e.TEXTURE_2D,0,t.internalFormatFloat,1,1,0,t.textureFormatFloat,t.textureTypeFloat,null);const s=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,s),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,n,0);const a=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(n),e.deleteFramebuffer(s),a}function ce(e){return 2===e&&null!=u(e).fenceSync}function he(e,t){Array.isArray(e)||(e=[e]),e.forEach((e=>{null!=e&&r.util.assert("complex64"!==e.dtype,(()=>`${t} does not support complex64 tensors in the WebGL backend.`))}))}const pe=(0,r.env)();function de(){let e,t,n,s,a,i,o,l,u,c;return 2===(0,r.env)().getNumber("WEBGL_VERSION")?(e="#version 300 es",t="in",n="out",s="in",a="texture",i="outputColor",o="out vec4 outputColor;",l="\n      bool isnan_custom(float val) {\n        return (val > 0.0 || val < 0.0) ? false : val != 0.0;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ",u="",c="\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "):(e="",t="attribute",n="varying",s="varying",a="texture2D",i="gl_FragColor",o="",l="\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ",u="\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ",c="\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "),{version:e,attribute:t,varyingVs:n,varyingFs:s,texture2D:a,output:i,defineOutput:o,defineSpecialNaN:l,defineSpecialInf:u,defineRound:c}}function fe(e,t,n="index"){const s=r.util.computeStrides(t);return s.map(((t,a)=>`int ${e[a]} = ${n} / ${t}; ${a===s.length-1?`int ${e[a+1]} = ${n} - ${e[a]} * ${t}`:`index -= ${e[a]} * ${t}`};`)).join("")}function me(e){const t=r.util.computeStrides(e).map((e=>e.toString()));return`\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${t[0]} + coords.y * ${t[1]} + coords.z;\n  }\n`}pe.registerFlag("HAS_WEBGL",(()=>pe.getNumber("WEBGL_VERSION")>0)),pe.registerFlag("WEBGL_VERSION",(()=>ie(2)?2:ie(1)?1:0)),pe.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",(()=>!1)),pe.registerFlag("WEBGL_BUFFER_SUPPORTED",(()=>2===pe.get("WEBGL_VERSION"))),pe.registerFlag("WEBGL_CPU_FORWARD",(()=>!0)),pe.registerFlag("WEBGL_FORCE_F16_TEXTURES",(()=>!1)),pe.registerFlag("WEBGL_PACK",(()=>pe.getBool("HAS_WEBGL"))),pe.registerFlag("WEBGL_PACK_NORMALIZATION",(()=>pe.getBool("WEBGL_PACK"))),pe.registerFlag("WEBGL_PACK_CLIP",(()=>pe.getBool("WEBGL_PACK"))),pe.registerFlag("WEBGL_PACK_DEPTHWISECONV",(()=>!1)),pe.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",(()=>pe.getBool("WEBGL_PACK"))),pe.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",(()=>pe.getBool("WEBGL_PACK"))),pe.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",(()=>pe.getBool("WEBGL_PACK"))),pe.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",(()=>pe.getBool("WEBGL_PACK"))),pe.registerFlag("WEBGL_PACK_REDUCE",(()=>pe.getBool("WEBGL_PACK"))),pe.registerFlag("WEBGL_LAZILY_UNPACK",(()=>pe.getBool("WEBGL_PACK"))),pe.registerFlag("WEBGL_CONV_IM2COL",(()=>pe.getBool("WEBGL_PACK"))),pe.registerFlag("WEBGL_MAX_TEXTURE_SIZE",(()=>ee(pe.getNumber("WEBGL_VERSION")))),pe.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",(()=>se(pe.getNumber("WEBGL_VERSION")))),pe.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",(()=>{const e=pe.getNumber("WEBGL_VERSION");return 0===e?0:ae(e)})),pe.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",(()=>pe.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!r.device_util.isMobile())),pe.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",(()=>oe(pe.getNumber("WEBGL_VERSION")))),pe.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",(()=>!pe.getBool("WEBGL_FORCE_F16_TEXTURES")&&pe.getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))),pe.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",(()=>le(pe.getNumber("WEBGL_VERSION")))),pe.registerFlag("WEBGL_FENCE_API_ENABLED",(()=>ce(pe.getNumber("WEBGL_VERSION")))),pe.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",(()=>pe.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0)),pe.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",(()=>-1),(e=>{if(e<0&&-1!==e)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${e}.`)})),pe.registerFlag("WEBGL_FLUSH_THRESHOLD",(()=>r.device_util.isMobile()&&pe.getBool("IS_CHROME")?1:-1),(e=>{if(e<0&&-1!==e)throw new Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never manual flush) or at least 0, but got ${e}.`)}));const ge="\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n";class ye{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=c.DENSE;const t=f(e),n=de();this.outputShape=e,this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${fe(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${t[0]}, ${t[1]}));\n        int index = 4 * (resTexRC.x * ${t[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${n.output} = result;\n      }\n    `}}class be{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=c.DENSE;const t=f(e),n=de();this.outputShape=e,this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${fe(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${t[0]}, ${t[1]}));\n        int index = 4 * (resTexRC.x * ${t[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${n.output} = result;\n      }\n    `}}class xe{constructor(e){this.variableNames=["A"],this.outTexUsage=h.DOWNLOAD;const t=de();this.outputShape=e,this.userCode=`\n      ${ge}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${t.output} = encode_float(x);\n      }\n    `}}class ve{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=h.DOWNLOAD;const t=de();this.outputShape=e,this.userCode=`\n      ${ge}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${t.output} = encode_float(x);\n      }\n    `}}class ke{constructor(e,t,n=!1){this.variableNames=["A"];const s=de(),[a,r]=t;this.outputShape=e;let i="result";n&&(i="floor(result * 255. + 0.5)"),this.userCode=`\n      ${me(e)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex = idiv(flatIndex, 4, 1.);\n\n        int r = flatIndex / ${r};\n        int c = imod(flatIndex, ${r});\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(${r}.0, ${a}.0);\n        vec4 values = ${s.texture2D}(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        ${s.output} = vec4(${i}, 0., 0., 0.);\n      }\n    `}}class we{constructor(e,t,n=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const s=de(),[a,r]=t;this.outputShape=e;let i="",o="result";n&&(o="floor(result * 255. + 0.5)");for(let t=0;t<=1;t++)for(let n=0;n<=1;n++){const o=2*t+n;i+=`\n          localCoords = coords;\n          if(localCoords[2] + ${n} < ${e[2]}) {\n            localCoords[2] += ${n};\n            if(localCoords[1] + ${t} < ${e[1]}) {\n              localCoords[1] += ${t};\n\n              flatIndex = getFlatIndex(localCoords);\n              offset = imod(flatIndex, 4);\n\n              flatIndex = idiv(flatIndex, 4, 1.);\n\n              r = flatIndex / ${r};\n              c = imod(flatIndex, ${r});\n              uv = (vec2(c, r) + halfCR) / vec2(${r}.0, ${a}.0);\n              values = ${s.texture2D}(A, uv);\n\n              if(offset == 0) {\n                result[${o}] = values[0];\n              } else if(offset == 1) {\n                result[${o}] = values[1];\n              } else if(offset == 2) {\n                result[${o}] = values[2];\n              } else {\n                result[${o}] = values[3];\n              }\n            }\n          }\n        `}this.userCode=`\n      ${me(e)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        vec4 result = vec4(0.);\n        int flatIndex, r, c, offset;\n        ivec3 localCoords;\n        vec2 uv;\n        vec4 values;\n\n        ${i}\n\n        ${s.output} = ${o};\n      }\n    `}}function Ne(e){const t=de();return k(e,`${t.version}\n    precision highp float;\n    ${t.attribute} vec3 clipSpacePos;\n    ${t.attribute} vec2 uv;\n    ${t.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`)}function Ie(e){return C(e,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}function Se(e){return $(e,new Uint16Array([0,1,2,2,1,3]))}function Te(e,t,n,s,a,r){_(t,n);const i=E(e),o=e.TEXTURE_2D;return y(e,(()=>e.bindTexture(o,i))),y(e,(()=>e.texParameteri(o,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE))),y(e,(()=>e.texParameteri(o,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE))),y(e,(()=>e.texParameteri(o,e.TEXTURE_MIN_FILTER,e.NEAREST))),y(e,(()=>e.texParameteri(o,e.TEXTURE_MAG_FILTER,e.NEAREST))),y(e,(()=>e.texImage2D(o,0,s,t,n,0,a,r,null))),y(e,(()=>e.bindTexture(e.TEXTURE_2D,null))),i}function Ce(e){return e.internalFormatFloat}function $e(e,t,n,s){const[a,r]=d(t,n);return Te(e,a,r,Ce(s),s.textureFormatFloat,e.FLOAT)}function Ae(e){return e.internalFormatHalfFloat}function Ee(e,t,n,s){const[a,r]=d(t,n);return Te(e,a,r,Ae(s),s.textureFormatFloat,s.textureTypeHalfFloat)}function _e(e){return e.downloadTextureFormat}function Re(e,t,n,s){const[a,r]=d(t,n);return Te(e,a,r,_e(s),e.RGBA,e.UNSIGNED_BYTE)}function Fe(e){return e.internalFormatPackedFloat}function De(e,t,n,s){const[a,r]=m(t,n);return Te(e,a,r,Fe(s),e.RGBA,e.FLOAT)}function Oe(e){return e.internalFormatPackedHalfFloat}function Me(e,t,n,s){const[a,r]=m(t,n);return Te(e,a,r,Oe(s),e.RGBA,s.textureTypeHalfFloat)}function ze(e,t,n){return y(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,n))),F(e,t,"clipSpacePos",n,3,20,0)&&F(e,t,"uv",n,2,20,12)}function Le(e,t,n,s,a,r){let i,o,l;y(e,(()=>e.bindTexture(e.TEXTURE_2D,t))),a instanceof Uint8Array?(i=new Uint8Array(n*s*4),o=e.UNSIGNED_BYTE,l=e.RGBA):(i=new Float32Array(n*s*4),o=e.FLOAT,l=r.internalFormatPackedFloat),i.set(a),y(e,(()=>e.texImage2D(e.TEXTURE_2D,0,l,n,s,0,e.RGBA,o,i))),y(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}function Be(e,t,n){y(e,(()=>e.bindTexture(e.TEXTURE_2D,t))),n.data instanceof Uint8Array?y(e,(()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,n.width,n.height,0,e.RGBA,e.UNSIGNED_BYTE,n.data))):y(e,(()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,n))),y(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}function Pe(e,t,n,s){const a=e.createBuffer();y(e,(()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,a)));const r=16*t*n;return y(e,(()=>e.bufferData(e.PIXEL_PACK_BUFFER,r,e.STREAM_READ))),y(e,(()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,0))),y(e,(()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,null))),a}function Ve(e,t,n){const s=e,a=new Float32Array(n);return s.bindBuffer(s.PIXEL_PACK_BUFFER,t),s.getBufferSubData(s.PIXEL_PACK_BUFFER,0,a),s.bindBuffer(s.PIXEL_PACK_BUFFER,null),a}function We(e,t,n,s){const[a,r]=d(t,n),i=new Uint8Array(t*n*4);return y(e,(()=>e.readPixels(0,0,a,r,s.downloadTextureFormat,e.UNSIGNED_BYTE,i))),new Float32Array(i.buffer)}function Ue(e,t,n,s,a,r,i,o){const l=e,u=new Float32Array(function(e,t){const[n,s]=m(e,t);return n*s*4}(r,i));return l.bindBuffer(l.PIXEL_PACK_BUFFER,t),l.getBufferSubData(l.PIXEL_PACK_BUFFER,0,u),l.bindBuffer(l.PIXEL_PACK_BUFFER,null),u}function Ge(e,t,n){const s=new Float32Array(t*n*4);return y(e,(()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,s))),s}class He{constructor(e){this.outputTexture=null,this.program=null,this.disposed=!1,this.vertexAttrsAreBound=!1,this.itemsToPoll=[];const t=(0,r.env)().getNumber("WEBGL_VERSION");null!=e?(this.gl=e,l(t,e)):this.gl=u(t);let n="WEBGL_color_buffer_float";const s="EXT_color_buffer_half_float";if(1===(0,r.env)().getNumber("WEBGL_VERSION")){const e="OES_texture_float",t="OES_texture_half_float";if(this.textureFloatExtension=v(this.gl,e),re(this.gl,t))this.textureHalfFloatExtension=v(this.gl,t);else if((0,r.env)().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(n),re(this.gl,s))this.colorBufferHalfFloatExtension=v(this.gl,s);else if((0,r.env)().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(n="EXT_color_buffer_float",re(this.gl,n))this.colorBufferFloatExtension=this.gl.getExtension(n);else{if(!re(this.gl,s))throw new Error("GL context does not support color renderable floats");this.colorBufferHalfFloatExtension=this.gl.getExtension(s)}this.vertexBuffer=Ie(this.gl),this.indexBuffer=Se(this.gl),this.framebuffer=R(this.gl),this.textureConfig=g(this.gl,this.textureHalfFloatExtension)}get debug(){return(0,r.env)().getBool("DEBUG")}dispose(){if(this.disposed)return;null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");const e=this.gl;y(e,(()=>e.finish())),y(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,null))),y(e,(()=>e.deleteFramebuffer(this.framebuffer))),y(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,null))),y(e,(()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null))),y(e,(()=>e.deleteBuffer(this.indexBuffer))),this.disposed=!0}createFloat32MatrixTexture(e,t){return this.throwIfDisposed(),$e(this.gl,e,t,this.textureConfig)}createFloat16MatrixTexture(e,t){return this.throwIfDisposed(),Ee(this.gl,e,t,this.textureConfig)}createUnsignedBytesMatrixTexture(e,t){return this.throwIfDisposed(),Re(this.gl,e,t,this.textureConfig)}uploadPixelDataToTexture(e,t){this.throwIfDisposed(),Be(this.gl,e,t)}uploadDenseMatrixToTexture(e,t,n,s){this.throwIfDisposed(),Le(this.gl,e,t,n,s,this.textureConfig)}createFloat16PackedMatrixTexture(e,t){return this.throwIfDisposed(),Me(this.gl,e,t,this.textureConfig)}createPackedMatrixTexture(e,t){return this.throwIfDisposed(),De(this.gl,e,t,this.textureConfig)}deleteMatrixTexture(e){this.throwIfDisposed(),this.outputTexture===e&&(V(this.gl,this.framebuffer),this.outputTexture=null),y(this.gl,(()=>this.gl.deleteTexture(e)))}downloadByteEncodedFloatMatrixFromOutputTexture(e,t,n){return this.downloadMatrixDriver(e,(()=>We(this.gl,t,n,this.textureConfig)))}downloadPackedMatrixFromBuffer(e,t,n,s,a,r){return Ue(this.gl,e,0,0,0,a,r,this.textureConfig)}downloadFloat32MatrixFromBuffer(e,t){return Ve(this.gl,e,t)}createBufferFromTexture(e,t,n){this.bindTextureToFrameBuffer(e);const s=Pe(this.gl,t,n,this.textureConfig);return this.unbindTextureToFrameBuffer(),s}createAndWaitForFence(){const e=this.createFence(this.gl);return this.pollFence(e)}createFence(e){let t,n;if((0,r.env)().getBool("WEBGL_FENCE_API_ENABLED")){const s=e,a=s.fenceSync(s.SYNC_GPU_COMMANDS_COMPLETE,0);e.flush(),n=()=>{const e=s.clientWaitSync(a,0,0);return e===s.ALREADY_SIGNALED||e===s.CONDITION_SATISFIED},t=a}else(0,r.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(t=this.beginQuery(),this.endQuery(),n=()=>this.isQueryAvailable(t,(0,r.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):n=()=>!0;return{query:t,isFencePassed:n}}downloadMatrixFromPackedTexture(e,t,n){return this.downloadMatrixDriver(e,(()=>Ge(this.gl,t,n)))}createProgram(e){this.throwIfDisposed();const t=this.gl,n=w(t,e),s=Ne(t),a=I(t);return y(t,(()=>t.attachShader(a,s))),y(t,(()=>t.attachShader(a,n))),S(t,a),this.debug&&T(t,a),this.vertexAttrsAreBound||(this.setProgram(a),this.vertexAttrsAreBound=ze(t,this.program,this.vertexBuffer)),a}deleteProgram(e){this.throwIfDisposed(),e===this.program&&(this.program=null),null!=e&&y(this.gl,(()=>this.gl.deleteProgram(e)))}setProgram(e){this.throwIfDisposed(),this.program=e,null!=this.program&&this.debug&&T(this.gl,this.program),y(this.gl,(()=>this.gl.useProgram(e)))}getUniformLocation(e,t,n=!0){return this.throwIfDisposed(),n?M(this.gl,e,t):z(this.gl,e,t)}getAttributeLocation(e,t){return this.throwIfDisposed(),y(this.gl,(()=>this.gl.getAttribLocation(e,t)))}getUniformLocationNoThrow(e,t){return this.throwIfDisposed(),this.gl.getUniformLocation(e,t)}setInputMatrixTexture(e,t,n){this.throwIfDisposed(),this.throwIfNoProgram(),L(this.gl,e,t,n)}setOutputMatrixTexture(e,t,n){this.setOutputMatrixTextureDriver(e,n,t)}setOutputPackedMatrixTexture(e,t,n){this.throwIfDisposed();const[s,a]=m(t,n);this.setOutputMatrixTextureDriver(e,s,a)}setOutputMatrixWriteRegion(e,t,n,s){this.setOutputMatrixWriteRegionDriver(n,e,s,t)}setOutputPackedMatrixWriteRegion(e,t,n,s){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){null!=this.program&&T(this.gl,this.program),W(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();const e=this.gl;this.debug&&this.debugValidate(),y(e,(()=>e.drawElements(e.TRIANGLES,6,e.UNSIGNED_SHORT,0)))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),y(this.gl,(()=>this.gl.finish()))}getQueryTimerExtension(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=v(this.gl,2===(0,r.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(2===(0,r.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2(),n=e.createQuery();return e.beginQuery(t.TIME_ELAPSED_EXT,n),n}const e=this.getQueryTimerExtensionWebGL1(),t=e.createQueryEXT();return e.beginQueryEXT(e.TIME_ELAPSED_EXT,t),t}endQuery(){if(2===(0,r.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2();return void e.endQuery(t.TIME_ELAPSED_EXT)}const e=this.getQueryTimerExtensionWebGL1();e.endQueryEXT(e.TIME_ELAPSED_EXT)}async waitForQueryAndGetTime(e){return await r.util.repeatedTry((()=>this.disposed||this.isQueryAvailable(e,(0,r.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")))),this.getQueryTime(e,(0,r.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}getQueryTime(e,t){if(0===t)return null;if(2===t){const t=this.gl;return t.getQueryParameter(e,t.QUERY_RESULT)/1e6}{const t=this.getQueryTimerExtensionWebGL1();return t.getQueryObjectEXT(e,t.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(e,t){if(0===t)return!0;if(2===t){const t=this.gl,n=this.getQueryTimerExtensionWebGL2(),s=t.getQueryParameter(e,t.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(n.GPU_DISJOINT_EXT)),s&&!this.disjoint}{const t=this.getQueryTimerExtensionWebGL1(),n=t.getQueryObjectEXT(e,t.QUERY_RESULT_AVAILABLE_EXT);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(t.GPU_DISJOINT_EXT)),n&&!this.disjoint}}pollFence(e){return new Promise((t=>{this.addItemToPoll((()=>e.isFencePassed()),(()=>t()))}))}pollItems(){const e=function(e){let t=0;for(;t<e.length&&e[t]();++t);return t-1}(this.itemsToPoll.map((e=>e.isDoneFn)));for(let t=0;t<=e;++t){const{resolveFn:e}=this.itemsToPoll[t];e()}this.itemsToPoll=this.itemsToPoll.slice(e+1)}addItemToPoll(e,t){this.itemsToPoll.push({isDoneFn:e,resolveFn:t}),this.itemsToPoll.length>1||r.util.repeatedTry((()=>(this.pollItems(),0===this.itemsToPoll.length)))}bindTextureToFrameBuffer(e){this.throwIfDisposed(),P(this.gl,e,this.framebuffer),this.debug&&W(this.gl)}unbindTextureToFrameBuffer(){null!=this.outputTexture?(P(this.gl,this.outputTexture,this.framebuffer),this.debug&&W(this.gl)):V(this.gl,this.framebuffer)}downloadMatrixDriver(e,t){this.bindTextureToFrameBuffer(e);const n=t();return this.unbindTextureToFrameBuffer(),n}setOutputMatrixTextureDriver(e,t,n){this.throwIfDisposed();const s=this.gl;P(s,e,this.framebuffer),this.debug&&W(s),this.outputTexture=e,y(s,(()=>s.viewport(0,0,t,n))),y(s,(()=>s.scissor(0,0,t,n)))}setOutputMatrixWriteRegionDriver(e,t,n,s){this.throwIfDisposed(),y(this.gl,(()=>this.gl.scissor(e,t,n,s)))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(null==this.program)throw new Error("No GPU program is currently set.")}}const{getBroadcastDims:je}=r.backend_util;function Xe(e,t,n,s){const a=[];e.forEach((e=>{const t=r.util.sizeFromShape(e.shapeInfo.logicalShape);e.shapeInfo.isUniform?a.push(`uniform float ${e.name}${t>1?`[${t}]`:""};`):(a.push(`uniform sampler2D ${e.name};`),a.push(`uniform int offset${e.name};`))}));const i=a.join("\n"),o=e.map((e=>function(e,t,n=!1){let s="";s+=n?Ke(e):qe(e);const a=e.shapeInfo.logicalShape,i=t.logicalShape;return a.length<=i.length&&(s+=n?function(e,t){const n=e.name,s=n.charAt(0).toUpperCase()+n.slice(1),a="get"+s+"AtOutCoords",i=e.shapeInfo.logicalShape.length,o=t.logicalShape.length,l=je(e.shapeInfo.logicalShape,t.logicalShape),u=nt(o),c=o-i;let h;const p=["x","y","z","w","u","v"];h=0===i?"":o<2&&l.length>=1?"coords = 0;":l.map((e=>`coords.${p[e+c]} = 0;`)).join("\n");let d="";d=o<2&&i>0?"coords":e.shapeInfo.logicalShape.map(((e,t)=>`coords.${p[t+c]}`)).join(", ");let f="return outputValue;";const m=1===r.util.sizeFromShape(e.shapeInfo.logicalShape),g=1===r.util.sizeFromShape(t.logicalShape);if(1!==i||m||g){if(m&&!g)f=1===o?"\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      ":"\n        return vec4(outputValue.x);\n      ";else if(l.length){const e=i-2,t=i-1;l.indexOf(e)>-1&&l.indexOf(t)>-1?f="return vec4(outputValue.x);":l.indexOf(e)>-1?f="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":l.indexOf(t)>-1&&(f="return vec4(outputValue.xx, outputValue.zz);")}}else f="\n      return vec4(outputValue.xy, outputValue.xy);\n    ";return`\n    vec4 ${a}() {\n      ${u} coords = getOutputCoords();\n      ${h}\n      vec4 outputValue = get${s}(${d});\n      ${f}\n    }\n  `}(e,t):function(e,t){const n=e.name,s=n.charAt(0).toUpperCase()+n.slice(1),a="get"+s+"AtOutCoords",i=t.texShape,o=e.shapeInfo.texShape,l=e.shapeInfo.logicalShape.length,u=t.logicalShape.length;if(!e.shapeInfo.isUniform&&l===u&&null==e.shapeInfo.flatOffset&&r.util.arraysEqual(o,i))return`\n      float ${a}() {\n        return sampleTexture(${n}, resultUV);\n      }\n    `;const c=nt(u),h=je(e.shapeInfo.logicalShape,t.logicalShape),p=u-l;let d;const f=["x","y","z","w","u","v"];d=0===l?"":u<2&&h.length>=1?"coords = 0;":h.map((e=>`coords.${f[e+p]} = 0;`)).join("\n");let m="";return m=u<2&&l>0?"coords":e.shapeInfo.logicalShape.map(((e,t)=>`coords.${f[t+p]}`)).join(", "),`\n    float ${a}() {\n      ${c} coords = getOutputCoords();\n      ${d}\n      return get${s}(${m});\n    }\n  `}(e,t)),s}(e,t,s))).join("\n"),l=t.texShape,u=de(),c=function(e){return`\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${e.texture2D}(textureSampler, uv).r;\n    }\n  `}(u);let h,p,d=function(e){return`${e.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${e.varyingFs} vec2 resultUV;\n    ${e.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${e.defineSpecialNaN}\n    ${e.defineSpecialInf}\n    ${e.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${Ye}\n    ${Qe}\n    ${Je}\n  `}(u);return t.isPacked?(h=function(e,t){switch(e.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return function(e,t){const n=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];return 1===n[0]?`\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${n[1]}.0);\n      }\n    `:1===n[1]?`\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${n[0]}.0);\n      }\n    `:`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      return 2 * (resTexRC.x * ${n[1]} + resTexRC.y);\n    }\n  `}(0,t);case 2:return function(e,t){const n=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(r.util.arraysEqual(e,t))return`\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${n[0]}, ${n[1]}));\n      }\n    `;const s=Math.ceil(e[1]/2);return`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n      int r = 2 * (index / ${s});\n      int c = imod(index, ${s}) * 2;\n\n      return ivec2(r, c);\n    }\n  `}(e,t);case 3:return function(e,t){const n=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],s=Math.ceil(e[2]/2),a=s*Math.ceil(e[1]/2);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n\n      int b = index / ${a};\n      index -= b * ${a};\n\n      int r = 2 * (index / ${s});\n      int c = imod(index, ${s}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `}(e,t);default:return function(e,t){const n=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],s=Math.ceil(e[e.length-1]/2),a=s*Math.ceil(e[e.length-2]/2);let r=a,i="",o="b, r, c";for(let t=2;t<e.length-1;t++)r*=e[e.length-t-1],i=`\n      int b${t} = index / ${r};\n      index -= b${t} * ${r};\n    `+i,o=`b${t}, `+o;return`\n    ivec${e.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n\n      ${i}\n\n      int b = index / ${a};\n      index -= b * ${a};\n\n      int r = 2 * (index / ${s});\n      int c = imod(index, ${s}) * 2;\n\n      return ivec${e.length}(${o});\n    }\n  `}(e,t)}}(t.logicalShape,l),p=function(e){return`\n    void setOutput(vec4 val) {\n      ${e.output} = val;\n    }\n  `}(u)):(h=function(e,t){switch(e.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return 1===(n=t)[0]?`\n      int getOutputCoords() {\n        return int(resultUV.x * ${n[1]}.0);\n      }\n    `:1===n[1]?`\n      int getOutputCoords() {\n        return int(resultUV.y * ${n[0]}.0);\n      }\n    `:`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      return resTexRC.x * ${n[1]} + resTexRC.y;\n    }\n  `;case 2:return function(e,t){return r.util.arraysEqual(e,t)?`\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${t[0]}, ${t[1]}));\n      }\n    `:1===e[1]?`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `:1===e[0]?`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `:`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      int r = index / ${e[1]};\n      int c = index - r * ${e[1]};\n      return ivec2(r, c);\n    }\n  `}(e,t);case 3:return function(e,t){const n=fe(["r","c","d"],e);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${n}\n      return ivec3(r, c, d);\n    }\n  `}(e,t);case 4:return function(e,t){const n=fe(["r","c","d","d2"],e);return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${n}\n      return ivec4(r, c, d, d2);\n    }\n  `}(e,t);case 5:return function(e,t){const n=fe(["r","c","d","d2","d3"],e);return`\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${t[0]},\n                             ${t[1]}));\n\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `}(e,t);case 6:return function(e,t){const n=fe(["r","c","d","d2","d3","d4"],e);return`\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `}(e,t);default:throw new Error(`${e.length}-D output sampling is not yet supported`)}var n}(t.logicalShape,l),p=function(e){return`\n    void setOutput(float val) {\n      ${e.output} = vec4(val, 0, 0, 0);\n    }\n  `}(u)),s&&(d+=Ze),[d,c,p,i,h,o,n].join("\n")}function qe(e){const t=e.shapeInfo.logicalShape;switch(t.length){case 0:return function(e){const t=e.name,n="get"+t.charAt(0).toUpperCase()+t.slice(1);if(e.shapeInfo.isUniform)return`float ${n}() {return ${t};}`;const[s,a]=e.shapeInfo.texShape;if(1===s&&1===a)return`\n      float ${n}() {\n        return sampleTexture(${t}, halfCR);\n      }\n    `;const[r,i]=e.shapeInfo.texShape;return`\n    float ${n}() {\n      vec2 uv = uvFromFlat(${r}, ${i}, ${et(t)});\n      return sampleTexture(${t}, uv);\n    }\n  `}(e);case 1:return function(e){const t=e.name,n="get"+t.charAt(0).toUpperCase()+t.slice(1);if(e.shapeInfo.isUniform)return`\n      float ${n}(int index) {\n        ${tt(e)}\n      }\n    `;const s=e.shapeInfo.texShape,a=s[0],r=s[1];if(1===r&&1===a)return`\n      float ${n}(int index) {\n        return sampleTexture(${t}, halfCR);\n      }\n    `;const i=et(t);return 1===r?`\n      float ${n}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${i}) + 0.5) / ${a}.0);\n        return sampleTexture(${t}, uv);\n      }\n    `:1===a?`\n      float ${n}(int index) {\n        vec2 uv = vec2((float(index + ${i}) + 0.5) / ${r}.0, 0.5);\n        return sampleTexture(${t}, uv);\n      }\n    `:`\n    float ${n}(int index) {\n      vec2 uv = uvFromFlat(${a}, ${r}, index + ${i});\n      return sampleTexture(${t}, uv);\n    }\n  `}(e);case 2:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),a=e.shapeInfo.texShape;if(null!=a&&r.util.arraysEqual(t,a)){const e=a[0];return`\n    float ${s}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${a[1]}.0, ${e}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `}const{newShape:i,keptDims:o}=r.util.squeezeShape(t),l=i;if(l.length<t.length){const t=["row","col"];return`\n      ${qe(st(e,l))}\n      float ${s}(int row, int col) {\n        return ${s}(${at(t,o)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${t[1]}, 1)));\n        ${tt(e)}\n      }\n    `;const u=a[0],c=a[1],h=et(n);return 1===c?`\n    float ${s}(int row, int col) {\n      float index = dot(vec3(row, col, ${h}), vec3(${t[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${u}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `:1===u?`\n    float ${s}(int row, int col) {\n      float index = dot(vec3(row, col, ${h}), vec3(${t[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${c}.0, 0.5);\n      return sampleTexture(${n}, uv);\n    }\n  `:`\n  float ${s}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${t[1]} + col + ${h};\n    vec2 uv = uvFromFlat(${u}, ${c}, index);\n    return sampleTexture(${n}, uv);\n  }\n`}(e);case 3:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),a=t[1]*t[2],i=t[2],{newShape:o,keptDims:l}=r.util.squeezeShape(t),u=o;if(u.length<t.length){const t=["row","col","depth"];return`\n        ${qe(st(e,u))}\n        float ${s}(int row, int col, int depth) {\n          return ${s}(${at(t,l)});\n        }\n      `}if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${a}, ${i}, 1)));\n        ${tt(e)}\n      }\n    `;const c=e.shapeInfo.texShape,h=c[0],p=c[1],d=e.shapeInfo.flatOffset;if(p===a&&null==d)return`\n        float ${s}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${i}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${p}.0, ${h}.0);\n          return sampleTexture(${n}, uv);\n        }\n      `;if(p===i&&null==d)return`\n    float ${s}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${t[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${p}.0, ${h}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `;return`\n      float ${s}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${a} + col * ${i} + depth + ${et(n)};\n        vec2 uv = uvFromFlat(${h}, ${p}, index);\n        return sampleTexture(${n}, uv);\n      }\n  `}(e);case 4:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),a=t[3],i=t[2]*a,o=t[1]*i,{newShape:l,keptDims:u}=r.util.squeezeShape(t);if(l.length<t.length){const t=["row","col","depth","depth2"];return`\n      ${qe(st(e,l))}\n      float ${s}(int row, int col, int depth, int depth2) {\n        return ${s}(${at(t,u)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${o}, ${i}, ${a}, 1)));\n        ${tt(e)}\n      }\n    `;const c=e.shapeInfo.flatOffset,h=e.shapeInfo.texShape,p=h[0],d=h[1];if(d===o&&null==c)return`\n      float ${s}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${i}, ${a}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${d}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(d===a&&null==c)return`\n      float ${s}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${t[1]*t[2]}, ${t[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${d}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;return`\n    float ${s}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${o} + col * ${i} +\n          depth * ${a} + depth2;\n      vec2 uv = uvFromFlat(${p}, ${d}, index + ${et(n)});\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);case 5:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),a=t[4],i=t[3]*a,o=t[2]*i,l=t[1]*o,{newShape:u,keptDims:c}=r.util.squeezeShape(t);if(u.length<t.length){const t=["row","col","depth","depth2","depth3"];return`\n      ${qe(st(e,u))}\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        return ${s}(${at(t,c)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${l}, ${o}, ${i}, ${a})) +\n          depth3;\n        ${tt(e)}\n      }\n    `;const h=e.shapeInfo.flatOffset,p=e.shapeInfo.texShape,d=p[0],f=p[1];if(f===l&&null==h)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${o}, ${i}, ${a}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${f}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(f===a&&null==h)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]},\n               ${t[2]*t[3]}, ${t[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${f}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;return`\n    float ${s}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${l} + col * ${o} + depth * ${i} +\n          depth2 * ${a} + depth3 + ${et(n)};\n      vec2 uv = uvFromFlat(${d}, ${f}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);case 6:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),{newShape:a,keptDims:i}=r.util.squeezeShape(t);if(a.length<t.length){const t=["row","col","depth","depth2","depth3","depth4"];return`\n      ${qe(st(e,a))}\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${s}(${at(t,i)});\n      }\n    `}const o=t[5],l=t[4]*o,u=t[3]*l,c=t[2]*u,h=t[1]*c;if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${h}, ${c}, ${u}, ${l})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${o}, 1)));\n        ${tt(e)}\n      }\n    `;const p=e.shapeInfo.flatOffset,d=e.shapeInfo.texShape,f=d[0],m=d[1];if(m===h&&null==p)return`\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${c}, ${u}, ${l}, ${o})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${m}.0, ${f}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(m===o&&null==p)return`\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]*t[4]},\n               ${t[2]*t[3]*t[4]},\n               ${t[3]*t[4]},\n               ${t[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${m}.0, ${f}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;return`\n    float ${s}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${h} + col * ${c} + depth * ${u} +\n          depth2 * ${l} + depth3 * ${o} + depth4 + ${et(n)};\n      vec2 uv = uvFromFlat(${f}, ${m}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);default:throw new Error(`${t.length}-D input sampling is not yet supported`)}}function Ke(e){switch(e.shapeInfo.logicalShape.length){case 0:return function(e){const t=e.name;return`\n    vec4 ${"get"+t.charAt(0).toUpperCase()+t.slice(1)}() {\n      return ${de().texture2D}(${t}, halfCR);\n    }\n  `}(e);case 1:return function(e){const t=e.name,n="get"+t.charAt(0).toUpperCase()+t.slice(1),s=e.shapeInfo.texShape,a=[Math.ceil(s[0]/2),Math.ceil(s[1]/2)],r=de();return`\n    vec4 ${n}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${a[0]}, ${a[1]}, index);\n      return ${r.texture2D}(${t}, uv);\n    }\n  `}(e);case 2:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),a=e.shapeInfo.texShape,i=a[0],o=a[1],l=de();if(null!=a&&r.util.arraysEqual(t,a))return`\n      vec4 ${s}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${o}.0, ${i}.0);\n\n        return ${l.texture2D}(${n}, uv);\n      }\n    `;const u=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)];return`\n    vec4 ${s}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${Math.ceil(t[1]/2)}, ${u[0]}, ${u[1]}, row, col);\n      return ${l.texture2D}(${n}, uv);\n    }\n  `}(e);case 3:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),a=e.shapeInfo.texShape,r=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)];if(1===t[0]){const n=[1,2],a=["b","row","col"];return`\n        ${Ke(st(e,t.slice(1)))}\n        vec4 ${s}(int b, int row, int col) {\n          return ${s}(${at(a,n)});\n        }\n      `}const i=r[0],o=r[1],l=Math.ceil(t[2]/2);return`\n    vec4 ${s}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${i}, ${o}, ${l*Math.ceil(t[1]/2)}, ${l}, b, row, col);\n      return ${de().texture2D}(${n}, uv);\n    }\n  `}(e);default:return function(e){const t=e.shapeInfo.logicalShape,n=t.length,s=e.name,a="get"+s.charAt(0).toUpperCase()+s.slice(1),r=e.shapeInfo.texShape,i=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)],o=i[0],l=i[1],u=Math.ceil(t[n-1]/2);let c=u*Math.ceil(t[n-2]/2),h="int b, int row, int col",p=`b * ${c} + (row / 2) * ${u} + (col / 2)`;for(let e=2;e<n-1;e++)h=`int b${e}, `+h,c*=t[n-e-1],p=`b${e} * ${c} + `+p;return`\n    vec4 ${a}(${h}) {\n      int index = ${p};\n      int texR = index / ${l};\n      int texC = index - texR * ${l};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${l}, ${o});\n      return ${de().texture2D}(${s}, uv);\n    }\n  `}(e)}}const Ye="\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",Qe="\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",Je="\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",Ze="\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";function et(e){return`offset${e}`}function tt(e){const t=e.name,n=r.util.sizeFromShape(e.shapeInfo.logicalShape);return n<2?`return ${t};`:`\n    for (int i = 0; i < ${n}; i++) {\n      if (i == index) {\n        return ${t}[i];\n      }\n    }\n  `}function nt(e){if(e<=1)return"int";if(2===e)return"ivec2";if(3===e)return"ivec3";if(4===e)return"ivec4";if(5===e)return"ivec5";if(6===e)return"ivec6";throw Error(`GPU for rank ${e} is not yet supported`)}function st(e,t){const n=JSON.parse(JSON.stringify(e));return n.shapeInfo.logicalShape=t,n}function at(e,t){return t.map((t=>e[t])).join(", ")}function rt(e,t){if(e.length!==t.length)throw Error(`Binary was compiled with ${e.length} inputs, but was executed with ${t.length} inputs`);e.forEach(((e,n)=>{const s=e.logicalShape,a=t[n],i=a.shape;if(!r.util.arraysEqual(s,i))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${s} and ${i} must match`);if(e.isUniform&&a.isUniform)return;const o=e.texShape,l=a.isUniform?null:a.texData.texShape;if(!r.util.arraysEqual(o,l))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${o} and ${l} must match`)}))}var it=n(5226);const{addImpl:ot,bincountImpl:lt,bincountReduceImpl:ut,ceilImpl:ct,concatImpl:ht,expImpl:pt,expm1Impl:dt,floorImpl:ft,gatherV2Impl:mt,greaterImpl:gt,lessImpl:yt,linSpaceImpl:bt,logImpl:xt,maxImpl:vt,maximumImpl:kt,minimumImpl:wt,multiplyImpl:Nt,negImpl:It,prodImpl:St,rangeImpl:Tt,rsqrtImpl:Ct,simpleAbsImpl:$t,sliceImpl:At,stridedSliceImpl:Et,subImpl:_t,tileImpl:Rt,topKImpl:Ft,transposeImpl:Dt,uniqueImpl:Ot}=it;function Mt(e,t){return["x","y","z","w","u","v"].slice(0,t).map((t=>`${e}.${t}`))}function zt(e,t){return 1===t?[e]:Mt(e,t)}class Lt{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=e;const t=e.length;if(0===t)this.userCode="\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";else{const n=zt("rc",t),s=nt(t),a=function(e,t,n){if(1===e)return`rc > ${t[0]}`;let s="";for(let a=e-2;a<e;a++)s+=`${n[a]} >= ${t[a]}`,a<e-1&&(s+="||");return s}(t,e,n),r=function(e,t,n,s){if(1===e)return"";const a=s.slice(-2);return`\n    int r = ${a[0]};\n    int c = ${a[1]};\n    int rp1 = r + 1;\n    int cp1 = c + 1;\n\n    bool cEdge = cp1 >= ${t};\n    bool rEdge = rp1 >= ${n};\n  `}(t,e[e.length-1],e[e.length-2],n),i=function(e,t){const n=e.length,s=function(e,t){const n=[];for(let s=0;s<=1;s++)for(let a=0;a<=1;a++){let r=`${0===s?"r":"rp1"}, ${0===a?"c":"cp1"}`;for(let n=2;n<e;n++)r=`${t[t.length-1-n]},`+r;n.push(r)}return n}(n,t);return 1===n?`getA(rc),\n            rc + 1 >= ${e[0]} ? 0. : getA(rc + 1),\n            0, 0`:`getA(${s[0]}),\n          cEdge ? 0. : getA(${s[1]}),\n          rEdge ? 0. : getA(${s[2]}),\n          rEdge || cEdge ? 0. : getA(${s[3]})`}(e,n);this.userCode=`\n        void main() {\n          ${s} rc = getOutputCoords();\n\n          if(${a}) {\n            setOutput(vec4(0));\n          } else {\n            ${r}\n\n            setOutput(vec4(${i}));\n          }\n        }\n      `}}}class Bt{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e;let n="";for(let e=0;e<4;e++){let t="thisRC = rc;";e%2==1&&(t+="thisRC.z += 1;"),e>1&&(t+="thisRC.y += 1;"),n+=`\n        ${t}\n        ${e>0?"if(thisRC.y < rows && thisRC.z < cols){":""}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${e}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${e>0?"}":""}\n      `}var s;this.userCode=`\n      ${s=t,`\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${fe(["r","c","d"],s)}\n      return ivec3(r, c, d);\n    }\n  `}\n      ${me(e)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${e[1]};\n        int cols = ${e[2]};\n\n        ${n}\n\n        setOutput(result);\n      }\n    `}}class Pt{constructor(e){this.gpgpu=e,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.logEnabled=!1,this.usedTextures={}}acquireTexture(e,t,n){const s=Wt(t,n),a=Ut(e,s,n);a in this.freeTextures||(this.freeTextures[a]=[]),a in this.usedTextures||(this.usedTextures[a]=[]);const r=Vt(e,s,this.gpgpu.gl,this.gpgpu.textureConfig,n);if(this.freeTextures[a].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=r,this.log();const e=this.freeTextures[a].shift();return this.usedTextures[a].push(e),e}let i;return s===p.PACKED_2X2_FLOAT32?i=this.gpgpu.createPackedMatrixTexture(e[0],e[1]):s===p.PACKED_2X2_FLOAT16?i=this.gpgpu.createFloat16PackedMatrixTexture(e[0],e[1]):s===p.UNPACKED_FLOAT32?i=this.gpgpu.createFloat32MatrixTexture(e[0],e[1]):s===p.UNPACKED_FLOAT16?i=this.gpgpu.createFloat16MatrixTexture(e[0],e[1]):s===p.PACKED_4X1_UNSIGNED_BYTE&&(i=this.gpgpu.createUnsignedBytesMatrixTexture(e[0],e[1])),this.usedTextures[a].push(i),this.numUsedTextures++,this._numBytesAllocated+=r,this.log(),i}releaseTexture(e,t,n,s){if(null==this.freeTextures)return;const a=Wt(n,s),i=Ut(t,a,s);i in this.freeTextures||(this.freeTextures[i]=[]);const o=Vt(t,a,this.gpgpu.gl,this.gpgpu.textureConfig,s),l=(0,r.env)().get("WEBGL_DELETE_TEXTURE_THRESHOLD");-1!==l&&this._numBytesAllocated>l?(this.gpgpu.deleteMatrixTexture(e),this._numBytesAllocated-=o):(this.freeTextures[i].push(e),this.numFreeTextures++,this._numBytesFree+=o),this.numUsedTextures--;const u=this.usedTextures[i],c=u.indexOf(e);if(c<0)throw new Error("Cannot release a texture that was never provided by this texture manager");u.splice(c,1),this.log()}log(){if(!this.logEnabled)return;const e=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${e})`);const t=this._numBytesFree/this._numBytesAllocated;console.log(`Bytes allocated: ${this._numBytesAllocated}`),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*t)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(null!=this.freeTextures){for(const e in this.freeTextures)this.freeTextures[e].forEach((e=>{this.gpgpu.deleteMatrixTexture(e)}));for(const e in this.usedTextures)this.usedTextures[e].forEach((e=>{this.gpgpu.deleteMatrixTexture(e)}));this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}}function Vt(e,t,n,s,a){const r=function(e,t){switch(e){case p.PACKED_2X2_FLOAT32:return Fe(t);case p.PACKED_2X2_FLOAT16:return Oe(t);case p.UNPACKED_FLOAT32:return Ce(t);case p.UNPACKED_FLOAT16:return Ae(t);case p.PACKED_4X1_UNSIGNED_BYTE:return _e(t);default:throw new Error(`Unknown physical texture type ${e}`)}}(t,s);let i;if(a){const[t,n]=m(e[0],e[1]);i=t*n}else{const[t,n]=d(e[0],e[1]);i=t*n}return i*function(e,t){const n=e;if(t===n.R32F)return 4;if(t===n.R16F)return 2;if(t===n.RGBA32F)return 16;if(t===e.RGBA)return 16;if(t===n.RGBA16F)return 8;throw new Error(`Unknown internal format ${t}`)}(n,r)}function Wt(e,t){if(e===h.UPLOAD)return p.PACKED_2X2_FLOAT32;if(e===h.RENDER||null==e)return function(e){return(0,r.env)().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?e?p.PACKED_2X2_FLOAT32:p.UNPACKED_FLOAT32:e?p.PACKED_2X2_FLOAT16:p.UNPACKED_FLOAT16}(t);if(e===h.DOWNLOAD||e===h.PIXELS)return p.PACKED_4X1_UNSIGNED_BYTE;throw new Error(`Unknown logical texture type ${e}`)}function Ut(e,t,n){return`${e[0]}_${e[1]}_${t}_${n}`}class Gt{constructor(e,t){this.variableNames=["A"],this.outputShape=e,this.userCode=`\n      float unaryOperation(float x) {\n        ${t}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}const Ht="return abs(x);",jt="return x;";class Xt{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.userCode=`\n      vec4 unaryOperation(vec4 x) {\n        ${t}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}class qt{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=e;const t=e.length,n=zt("rc",t),s=nt(t),a=function(e,t){if(1===e)return"rc";let n="";for(let s=0;s<e;s++)n+=t[s],s<e-1&&(n+=",");return n}(t,n),r=n.slice(-2),i=t<=1?"rc":`vec2(${r.join(",")})`;this.userCode=`\n      void main() {\n        ${s} rc = getOutputCoords();\n        vec4 packedInput = getA(${a});\n\n        setOutput(getChannel(packedInput, ${i}));\n      }\n    `}}const Kt=r.kernel_impls.whereImpl,Yt={};class Qt extends r.KernelBackend{constructor(e){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.lastGlFlushTime=0,this.warnedAboutMemory=!1,this.warnedAboutCPUBackend=!1,this.pendingDeletes=0,this.disposed=!1,!(0,r.env)().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");if(null==e){const e=u((0,r.env)().getNumber("WEBGL_VERSION"));this.binaryCache=((t=(0,r.env)().getNumber("WEBGL_VERSION"))in Yt||(Yt[t]={}),Yt[t]),this.gpgpu=new He(e),this.canvas=e.canvas,this.gpgpuCreatedLocally=!0}else this.gpgpu=e,this.binaryCache={},this.gpgpuCreatedLocally=!1,this.canvas=e.gl.canvas;var t;this.textureManager=new Pt(this.gpgpu),this.numMBBeforeWarning=null==(0,r.env)().global.screen?1024:(0,r.env)().global.screen.height*(0,r.env)().global.screen.width*window.devicePixelRatio*600/1024/1024,this.texData=new r.DataStorage(this,(0,r.engine)())}nextDataId(){return Qt.nextDataId++}numDataIds(){return this.texData.numDataIds()+(this.cpuBackend?this.cpuBackend.numDataIds():0)-this.pendingDeletes}write(e,t,n){if(((0,r.env)().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||(0,r.env)().getBool("DEBUG"))&&this.checkNumericalProblems(e),"complex64"===n&&null!=e)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");const s={id:this.nextDataId()};return this.texData.set(s,{shape:t,dtype:n,values:e,usage:h.UPLOAD,refCount:1}),s}refCount(e){return this.texData.has(e)?this.texData.get(e).refCount:0}incRef(e){this.texData.get(e).refCount++}decRef(e){this.texData.has(e)&&this.texData.get(e).refCount--}move(e,t,n,s,a){if((0,r.env)().getBool("DEBUG")&&this.checkNumericalProblems(t),"complex64"===s)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(e,{shape:n,dtype:s,values:t,usage:h.UPLOAD,refCount:a})}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}readSync(e){const t=this.texData.get(e),{values:n,dtype:s,complexTensorInfos:a,slice:i,shape:o,isPacked:l}=t;if(null!=i){let t;t=l?new Xt(o,jt):new Gt(o,jt);const n=this.runWebGLProgram(t,[{dataId:e,shape:o,dtype:s}],s),a=this.readSync(n.dataId);return this.disposeIntermediateTensorInfo(n),a}if(null!=n)return this.convertAndCacheOnCPU(e);if("string"===s)return n;const u=null!=this.activeTimers;let c,h;if(u&&(c=r.util.now()),"complex64"===s){const e=this.readSync(a.real.dataId),t=this.readSync(a.imag.dataId);h=r.backend_util.mergeRealAndImagArrays(e,t)}else h=this.getValuesFromTexture(e);return u&&(this.downloadWaitMs+=r.util.now()-c),this.convertAndCacheOnCPU(e,h)}async read(e){if(this.pendingRead.has(e)){const t=this.pendingRead.get(e);return new Promise((e=>t.push(e)))}const t=this.texData.get(e),{values:n,shape:s,slice:a,dtype:i,complexTensorInfos:o,isPacked:l}=t;if(null!=a){let t;t=l?new Xt(s,jt):new Gt(s,jt);const n=this.runWebGLProgram(t,[{dataId:e,shape:s,dtype:i}],i),a=this.read(n.dataId);return this.disposeIntermediateTensorInfo(n),a}if(null!=n)return this.convertAndCacheOnCPU(e);if(!(0,r.env)().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===(0,r.env)().getNumber("WEBGL_VERSION"))throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let u,c,h=null;if("complex64"!==i&&(0,r.env)().get("WEBGL_BUFFER_SUPPORTED")){u=this.decode(e);const t=this.texData.get(u.dataId);h=this.gpgpu.createBufferFromTexture(t.texture,...f(s))}if(this.pendingRead.set(e,[]),"complex64"!==i&&await this.gpgpu.createAndWaitForFence(),"complex64"===i){const e=await Promise.all([this.read(o.real.dataId),this.read(o.imag.dataId)]),t=e[0],n=e[1];c=r.backend_util.mergeRealAndImagArrays(t,n)}else if(null==h)c=this.getValuesFromTexture(e);else{const e=r.util.sizeFromShape(s);c=this.gpgpu.downloadFloat32MatrixFromBuffer(h,e)}null!=u&&this.disposeIntermediateTensorInfo(u);const p=this.convertAndCacheOnCPU(e,c),d=this.pendingRead.get(e);return this.pendingRead.delete(e),d.forEach((e=>e(p))),this.pendingDisposal.has(e)&&(this.pendingDisposal.delete(e),this.disposeData(e)&&(0,r.engine)().removeDataId(e,this),this.pendingDeletes--),p}bufferSync(e){const t=this.readSync(e.dataId);let n=t;if("string"===e.dtype)try{n=t.map((e=>r.util.decodeString(e)))}catch(e){throw new Error("Failed to decode encoded string bytes into utf-8")}return(0,r.buffer)(e.shape,e.dtype,n)}checkNumericalProblems(e){if(null!=e)for(let t=0;t<e.length;t++){const n=e[t];if(!b(n)){if((0,r.env)().getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))throw Error(`The value ${n} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);throw Error(`The value ${n} cannot be represented on this device.`)}}}getValuesFromTexture(e){const{shape:t,dtype:n,isPacked:s}=this.texData.get(e),a=r.util.sizeFromShape(t);if((0,r.env)().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){const n=this.decode(e),s=this.texData.get(n.dataId),r=this.gpgpu.downloadMatrixFromPackedTexture(s.texture,...f(t)).subarray(0,a);return this.disposeIntermediateTensorInfo(n),r}const i=(0,r.env)().getBool("WEBGL_PACK")&&!0===s,o=i?q(t):t,l=i?new ve(o):new xe(o),u=this.runWebGLProgram(l,[{shape:o,dtype:n,dataId:e}],"float32"),c=this.texData.get(u.dataId),h=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(c.texture,c.texShape[0],c.texShape[1]).subarray(0,a);return this.disposeIntermediateTensorInfo(u),h}timerAvailable(){return(0,r.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0}async time(e){const t=this.activeTimers,n=[];let s=!1;null==this.programTimersStack?(this.programTimersStack=n,s=!0):this.activeTimers.push(n),this.activeTimers=n,e();const a=r.util.flatten(this.activeTimers.map((e=>e.query))).filter((e=>null!=e)),i=r.util.flatten(this.activeTimers.map((e=>e.name))).filter((e=>null!=e));this.activeTimers=t,s&&(this.programTimersStack=null);const o={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};if((0,r.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){const e=await Promise.all(a);o.kernelMs=r.util.sum(e),o.getExtraProfileInfo=()=>e.map(((e,t)=>({name:i[t],ms:e}))).map((e=>`${e.name}: ${e.ms}`)).join(", ")}else o.kernelMs={error:"WebGL query timers are not supported in this environment."};return this.uploadWaitMs=0,this.downloadWaitMs=0,o}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return(0,r.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:r.util.now(),endMs:null}}endTimer(e){return(0,r.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),e):(e.endMs=r.util.now(),e)}async getQueryTime(e){if((0,r.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0)return this.gpgpu.waitForQueryAndGetTime(e);const t=e;return t.endMs-t.startMs}disposeData(e,t=!1){if(this.pendingDisposal.has(e))return!1;if(!this.texData.has(e))return!0;if(t?this.texData.get(e).refCount=0:this.texData.get(e).refCount--,!t&&this.texData.get(e).refCount>0)return!1;if(this.pendingRead.has(e))return this.pendingDisposal.add(e),this.pendingDeletes++,!1;this.releaseGPUData(e);const{complexTensorInfos:n}=this.texData.get(e);return null!=n&&(this.disposeData(n.real.dataId,t),this.disposeData(n.imag.dataId,t)),this.texData.delete(e),!0}releaseGPUData(e){const{texture:t,dtype:n,texShape:s,usage:a,isPacked:r,slice:i}=this.texData.get(e),o=i&&i.origDataId||e,l=this.dataRefCount.get(o);l>1?this.dataRefCount.set(o,l-1):(this.dataRefCount.delete(o),null!=t&&(this.numBytesInGPU-=this.computeBytes(s,n),this.textureManager.releaseTexture(t,s,a,r)));const u=this.texData.get(e);u.texture=null,u.texShape=null,u.isPacked=!1,u.slice=null}getTexture(e){return this.uploadToGPU(e),this.texData.get(e).texture}getDataInfo(e){return this.texData.get(e)}getCPUBackend(){return(0,r.env)().getBool("WEBGL_CPU_FORWARD")?(null==this.cpuBackend&&(this.cpuBackend=(0,r.engine)().findBackend("cpu")),this.cpuBackend):null}shouldExecuteOnCPU(e,t=128){const n=this.getCPUBackend();return(0,r.env)().getBool("IS_TEST")||this.warnedAboutCPUBackend||null!=n||(console.warn("Your application contains ops that are small enough to be executed on the CPU backend, however the CPU backend cannot be found. Consider importing the CPU backend (@tensorflow/tfjs-backend-cpu) for better performance."),this.warnedAboutCPUBackend=!0),null!=n&&e.every((e=>null==this.texData.get(e.dataId).texture&&r.util.sizeFromShape(e.shape)<t))}getGPGPUContext(){return this.gpgpu}where(e){r.backend_util.warn("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");const t=e.dataSync();return Kt(e.shape,t)}packedUnaryOp(e,t,n){const s=new Xt(e.shape,t),a=this.compileAndRun(s,[e],n);return(0,r.engine)().makeTensorFromDataId(a.dataId,a.shape,a.dtype)}abs(e){if(this.shouldExecuteOnCPU([e])&&"complex64"!==e.dtype){const t=$t(this.texData.get(e.dataId).values);return this.makeOutput(e.shape,e.dtype,t)}if((0,r.env)().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,Ht,e.dtype);const t=new Gt(e.shape,Ht),n=this.compileAndRun(t,[e]);return(0,r.engine)().makeTensorFromDataId(n.dataId,n.shape,n.dtype)}makeTensorInfo(e,t,n){let s;if("string"===t&&null!=n&&n.length>0&&r.util.isString(n[0])){const a=n.map((e=>r.util.encodeString(e)));s=this.write(a,e,t)}else s=this.write(n,e,t);return this.texData.get(s).usage=null,{dataId:s,shape:e,dtype:t}}makeOutput(e,t,n){const{dataId:s}=this.makeTensorInfo(e,t,n);return(0,r.engine)().makeTensorFromDataId(s,e,t,this)}unpackTensor(e){const t=new qt(e.shape);return this.runWebGLProgram(t,[e],e.dtype)}packTensor(e){const t=new Lt(e.shape);return this.runWebGLProgram(t,[e],e.dtype,null,!0)}packedReshape(e,t){const n=[j(e.shape),...X(e.shape)],s={dtype:e.dtype,shape:n,dataId:e.dataId},a=[j(t),...X(t)],r=new Bt(a,n),i=this.runWebGLProgram(r,[s],e.dtype,null,!0);return{dataId:i.dataId,shape:t,dtype:i.dtype}}decode(e){const t=this.texData.get(e),{isPacked:n,shape:s,dtype:a}=t,r=q(s);let i;return i=n?new be(r):new ye(r),{dtype:a,shape:s,dataId:this.runWebGLProgram(i,[{shape:r,dtype:a,dataId:e}],a,null,!0).dataId}}runWebGLProgram(e,t,n,s,a=!1){const i=this.makeTensorInfo(e.outputShape,n),o=this.texData.get(i.dataId);if(e.packedOutput&&(o.isPacked=!0),e.outPackingScheme===c.DENSE){const t=f(e.outputShape);o.texShape=t.map((e=>2*e))}if(null!=e.outTexUsage&&(o.usage=e.outTexUsage),0===r.util.sizeFromShape(i.shape))return o.values=r.util.getTypedArrayFromDType(i.dtype,0),i;const l=[],u=t.map((t=>{if("complex64"===t.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let n=this.texData.get(t.dataId);if(null==n.texture){if(!e.packedInputs&&r.util.sizeFromShape(t.shape)<=(0,r.env)().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:t.shape,texData:null,isUniform:!0,uniformValues:n.values};e.packedInputs&&(n.isPacked=!0,n.shape=t.shape)}else if(!!n.isPacked!=!!e.packedInputs)t=n.isPacked?this.unpackTensor(t):this.packTensor(t),l.push(t),n=this.texData.get(t.dataId);else if(n.isPacked&&!Q(n.shape,t.shape)){const e=t,s=t.shape;t.shape=n.shape,t=this.packedReshape(t,s),l.push(t),n=this.texData.get(t.dataId),e.shape=s}return this.uploadToGPU(t.dataId),{shape:t.shape,texData:n,isUniform:!1}}));this.uploadToGPU(i.dataId);const h={shape:i.shape,texData:o,isUniform:!1},p=function(e,t,n){let s="";t.concat(n).forEach((e=>{const t=null!=e.texData&&null!=e.texData.slice&&e.texData.slice.flatOffset>0,n=e.isUniform?"uniform":e.texData.texShape;s+=`${e.shape}_${n}_${t}`}));const a=e.userCode;let r=e.constructor.name;return r+="_"+s+"_"+a,r}(e,u,h),d=this.getAndSaveBinary(p,(()=>function(e,t,n,s){const a=t.userCode,i=n.map(((e,n)=>{const s={logicalShape:e.shape,texShape:e.isUniform?null:e.texData.texShape,isUniform:e.isUniform,isPacked:!e.isUniform&&e.texData.isPacked,flatOffset:null};return null!=e.texData&&null!=e.texData.slice&&e.texData.slice.flatOffset>0&&(s.flatOffset=e.texData.slice.flatOffset),{name:t.variableNames[n],shapeInfo:s}})),o=i.map((e=>e.shapeInfo)),l={logicalShape:s.shape,texShape:s.texData.texShape,isUniform:!1,isPacked:s.texData.isPacked,flatOffset:null},u=Xe(i,l,a,t.packedInputs),c=e.createProgram(u);let h=null;const p=e.getUniformLocation(c,"NAN",!1);1===(0,r.env)().getNumber("WEBGL_VERSION")&&(h=e.getUniformLocation(c,"INFINITY",!1));const d={};for(let n=0;n<t.variableNames.length;n++){const s=t.variableNames[n],a=!1;d[s]=e.getUniformLocation(c,s,a),d[`offset${s}`]=e.getUniformLocation(c,`offset${s}`,a)}return{program:t,source:u,webGLProgram:c,uniformLocations:d,inShapeInfos:o,outShapeInfo:l,infLoc:h,nanLoc:p}}(this.gpgpu,e,u,h))),m=null!=this.activeTimers;let g;m&&(g=this.startTimer()),function(e,t,n,s,a){rt(t.inShapeInfos,n),rt([t.outShapeInfo],[s]);const i=s.texData.texture,o=s.texData.texShape;s.texData.isPacked?e.setOutputPackedMatrixTexture(i,o[0],o[1]):e.setOutputMatrixTexture(i,o[0],o[1]),e.setProgram(t.webGLProgram),1===(0,r.env)().getNumber("WEBGL_VERSION")&&null!==t.infLoc&&e.gl.uniform1f(t.infLoc,1/0),null!==t.nanLoc&&e.gl.uniform1f(t.nanLoc,NaN),n.forEach(((n,s)=>{const a=t.program.variableNames[s],i=t.uniformLocations[a],o=t.uniformLocations[`offset${a}`];if(null!=i)if(n.isUniform)if(r.util.sizeFromShape(n.shape)<2)e.gl.uniform1f(i,n.uniformValues[0]);else{let t=n.uniformValues;t instanceof Float32Array||(t=new Float32Array(t)),e.gl.uniform1fv(i,t)}else null!=n.texData.slice&&null!=o&&e.gl.uniform1i(o,n.texData.slice.flatOffset),e.setInputMatrixTexture(n.texData.texture,i,s)})),null!=a&&a(e,t.webGLProgram),e.executeProgram()}(this.gpgpu,d,u,h,s),l.forEach((e=>this.disposeIntermediateTensorInfo(e))),m&&(g=this.endTimer(g),this.activeTimers.push({name:e.constructor.name,query:this.getQueryTime(g)}));const y=(0,r.env)().get("WEBGL_FLUSH_THRESHOLD");if(y>0){const e=r.util.now();e-this.lastGlFlushTime>y&&(this.gpgpu.gl.flush(),this.lastGlFlushTime=e)}if(!(0,r.env)().getBool("WEBGL_LAZILY_UNPACK")&&o.isPacked&&!1===a){const e=this.unpackTensor(i);return this.disposeIntermediateTensorInfo(i),e}return i}compileAndRun(e,t,n,s,a=!1){return n=n||t[0].dtype,this.runWebGLProgram(e,t,n,s,a)}getAndSaveBinary(e,t){return e in this.binaryCache||(this.binaryCache[e]=t()),this.binaryCache[e]}getTextureManager(){return this.textureManager}dispose(){this.disposed||((0,r.env)().getBool("IS_TEST")||Object.keys(this.binaryCache).forEach((e=>{this.gpgpu.deleteProgram(this.binaryCache[e].webGLProgram),delete this.binaryCache[e]})),this.textureManager.dispose(),null!=this.canvas&&"undefined"!=typeof HTMLCanvasElement&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0)}floatPrecision(){return null==this.floatPrecisionValue&&(this.floatPrecisionValue=(0,r.tidy)((()=>{if(!(0,r.env)().get("WEBGL_RENDER_FLOAT32_ENABLED")){const e=(0,r.env)().getBool("DEBUG");(0,r.env)().set("DEBUG",!1);const t=this.abs((0,r.scalar)(1e-8)).dataSync()[0];if((0,r.env)().set("DEBUG",e),t>0)return 32}return 16}))),this.floatPrecisionValue}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}uploadToGPU(e){const t=this.texData.get(e),{shape:n,dtype:s,values:a,texture:i,usage:o,isPacked:l}=t;if(null!=i)return;const u=null!=this.activeTimers;let c;u&&(c=r.util.now());let p=t.texShape;if(null==p&&(p=K(n,l),t.texShape=p),null!=a){const e=q(n);let i,o=p[1],d=p[0];const f=a instanceof Uint8Array;l?([o,d]=m(p[0],p[1]),i=new we(e,[d,o],f)):i=new ke(e,[d,o],f);const g=this.makeTensorInfo([d,o],s);this.texData.get(g.dataId).usage=f?h.PIXELS:h.UPLOAD,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(g.dataId),o,d,a);const y=!0,b=this.runWebGLProgram(i,[g],s,null,y),x=this.texData.get(b.dataId);t.texture=x.texture,t.texShape=x.texShape,t.isPacked=x.isPacked,t.usage=x.usage,this.disposeIntermediateTensorInfo(g),this.texData.delete(b.dataId),t.values=null,u&&(this.uploadWaitMs+=r.util.now()-c)}else{const e=this.acquireTexture(p,o,s,l);t.texture=e}}convertAndCacheOnCPU(e,t){const n=this.texData.get(e),{dtype:s}=n;return this.releaseGPUData(e),null!=t&&(n.values=function(e,t){if("float32"===t||"complex64"===t)return e;if("int32"===t||"bool"===t){const n="int32"===t?new Int32Array(e.length):new Uint8Array(e.length);for(let t=0;t<n.length;++t)n[t]=Math.round(e[t]);return n}throw new Error(`Unknown dtype ${t}`)}(t,s)),n.values}acquireTexture(e,t,n,s){if(this.numBytesInGPU+=this.computeBytes(e,n),!this.warnedAboutMemory&&this.numBytesInGPU>1024*this.numMBBeforeWarning*1024){const e=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${e} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(e,t,s)}computeBytes(e,t){return e[0]*e[1]*r.util.bytesPerElement(t)}}Qt.nextDataId=0;const Jt="3.3.0";function Zt(){(0,r.env)().set("WEBGL_FORCE_F16_TEXTURES",!0)}r.device_util.isBrowser()&&(0,r.registerBackend)("webgl",(()=>new Qt),2);const en={forceHalfFloat:Zt};class tn{constructor(e,t,n){this.variableNames=["A","B"],this.outputShape=r.backend_util.assertAndGetBroadcastShape(t,n),this.userCode=`\n      float binaryOperation(float a, float b) {\n        ${e}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `}}class nn{constructor(e,t,n,s=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=r.backend_util.assertAndGetBroadcastShape(t,n);const a=this.outputShape.length;let i="";if(s)if(0===a||1===r.util.sizeFromShape(this.outputShape))i="\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";else if(i=`\n          ${nt(a)} coords = getOutputCoords();\n        `,1===a)i+=`\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;else{const e=zt("coords",a);i+=`\n            bool nextRowOutOfBounds =\n              (${e[a-2]} + 1) >= ${this.outputShape[a-2]};\n            bool nextColOutOfBounds =\n              (${e[a-1]} + 1) >= ${this.outputShape[a-1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `}this.userCode=`\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${e}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${i}\n\n        setOutput(result);\n      }\n    `}}function sn(e){const{inputs:t,backend:n}=e,{x:s}=t;return n.incRef(s.dataId),{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}const an={kernelName:r.Identity,backendName:"webgl",kernelFunc:sn};function rn(e){const{inputs:t,backend:n}=e,{real:s,imag:a}=t,r=n.makeTensorInfo(s.shape,"complex64"),i=n.texData.get(r.dataId),o=sn({inputs:{x:s},backend:n}),l=sn({inputs:{x:a},backend:n});return i.complexTensorInfos={real:o,imag:l},r}const on={kernelName:r.Complex,backendName:"webgl",kernelFunc:rn},ln="return (a < 0.) ? b * a : a;",un="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n",cn={kernelName:r.LeakyRelu,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{alpha:i}=s,o=n.makeTensorInfo([],"float32",r.util.createScalarValue(i,"float32")),l=(0,r.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new nn(un,a.shape,o.shape):new tn(ln,a.shape,o.shape),u=n.runWebGLProgram(l,[a,o],a.dtype);return n.disposeIntermediateTensorInfo(o),u}},hn="return (a < 0.) ? b * a : a;",pn="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n",dn={kernelName:r.Prelu,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s,alpha:a}=t,i=(0,r.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new nn(pn,s.shape,a.shape):new tn(hn,s.shape,a.shape);return n.runWebGLProgram(i,[s,a],s.dtype)}};function fn({opSnippet:e,packedOpSnippet:t,cpuKernelImpl:n,dtype:s}){return({inputs:a,backend:i})=>{const{x:o}=a,l=i,u=s||o.dtype;if(l.shouldExecuteOnCPU([o])&&null!=n){const e=l.texData.get(o.dataId),t=n(e.values,u);return l.makeTensorInfo(o.shape,u,t)}let c;return c=(0,r.env)().getBool("WEBGL_PACK_UNARY_OPERATIONS")&&null!=t?new Xt(o.shape,t):new Gt(o.shape,e),l.runWebGLProgram(c,[o],u)}}function mn({opSnippet:e,packedOpSnippet:t,checkOutOfBounds:n=!1,supportsComplex:s=!1,cpuKernelImpl:a,dtype:i}){return({inputs:o,backend:l})=>{const{a:u,b:c}=o,h=l;if(s&&"complex64"===u.dtype){const t=h.texData.get(u.dataId),n=h.texData.get(c.dataId),[s,a]=[[t.complexTensorInfos.real,n.complexTensorInfos.real],[t.complexTensorInfos.imag,n.complexTensorInfos.imag]].map((t=>{const[n,s]=t,a={dataId:n.dataId,dtype:n.dtype,shape:u.shape},i={dataId:s.dataId,dtype:s.dtype,shape:c.shape},o=new tn(e,u.shape,c.shape);return h.runWebGLProgram(o,[a,i],(0,r.upcastType)(n.dtype,s.dtype))})),i=rn({inputs:{real:s,imag:a},backend:h});return h.disposeIntermediateTensorInfo(s),h.disposeIntermediateTensorInfo(a),i}const p=i||(0,r.upcastType)(u.dtype,c.dtype);if(h.shouldExecuteOnCPU([u,c])&&null!=a){const e=h.texData.get(u.dataId),t=h.texData.get(c.dataId),[n,s]=a(u.shape,c.shape,e.values,t.values,p),r=h.makeTensorInfo(s,p);return h.texData.get(r.dataId).values=n,r}let d;return d=(0,r.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&null!=t?new nn(t,u.shape,c.shape,n):new tn(e,u.shape,c.shape),h.runWebGLProgram(d,[u,c],p)}}function gn(e,t=!1){if("linear"===e)return"return x;";if("relu"===e)return t?"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n":"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : x;\n";if("elu"===e)return t?"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n":"return (x >= 0.0) ? x : (exp(x) - 1.0);";if("relu6"===e)return t?"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n":"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n";if("prelu"===e)return t?pn:hn;if("leakyrelu"===e)return t?un:ln;throw new Error(`Activation ${e} has not been implemented for the WebGL backend.`)}class yn{constructor(e,t,n,s=!1,a=!1,r=!1,i=null,o=!1,l=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=n;const u=s?e[1]:e[2],c=Math.ceil(u/2),h=s?"i * 2, rc.y":"rc.y, i * 2",p=a?"rc.z, i * 2":"i * 2, rc.z",d=s?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],f=a?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"];let m="",g="";i&&(m=o?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${i}\n        }`:l?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${i}\n        }`:`vec4 activation(vec4 x) {\n          ${i}\n        }`,g="result = activation(result);");const y=r?"result += getBiasAtOutCoords();":"";r&&this.variableNames.push("bias"),o&&this.variableNames.push("preluActivationWeights"),l&&this.variableNames.push("leakyreluAlpha");let b="rc.x",x="rc.x";e[0]<t[0]?b=`int(min(float(rc.x), ${e[0]-1}.))`:t[0]<e[0]&&(x=`int(min(float(rc.x), ${t[0]-1}.))`),this.userCode=`\n      ${m}\n\n      const float sharedDimension = ${c}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < ${c}; i++) {\n          int batchA = ${b};\n          int batchB = ${x};\n          vec4 a = getMatrixA(batchA, ${h});\n          vec4 b = getMatrixB(batchB, ${p});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${d[0]} * ${f[0]});\n          result += (${d[1]} * ${f[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${y}\n\n        ${g}\n\n        setOutput(result);\n      }\n    `}}class bn{constructor(e,t,n){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=r.backend_util.assertAndGetBroadcastShape(t,n),this.userCode=`\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${e}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `}}const xn="return a * b;";function vn(e){const{inputs:t,backend:n}=e,{a:s,b:a}=t,i=r.backend_util.upcastType(s.dtype,a.dtype);if("complex64"===s.dtype){const e=n.texData.get(s.dataId),t=n.texData.get(a.dataId),r=new bn("return areal * breal - aimag * bimag;",s.shape,a.shape),i=new bn("return areal * bimag + aimag * breal;",s.shape,a.shape),o=[{dataId:e.complexTensorInfos.real.dataId,dtype:e.complexTensorInfos.real.dtype,shape:s.shape},{dataId:e.complexTensorInfos.imag.dataId,dtype:e.complexTensorInfos.imag.dtype,shape:s.shape},{dataId:t.complexTensorInfos.real.dataId,dtype:t.complexTensorInfos.real.dtype,shape:a.shape},{dataId:t.complexTensorInfos.imag.dataId,dtype:t.complexTensorInfos.imag.dtype,shape:a.shape}],l=n.runWebGLProgram(r,o,"float32"),u=n.runWebGLProgram(i,o,"float32"),c=rn({inputs:{real:l,imag:u},backend:n});return n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(u),c}if(n.shouldExecuteOnCPU([s,a])){const e=n.texData.get(s.dataId),t=n.texData.get(a.dataId),[r,o]=Nt(s.shape,a.shape,e.values,t.values,i),l=n.makeTensorInfo(o,i);return n.texData.get(l.dataId).values=r,l}let o;return o=(0,r.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new nn(xn,s.shape,a.shape):new tn(xn,s.shape,a.shape),n.runWebGLProgram(o,[s,a],i)}const kn={kernelName:r.Multiply,backendName:"webgl",kernelFunc:vn};function wn(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{shape:i}=s,o=n,l=r.util.sizeFromShape(a.shape),u=r.util.inferFromImplicitShape(i,l),c=r.util.sizeFromShape(u);r.util.assert(l===c,(()=>`The new shape (${u}) has ${c} elements and the old shape (${a.shape}) has ${l} elements. The new shape and old shape must have the same number of elements.`));const h=o.texData.get(a.dataId);return!h.isPacked||Q(a.shape,u)||null!==h.texture&&Q(h.shape,u)?(o.incRef(a.dataId),{dataId:a.dataId,shape:u,dtype:a.dtype}):function(e,t,n){const s=[j(e.shape),...X(e.shape)],a={dtype:e.dtype,shape:s,dataId:e.dataId},r=[j(t),...X(t)],i=new Bt(r,s),o=n.runWebGLProgram(i,[a],e.dtype,null,!0);return{dataId:o.dataId,shape:t,dtype:o.dtype}}(a,u,o)}const Nn={kernelName:r.Reshape,backendName:"webgl",kernelFunc:wn};class In{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:s,inSize:a,outSize:i}=e;this.outputShape=[s,i];const o=4*Math.floor(n/4),l=n%4;let u="sumValue += dot(values, ones);";if(null!=t){const e=1/t;u=`sumValue += dot(values * ${r.util.isInt(e)?e.toPrecision(2):e}, ones);`}let c="";a%n>0&&(c=`\n        if (inIdx < 0 || inIdx >= ${a}) {\n          return 0.0;\n        }\n      `),this.userCode=`\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${c}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${o}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${u}\n        }\n\n        int inIdx = inOffset + ${o};\n        if (${1===l}) {\n          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);\n\n          ${u}\n        } else if (${2===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1), 0.0, 0.0);\n\n          ${u}\n        } else if (${3===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2), 0.0);\n\n          ${u}\n        }\n        setOutput(sumValue);\n      }\n    `}}class Sn{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:s,inSize:a,outSize:r}=e;this.outputShape=[s,r];let i="0.0",o="";"prod"===t?i="1.0":"min"===t?(i="1.0 / 1e-20",o="min"):"max"===t&&(i="-1.0 / 1e-20",o="max");let l=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"sum"===t?l="sumValue":"prod"===t?l="prodValue":"all"===t?l="allValue":"any"===t&&(l="anyValue");const u=4*Math.floor(n/4),c=n%4;let h=`\n      if (${"sum"===t}) {\n        sumValue += dot(values, ones);\n      } else if (${"prod"===t}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${o}(values, minMaxValue);\n      }\n    `,p="vec4";"all"===t?(i="1.0",h="\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ",p="bvec4"):"any"===t&&(i="0.0",h="\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ",p="bvec4");let d="";a%n>0&&(d=`\n        if (inIdx < 0 || inIdx >= ${a}) {\n          return initializationValue;\n        }\n      `),this.userCode=`\n      const float initializationValue = ${i};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${d}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        vec4 minMaxValue = vec4(${i});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${u}; i += 4) {\n          int inIdx = inOffset + i;\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${h}\n        }\n\n        int inIdx = inOffset + ${u};\n        if (${1===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${2===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${3===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${h}\n        }\n        setOutput(${l});\n      }\n    `}}function Tn(e,t,n,s){const a=function(e){const t=[];for(;0===t.length||1!==t[t.length-1].outSize;){const n=t.length?t[t.length-1].outSize:e[1],s=r.backend_util.computeOptimalWindowSize(n);t.push({inSize:n,windowSize:s,outSize:Math.ceil(n/s)})}return t}(e.shape);let i=e;for(let r=0;r<a.length;r++){const{inSize:o,windowSize:l,outSize:u}=a[r];let c,h;c="mean"===n?0===r?new In({windowSize:l,inSize:o,batchSize:e.shape[0],outSize:u},o):new In({windowSize:l,inSize:o,batchSize:e.shape[0],outSize:u}):new Sn({windowSize:l,inSize:o,batchSize:e.shape[0],outSize:u},n),h=i,i=s.runWebGLProgram(c,[i],t),h.dataId!==e.dataId&&s.disposeIntermediateTensorInfo(h)}return i}class Cn{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let s=0;s<n.length;s++)n[s]=e[t[s]];this.outputShape=n,this.rank=n.length;const s=nt(this.rank),a=function(e){const t=e.length;if(t>6)throw Error(`Transpose for rank ${t} is not yet supported`);const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],s=new Array(t);for(let t=0;t<e.length;t++)s[e[t]]=n[t];return s.join()}(t);this.userCode=`\n    void main() {\n      ${s} resRC = getOutputCoords();\n      setOutput(getA(${a}));\n    }\n    `}}class $n{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;const n=new Array(e.length);for(let s=0;s<n.length;s++)n[s]=e[t[s]];if(this.outputShape=n,this.rank=n.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);const s=nt(this.rank),a=Mt("rc",this.rank),r=new Array(this.rank);for(let e=0;e<t.length;e++)r[t[e]]=a[e];const i=`vec2(${r.slice(-2).join()})`,o=`++${a[this.rank-1]} < ${n[this.rank-1]}`,l=`getChannel(getA(${r.join()}), ${i})`;this.userCode=`\n    void main() {\n      ${s} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${l};\n      if(${o}) {\n        result[1] = ${l};\n      }\n      --${a[this.rank-1]};\n      if(++${a[this.rank-2]} < ${n[this.rank-2]}) {\n        result[2] = ${l};\n        if(${o}) {\n          result[3] = ${l};\n        }\n      }\n      setOutput(result);\n    }\n    `}}function An(e,t,n){const s=(0,r.env)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new $n(e.shape,t):new Cn(e.shape,t);return n.runWebGLProgram(s,[e],e.dtype)}function En(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:i,keepDims:o}=s;return function(e,t,n,s){const a=t,i=e.shape.length,o=r.util.parseAxisParam(a,e.shape);let l=o;const u=r.backend_util.getAxesPermutation(l,i),c=null!=u;let h=e;c&&(h=An(e,u,s),l=r.backend_util.getInnerMostAxes(l.length,i)),r.backend_util.assertAxesAreInnerMostDims("sum",l,i);const[p,d]=r.backend_util.computeOutAndReduceShapes(h.shape,l);let f=p;n&&(f=r.backend_util.expandShapeToKeepDim(p,o));const m=r.util.sizeFromShape(d),g=wn({inputs:{x:h},attrs:{shape:[r.util.sizeFromShape(e.shape)/m,m]},backend:s}),y=Tn(g,(0,r.sumOutType)(e.dtype),"sum",s),b=wn({inputs:{x:y},attrs:{shape:f},backend:s});return s.disposeIntermediateTensorInfo(g),s.disposeIntermediateTensorInfo(y),c&&s.disposeIntermediateTensorInfo(h),b}(a,i,o,n)}const _n={kernelName:r.Sum,backendName:"webgl",kernelFunc:En};function Rn(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{perm:r}=s,i=n,o=a.shape.length,l=new Array(o);for(let e=0;e<l.length;e++)l[e]=a.shape[r[e]];let u;if(i.shouldExecuteOnCPU([a])){const e=i.texData.get(a.dataId).values,t=Dt(e,a.shape,a.dtype,r,l);u=i.makeTensorInfo(l,a.dtype),i.texData.get(u.dataId).values=t}else u=An(a,r,i);return u}const Fn={kernelName:r.Transpose,backendName:"webgl",kernelFunc:Rn};function Dn({a:e,b:t,transposeA:n,transposeB:s,backend:a,bias:i=null,preluActivationWeights:o=null,leakyreluAlpha:l=0,activation:u=null}){const c=e.shape.length,h=t.shape.length,p=n?e.shape[c-2]:e.shape[c-1],d=s?t.shape[h-1]:t.shape[h-2],f=n?e.shape[c-1]:e.shape[c-2],m=s?t.shape[h-2]:t.shape[h-1],g=e.shape.slice(0,-2),y=t.shape.slice(0,-2),b=r.util.sizeFromShape(g),x=r.util.sizeFromShape(y),v=b===x||1===b||1===x;r.util.assert(c>=2&&h>=2&&v,(()=>`Error in matMul: the input batch dimensions must either be the same or at least one input batch dimension must be 1. Got input batch dimensions of (${g}) and (${y}).`));const k=(b>x?e.shape.slice(0,-2):t.shape.slice(0,-2)).concat([f,m]);r.util.assert(p===d,(()=>`Error in matMul: inner shapes (${p}) and (${d}) of Tensors with shapes ${e.shape} and ${t.shape} and transposeA=${n} and transposeB=${s} must match.`));const w=n?[b,p,f]:[b,f,p],N=s?[x,m,d]:[x,d,m],I=wn({inputs:{x:e},backend:a,attrs:{shape:w}}),S=wn({inputs:{x:t},backend:a,attrs:{shape:N}}),T=[I,S],C=Math.max(b,x),$=n?I.shape[1]:I.shape[2],A=null!=i,E=null!=o,_="leakyrelu"===u,R=null!=u?gn(u,!0):null;let F;if((1===f||1===m)&&$>1e3&&!1===(A||E||_||null!=R)){let e=I,t=S;n&&(e=Rn({inputs:{x:I},backend:a,attrs:{perm:[0,2,1]}}),T.push(e)),s&&(t=Rn({inputs:{x:S},backend:a,attrs:{perm:[0,2,1]}}),T.push(t));const r=1===m;let i=e;1!==m&&(i=wn({inputs:{x:e},backend:a,attrs:{shape:[C,$,1]}}),T.push(i));const o=1===m?2:1;let l=t;r&&(l=wn({inputs:{x:t},backend:a,attrs:{shape:[C,1,$]}}),T.push(l));const u=vn({inputs:{a:i,b:l},backend:a});F=En({inputs:{x:u},backend:a,attrs:{axis:o,keepDims:!0}}),T.push(u)}else{const u=(0,r.upcastType)(e.dtype,t.dtype),c=new yn(w,N,[C,f,m],n,s,A,R,E,_),h=[I,S];if(null!=i&&h.push(i),E&&h.push(o),_){const e=a.makeTensorInfo([],"float32",r.util.createScalarValue(l,"float32"));h.push(e),T.push(e)}F=a.runWebGLProgram(c,h,u)}const D=wn({inputs:{x:F},backend:a,attrs:{shape:k}});T.push(F);for(const e of T)a.disposeIntermediateTensorInfo(e);return D}const On={kernelName:r._FusedMatMul,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{a,b:r,bias:i,preluActivationWeights:o}=t,{transposeA:l,transposeB:u,activation:c,leakyreluAlpha:h}=s;return Dn({a,b:r,transposeA:l,transposeB:u,backend:n,bias:i,preluActivationWeights:o,leakyreluAlpha:h,activation:c})}},Mn="return abs(x);",zn={kernelName:r.Abs,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t;if(n.shouldExecuteOnCPU([s])&&"complex64"!==s.dtype){const e=n.texData.get(s.dataId),t=$t(e.values);return n.makeTensorInfo(s.shape,s.dtype,t)}let a;return a=(0,r.env)().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new Xt(s.shape,Mn):new Gt(s.shape,Mn),n.runWebGLProgram(a,[s],s.dtype)}},Ln=fn({opSnippet:"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n"}),Bn={kernelName:r.Acos,backendName:"webgl",kernelFunc:Ln},Pn=fn({opSnippet:"if (isnan(x)) return x;\n  if (x < 1.0) return NAN;\nreturn log(x + sqrt(x * x - 1.0));"}),Vn={kernelName:r.Acosh,backendName:"webgl",kernelFunc:Pn},Wn="return a + b;",Un=mn({opSnippet:Wn,packedOpSnippet:Wn,supportsComplex:!0,cpuKernelImpl:ot}),Gn={kernelName:r.Add,backendName:"webgl",kernelFunc:Un};class Hn{constructor(e,t){this.outputShape=[],this.outputShape=e,this.variableNames=t.map(((e,t)=>`T${t}`));const n=[];this.variableNames.forEach((e=>{n.push(`float v${e} = get${e}AtOutCoords();`)}));const s=this.variableNames.map((e=>`v${e}`)).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        float result = ${s};\n        setOutput(result);\n      }\n    `}}class jn{constructor(e,t){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.variableNames=t.map(((e,t)=>`T${t}`));const n=[];this.variableNames.forEach((e=>{n.push(`vec4 v${e} = get${e}AtOutCoords();`)}));const s=this.variableNames.map((e=>`v${e}`)).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        vec4 result = ${s};\n        setOutput(result);\n      }\n    `}}const Xn={kernelName:r.AddN,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:s}=t,a=n;if(1===a.length)return sn({inputs:{x:a[0]},backend:s});if(a.length>(0,r.env)().get("WEBGL_MAX_TEXTURES_IN_SHADER")){const t=Math.floor(a.length/2),n=e({inputs:a.slice(0,t),backend:s}),r=e({inputs:a.slice(t),backend:s});return e({inputs:[n,r],backend:s})}const i=a.map((e=>e.dtype)).reduce(((e,t)=>(0,r.upcastType)(e,t))),o=a.map((e=>e.shape)),l=(0,r.env)().getBool("WEBGL_PACK")?new jn(a[0].shape,o):new Hn(a[0].shape,o);return s.runWebGLProgram(l,a,i)}},qn={kernelName:r.All,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:i,keepDims:o}=s,l=a.shape.length,u=r.util.parseAxisParam(i,a.shape);let c=u;const h=r.backend_util.getAxesPermutation(c,l);let p=a;null!=h&&(p=Rn({inputs:{x:a},backend:n,attrs:{perm:h}}),c=r.backend_util.getInnerMostAxes(c.length,l)),r.backend_util.assertAxesAreInnerMostDims("all",c,l);const[d,f]=r.backend_util.computeOutAndReduceShapes(p.shape,c),m=wn({inputs:{x:p},backend:n,attrs:{shape:[-1,r.util.sizeFromShape(f)]}}),g=Tn(m,m.dtype,"all",n);let y;return y=wn(o?{inputs:{x:g},backend:n,attrs:{shape:r.backend_util.expandShapeToKeepDim(d,u)}}:{inputs:{x:g},backend:n,attrs:{shape:d}}),n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(g),null!=h&&n.disposeIntermediateTensorInfo(p),y}},Kn={kernelName:r.Any,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:i,keepDims:o}=s,l=a.shape.length,u=r.util.parseAxisParam(i,a.shape);let c=u;const h=r.backend_util.getAxesPermutation(c,l);let p=a;null!=h&&(p=Rn({inputs:{x:a},backend:n,attrs:{perm:h}}),c=r.backend_util.getInnerMostAxes(c.length,l)),r.backend_util.assertAxesAreInnerMostDims("any",c,l);const[d,f]=r.backend_util.computeOutAndReduceShapes(p.shape,c),m=wn({inputs:{x:p},backend:n,attrs:{shape:[-1,r.util.sizeFromShape(f)]}}),g=Tn(m,m.dtype,"any",n);let y;return y=wn(o?{inputs:{x:g},backend:n,attrs:{shape:r.backend_util.expandShapeToKeepDim(d,u)}}:{inputs:{x:g},backend:n,attrs:{shape:d}}),n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(g),null!=h&&n.disposeIntermediateTensorInfo(p),y}};class Yn{constructor(e,t,n){this.variableNames=["A"];const{windowSize:s,batchSize:a,outSize:r}=e;n||this.variableNames.push("bestIndicesA"),this.outputShape=[a,r];const i="max"===t?">":"<",o=n?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));";this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${s};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${s}; i++) {\n          int inIdx = ${o};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${i} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `}}class Qn{constructor(e,t,n,s){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,r.util.assert(e.length>2,(()=>`Packed arg${n.charAt(0).toUpperCase()+n.slice(1)} supports only inputs with rank above 2.`));const a=e[e.length-1],i=Math.ceil(a/t);this.outputShape=e.slice(0,-1),i>1&&this.outputShape.push(i),s||this.variableNames.push("bestIndicesA");const o=this.outputShape,l=o.length,u=nt(l),c=zt("coords",l);let h,p;if(1===i){p=l+1;const e=nt(p);h=`\n        ${e} sourceLocR = ${e}(${c.join()}, 0);\n        ++${c[l-1]};\n        ${e} sourceLocG = ${e}(${c.join()}, 0);\n        ++${c[l-2]};\n        ${e} sourceLocA = ${e}(${c.join()}, 0);\n        --${c[l-1]};\n        ${e} sourceLocB = ${e}(${c.join()}, 0);\n        --${c[l-2]};`}else p=l,h=`\n        ${u} sourceLocR = coords;\n        ++${c[l-1]};\n        ${u} sourceLocG = coords;\n        ++${c[l-2]};\n        ${u} sourceLocA = coords;\n        --${c[l-1]};\n        ${u} sourceLocB = coords;\n        --${c[l-2]};`;const d=["x","y","z","w","u","v"].slice(0,p),f="."+d[p-1],m=d.map((e=>"int "+e)),g=zt("sourceLocR",p-1).concat("inIdx.r"),y=zt("sourceLocG",p-1).concat("inIdx.g"),b=zt("sourceLocB",p-1).concat("inIdx.b"),x=zt("sourceLocA",p-1).concat("inIdx.a"),v="max"===n?"greaterThan":"lessThan",k=s?"":`\n          inIdx = round(vec4(getBestIndicesAChannel(${g.join()}),\n                             getBestIndicesAChannel(${y.join()}),\n                             getBestIndicesAChannel(${b.join()}),\n                             getBestIndicesAChannel(${x.join()})));`,w=`vec4(\n            getAChannel(${g.join()}),\n            hasNextCol ? getAChannel(${y.join()}) : 0.,\n            hasNextRow ? getAChannel(${b.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${x.join()}) : 0.)`,N=s?"":`\n      float getBestIndicesAChannel(${m.join()}) {\n        return getChannel(getBestIndicesA(${d.join()}),\n                                          vec2(${d.slice(-2).join()}));\n      }`;this.userCode=`\n      float getAChannel(${m.join()}) {\n        return getChannel(getA(${d.join()}),\n                               vec2(${d.slice(-2).join()}));\n      }\n      ${N}\n      void main() {\n        ${u} coords = getOutputCoords();\n        bool hasNextCol = ${c[l-1]} < ${o[l-1]-1};\n        bool hasNextRow = ${c[l-2]} < ${o[l-2]-1};\n        ${h}\n        ivec4 srcIdx = ivec4(sourceLocR${f}, sourceLocG${f},\n          sourceLocB${f}, sourceLocA${f}) * ${t};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${w};\n\n        for (int i = 0; i < ${t}; i++) {\n          inIdx = srcIdx;\n          ${k}\n          vec4 candidate = ${w};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${v}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `}}function Jn(e,t,n,s=null){let a=t.shape[0],i=t.shape[1];null!=s&&(a=s.shape[0],i=s.shape[1]);const o=r.backend_util.computeOptimalWindowSize(i),l={windowSize:o,inSize:i,batchSize:a,outSize:Math.ceil(i/o)},u=new Yn(l,n,null==s),c=[t];null!=s&&c.push(s);const h=e.runWebGLProgram(u,c,"int32");if(1===h.shape[1])return h;const p=Jn(e,t,n,h);return e.disposeIntermediateTensorInfo(h),p}function Zn(e,t,n,s=null){const a=null!=s?s.shape:t.shape,i=a[a.length-1],o=r.backend_util.computeOptimalWindowSize(i),l=new Qn(a,o,n,null==s),u=null==s?[t]:[t,s],c=e.runWebGLProgram(l,u,"int32");if(c.shape.length===t.shape.length){const s=Zn(e,t,n,c);return e.disposeIntermediateTensorInfo(c),s}return c}function es(e,t,n,s){const a=[n];if(r.backend_util.assertAxesAreInnerMostDims("arg"+s.charAt(0).toUpperCase()+s.slice(1),a,t.shape.length),!(0,r.env)().getBool("WEBGL_PACK_REDUCE")||t.shape.length<=2){const n=[],[i,o]=r.backend_util.computeOutAndReduceShapes(t.shape,a),l=r.util.sizeFromShape(o),u=wn({inputs:{x:t},backend:e,attrs:{shape:[-1,l]}});n.push(u);const c=Jn(e,u,s);n.push(c);const h=wn({inputs:{x:c},backend:e,attrs:{shape:i}});return n.forEach((t=>e.disposeIntermediateTensorInfo(t))),h}return Zn(e,t,s)}const ts={kernelName:r.ArgMax,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:i}=s;let o=r.util.parseAxisParam(i,a.shape);const l=r.backend_util.getAxesPermutation(o,a.shape.length);let u=a;const c=[];null!=l&&(u=Rn({inputs:{x:a},backend:n,attrs:{perm:l}}),c.push(u),o=r.backend_util.getInnerMostAxes(o.length,u.shape.length)),r.backend_util.assertAxesAreInnerMostDims("argMax",[o[0]],u.shape.length);const h=es(n,u,o[0],"max");return c.forEach((e=>n.disposeIntermediateTensorInfo(e))),h}},ns={kernelName:r.ArgMin,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:i}=s;let o=r.util.parseAxisParam(i,a.shape);const l=r.backend_util.getAxesPermutation(o,a.shape.length);let u=a;const c=[];null!=l&&(u=Rn({inputs:{x:a},backend:n,attrs:{perm:l}}),c.push(u),o=r.backend_util.getInnerMostAxes(o.length,u.shape.length)),r.backend_util.assertAxesAreInnerMostDims("argMin",[o[0]],u.shape.length);const h=es(n,u,o[0],"min");return c.forEach((e=>n.disposeIntermediateTensorInfo(e))),h}},ss=fn({opSnippet:"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n"}),as={kernelName:r.Asin,backendName:"webgl",kernelFunc:ss},rs=fn({opSnippet:"if (isnan(x)) return x;return log(x + sqrt(x * x + 1.0));"}),is={kernelName:r.Asinh,backendName:"webgl",kernelFunc:rs},os=fn({opSnippet:"if (isnan(x)) return x;\n  return atan(x);\n"}),ls={kernelName:r.Atan,backendName:"webgl",kernelFunc:os},us=mn({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return atan(a, b);\n",packedOpSnippet:"\n  vec4 result = atan(a, b);\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"}),cs={kernelName:r.Atan2,backendName:"webgl",kernelFunc:us},hs=fn({opSnippet:"if (isnan(x)) return x;\n  if ((x < -1.0) || (x > 1.0)) return NAN;\nreturn (log(1.0 + x) - log(1.0 - x)) / 2.0;"}),ps={kernelName:r.Atanh,backendName:"webgl",kernelFunc:hs};class ds{constructor(e,t,n,s=!1,a=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const r=e.filterWidth,i=e.strideHeight,o=e.strideWidth,l=e.dilationHeight,u=e.dilationWidth,c=e.effectiveFilterHeight,h=e.effectiveFilterWidth,p=e.padInfo.top,d=e.padInfo.left;this.outputShape=e.outShape;const f="avg"===t,m=`((batch  * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + d`,g=`(xR * ${e.inWidth} + xC) * ${e.inChannels} + d`;let y="0.0";if(f||(y="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode=`\n        const ivec2 strides = ivec2(${i}, ${o});\n        const ivec2 pads = ivec2(${p}, ${d});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${c};\n              wR += ${l}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${h};\n                wC += ${u}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value ${t} currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${s?a?m:g:`wR * ${h} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let b=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(b="avgValue / count");const x=4*Math.floor(r/4),v=r%4,k=`\n      if (${f}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec2 strides = ivec2(${i}, ${o});\n      const ivec2 pads = ivec2(${p}, ${d});\n      const float initializationValue = ${y};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${y});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${c};\n            wR += ${l}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${x}; wC += 4) {\n            int xC = xCCorner + wC * ${u};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              getValue(batch, xR, xC + 2 * ${u}, d),\n              getValue(batch, xR, xC + 3 * ${u}, d)\n            );\n\n            ${k}\n          }\n\n          int xC = xCCorner + ${x};\n          if (${1===v}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${k}\n          } else if (${2===v}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${k}\n          } else if (${3===v}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              getValue(batch, xR, xC + 2 * ${u}, d),\n              initializationValue\n            );\n\n            ${k}\n          }\n        }\n        setOutput(${b});\n      }\n    `}}class fs{constructor(e,t,n,s=!1,a=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const r=e.filterWidth,i=e.strideDepth,o=e.strideHeight,l=e.strideWidth,u=e.dilationDepth,c=e.dilationHeight,h=e.dilationWidth,p=e.effectiveFilterDepth,d=e.effectiveFilterHeight,f=e.effectiveFilterWidth,m=e.padInfo.front,g=e.padInfo.top,y=e.padInfo.left;this.outputShape=e.outShape;const b="avg"===t;let x="0.0";if(b||(x="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode=`\n        const ivec3 strides =\n            ivec3(${i}, ${o}, ${l});\n        const ivec3 pads = ivec3(${m}, ${g}, ${y});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${p};\n              wD += ${u}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${d};\n                wR += ${c}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${f};\n                  wC += ${h}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value ${t} currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${s?a?`(((batch * ${e.inDepth} + xD) * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`((xD * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`wD * ${d} * ${f} +\n                      wR * ${f} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let v=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(v="avgValue / count");const k=4*Math.floor(r/4),w=r%4,N=`\n      if (${b}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec3 strides =\n        ivec3(${i}, ${o}, ${l});\n      const ivec3 pads = ivec3(${m}, ${g}, ${y});\n      const float initializationValue = ${x};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${x});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${p};\n            wD += ${u}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${d};\n            wR += ${c}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${k}; wC += 4) {\n              int xC = xCCorner + wC * ${h};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${h}, ch)\n              );\n\n              ${N}\n            }\n\n            int xC = xCCorner + ${k};\n            if (${1===w}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${N}\n            } else if (${2===w}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${N}\n            } else if (${3===w}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                initializationValue\n              );\n\n              ${N}\n            }\n          }\n          setOutput(${v});\n        }\n      }\n    `}}const ms={kernelName:r.AvgPool,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t;he(a,"avgPool");const{filterSize:i,strides:o,pad:l,dimRoundingMode:u}=s;r.util.assert(r.backend_util.eitherStridesOrDilationsAreOne(o,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`));const c=r.backend_util.computePool2DInfo(a.shape,i,o,1,l,u);if(1===c.filterWidth&&1===c.filterHeight&&r.util.arraysEqual(c.inShape,c.outShape))return sn({inputs:{x:a},backend:n});const h=new ds(c,"avg",!1);return n.runWebGLProgram(h,[a],"float32")}},gs={kernelName:r.AvgPool3D,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{filterSize:i,strides:o,pad:l,dimRoundingMode:u,dataFormat:c}=s,h=r.backend_util.computePool3DInfo(a.shape,i,o,[1,1,1],l,u,c),p=new fs(h,"avg",!1);return n.runWebGLProgram(p,[a],"float32")}};class ys{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,s=e.strideHeight,a=e.strideWidth,r=e.dilationHeight,i=e.dilationWidth,o=e.effectiveFilterHeight,l=e.effectiveFilterWidth,u=o-1-e.padInfo.top,c=l-1-e.padInfo.left,h=1/(t*n);this.userCode=`\n      const ivec2 pads = ivec2(${u}, ${c});\n      const float avgMultiplier = float(${h});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${o};\n            wR += ${r}) {\n          float dyR = float(dyRCorner + wR) / ${s}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${l};\n            wC+= ${i}) {\n            float dyC = float(dyCCorner + wC) / ${a}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class bs{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,s=e.filterWidth,a=e.strideDepth,r=e.strideHeight,i=e.strideWidth,o=e.dilationDepth,l=e.dilationHeight,u=e.dilationWidth,c=e.effectiveFilterDepth,h=e.effectiveFilterHeight,p=e.effectiveFilterWidth,d=c-1-e.padInfo.front,f=h-1-e.padInfo.top,m=p-1-e.padInfo.left,g=1/(t*n*s);this.userCode=`\n      const ivec3 pads = ivec3(${d}, ${f}, ${m});\n      const float avgMultiplier = float(${g});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${c};\n            wD += ${o}) {\n          float dyD = float(dyDCorner + wD) / ${a}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${h};\n              wR += ${l}) {\n            float dyR = float(dyRCorner + wR) / ${r}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${p};\n                wC += ${u}) {\n              float dyC = float(dyCCorner + wC) / ${i}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const xs={kernelName:r.AvgPool3DGrad,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,input:i}=t,o=i,{filterSize:l,strides:u,pad:c,dimRoundingMode:h}=s,p=r.backend_util.computePool3DInfo(o.shape,l,u,[1,1,1],c,h),d=new bs(p);return n.runWebGLProgram(d,[a],o.dtype)}},vs={kernelName:r.AvgPoolGrad,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,input:i}=t,o=i;he([a,i],"avgPoolGrad");const{filterSize:l,strides:u,pad:c}=s,h=r.backend_util.computePool2DInfo(o.shape,l,u,1,c),p=new ys(h);return n.runWebGLProgram(p,[a],o.dtype)}},ks={kernelName:r.BatchMatMul,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{a,b:r}=t,{transposeA:i,transposeB:o}=s;return Dn({a,b:r,transposeA:i,transposeB:o,backend:n})}};class ws{constructor(e,t,n,s,a,i){this.outputShape=[],this.variableNames=["x","mean","variance"],r.backend_util.assertAndGetBroadcastShape(e,t),r.backend_util.assertAndGetBroadcastShape(e,n);let o="0.0";null!=s&&(r.backend_util.assertAndGetBroadcastShape(e,s),this.variableNames.push("offset"),o="getOffsetAtOutCoords()");let l="1.0";null!=a&&(r.backend_util.assertAndGetBroadcastShape(e,a),this.variableNames.push("scale"),l="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${o};\n        float scale = ${l};\n        float inv = scale * inversesqrt(variance + float(${i}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `}}class Ns{constructor(e,t,n,s,a,i){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],r.backend_util.assertAndGetBroadcastShape(e,t),r.backend_util.assertAndGetBroadcastShape(e,n);let o="vec4(0.0)";null!=s&&(r.backend_util.assertAndGetBroadcastShape(e,s),this.variableNames.push("offset"),o="getOffsetAtOutCoords()");let l="vec4(1.0)";null!=a&&(r.backend_util.assertAndGetBroadcastShape(e,a),this.variableNames.push("scale"),l="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        vec4 offset = ${o};\n        vec4 scale = ${l};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${i}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `}}const Is={kernelName:r.FusedBatchNorm,backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,mean:a,variance:i,offset:o,scale:l}=e;r.util.assert(a.shape.length===i.shape.length,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),r.util.assert(null==o||a.shape.length===o.shape.length,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),r.util.assert(null==l||a.shape.length===l.shape.length,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));let{varianceEpsilon:u}=n;null==u&&(u=.001);const c=[s,a,i];let h=null;null!=o&&(h=o.shape,c.push(o));let p=null;null!=l&&(p=l.shape,c.push(l));const d=(0,r.env)().getBool("WEBGL_PACK_NORMALIZATION")?new Ns(s.shape,a.shape,i.shape,h,p,u):new ws(s.shape,a.shape,i.shape,h,p,u);return t.runWebGLProgram(d,c,c[0].dtype)}};class Ss{constructor(e){this.variableNames=["source"],this.outputShape=e,this.rank=e.length;const t=nt(this.rank),n=`uniform int start[${this.rank}];`,s=function(e){if(1===e)return"sourceLoc";if(e<=6)return Ts.slice(0,e).map((e=>"sourceLoc."+e)).join(",");throw Error(`Slicing for rank ${e} is not yet supported`)}(this.rank);let a;a=`\n        ${t} sourceLoc;\n        ${t} coords = getOutputCoords();\n        ${e.map(((e,t)=>`sourceLoc.${Ts[t]} = start[${t}] + coords.${Ts[t]};`)).join("\n")}\n      `,this.userCode=`\n      ${n}\n      void main() {\n        ${a}\n        setOutput(getSource(${s}));\n      }\n    `}getCustomSetupFunc(e){if(e.length!==this.rank)throw Error(`The rank (${this.rank}) of the program must match the length of start (${e.length})`);return(t,n)=>{null==this.startLoc&&(this.startLoc=t.getUniformLocationNoThrow(n,"start"),null==this.startLoc)||t.gl.uniform1iv(this.startLoc,e)}}}const Ts=["x","y","z","w","u","v"];class Cs{constructor(e){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.rank=e.length;const t=nt(this.rank),n=zt("coords",this.rank),s=zt("sourceLoc",this.rank),a=1===this.rank?"sourceLoc":`vec2(${s.slice(-2).join()})`,r=`getChannel(getSource(${s.join()}), ${a})`,i=`\n      result.x = ${r};\n      if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n        ++${s[this.rank-1]};\n        result.y = ${r};\n        --${s[this.rank-1]};\n      }\n    `,o=1===this.rank?"":`\n      --${n[this.rank-1]};\n      if (++${n[this.rank-2]} < ${e[this.rank-2]}) {\n        ++${s[this.rank-2]};\n        result.z = ${r};\n        if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n          ++${s[this.rank-1]};\n          result.w = ${r};\n        }\n      }\n    `,l=this.rank<=4?`sourceLoc = coords +\n            ${t}(${e.map(((e,t)=>`start[${t}]`)).join()});`:e.map(((e,t)=>`${s[t]} = ${n[t]} + start[${t}];`)).join("\n");this.userCode=`\n      uniform int start[${this.rank}];\n      void main() {\n        ${t} coords = getOutputCoords();\n        ${t} sourceLoc;\n        ${l}\n        vec4 result = vec4(0.);\n        ${i}\n        ${o}\n        setOutput(result);\n      }\n    `}getCustomSetupFunc(e){if(e.length!==this.rank)throw Error(`The rank (${this.rank}) of the program must match the length of start (${e.length})`);return(t,n)=>{null==this.startLoc&&(this.startLoc=t.getUniformLocationNoThrow(n,"start"),null==this.startLoc)||t.gl.uniform1iv(this.startLoc,e)}}}function $s(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{begin:i,size:o}=s,[l,u]=r.slice_util.parseSliceParams(a,i,o);if(r.slice_util.assertParamsValid(a,l,u),0===r.util.sizeFromShape(u))return n.makeTensorInfo(u,a.dtype,[]);if(n.shouldExecuteOnCPU([a])||"string"===a.dtype){const e=n.texData.get(a.dataId),t=At(e.values,l,u,a.shape,a.dtype);return n.makeTensorInfo(u,a.dtype,t)}const{isPacked:c}=n.texData.get(a.dataId),h=r.slice_util.isSliceContinous(a.shape,l,u);if(c||!h){const e=(0,r.env)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Cs(u):new Ss(u),t=e.getCustomSetupFunc(l);return n.runWebGLProgram(e,[a],a.dtype,t)}return n.uploadToGPU(a.dataId),function(e,t,n,s){const a=s.texData.get(e.dataId),i=s.makeTensorInfo(n,e.dtype),o=s.texData.get(i.dataId);Object.assign(o,a),o.refCount=1,o.shape=n,o.dtype=e.dtype;let l=r.slice_util.computeFlatOffset(t,r.util.computeStrides(e.shape));a.slice&&(l+=a.slice.flatOffset),o.slice={flatOffset:l,origDataId:a.slice&&a.slice.origDataId||e.dataId};const u=s.dataRefCount.get(o.slice.origDataId)||1;return s.dataRefCount.set(o.slice.origDataId,u+1),i}(a,l,u,n)}const As={kernelName:r.Slice,backendName:"webgl",kernelFunc:$s},Es={kernelName:r.BatchToSpaceND,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{blockShape:i,crops:o}=s;r.util.assert(a.shape.length<=4,(()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet"));const l=i.reduce(((e,t)=>e*t)),u=r.backend_util.getReshaped(a.shape,i,l),c=r.backend_util.getPermuted(u.length,i.length),h=r.backend_util.getReshapedPermuted(a.shape,i,l),p=r.backend_util.getSliceBeginCoords(o,i.length),d=r.backend_util.getSliceSize(h,o,i.length),f=[],m=wn({inputs:{x:a},backend:n,attrs:{shape:u}}),g=Rn({inputs:{x:m},backend:n,attrs:{perm:c}}),y=wn({inputs:{x:g},backend:n,attrs:{shape:h}}),b=$s({inputs:{x:y},backend:n,attrs:{begin:p,size:d}});return f.push(m),f.push(g),f.push(y),f.forEach((e=>n.disposeIntermediateTensorInfo(e))),b}},_s={kernelName:r.Bincount,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,weights:r}=t,{size:i}=s,o=n.readSync(a.dataId),l=n.readSync(r.dataId),u=lt(o,l,r.dtype,r.shape,i);return n.makeTensorInfo([i],r.dtype,u)}},Rs=mn({opSnippet:"return float(a != b);",dtype:"bool"}),Fs={kernelName:r.NotEqual,backendName:"webgl",kernelFunc:Rs};function Ds(e){const{inputs:t,backend:n}=e,{input:s}=t;return sn({inputs:{x:n.texData.get(s.dataId).complexTensorInfos.real},backend:n})}const Os={kernelName:r.Real,backendName:"webgl",kernelFunc:Ds},Ms={kernelName:r.Cast,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:s,attrs:a}=t,{x:i}=n,{dtype:o}=a;if("complex64"===o){if("complex64"===i.dtype)return sn({inputs:{x:i},backend:s});const t=r.zeros(i.shape),n=e({inputs:{x:i},backend:s,attrs:{dtype:"float32"}}),a=rn({inputs:{real:n,imag:t},backend:s});return t.dispose(),s.disposeIntermediateTensorInfo(n),a}if("complex64"===i.dtype){const t=Ds({inputs:{input:i},backend:s}),n=e({inputs:{x:t},backend:s,attrs:{dtype:o}});return s.disposeIntermediateTensorInfo(t),n}if(!r.util.hasEncodingLoss(i.dtype,o)){const e=sn({inputs:{x:i},backend:s});return{dataId:e.dataId,shape:e.shape,dtype:o}}if("int32"===o)return function(e,t){const n=new Gt(e.shape,"return float(int(x));"),s=t.runWebGLProgram(n,[e],"int32");return{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}(i,s);if("bool"===o){const e=s.makeTensorInfo([],"bool",r.util.getTypedArrayFromDType("bool",1)),t=Rs({inputs:{a:i,b:e},backend:s});return s.disposeIntermediateTensorInfo(e),t}throw new Error(`Error in Cast: failed to cast ${i.dtype} to ${o}`)}},zs="return ceil(x);",Ls=fn({opSnippet:zs,packedOpSnippet:zs,cpuKernelImpl:ct}),Bs={kernelName:r.Ceil,backendName:"webgl",kernelFunc:Ls};class Ps{constructor(e){this.variableNames=["A"],this.outputShape=e,this.userCode="\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    "}getCustomSetupFunc(e,t){return(n,s)=>{null==this.minLoc&&(this.minLoc=n.getUniformLocationNoThrow(s,"minVal"),this.maxLoc=n.getUniformLocationNoThrow(s,"maxVal")),n.gl.uniform1f(this.minLoc,e),n.gl.uniform1f(this.maxLoc,t)}}}class Vs{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.userCode="\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    "}getCustomSetupFunc(e,t){return(n,s)=>{null==this.minLoc&&(this.minLoc=n.getUniformLocationNoThrow(s,"minVal"),this.maxLoc=n.getUniformLocationNoThrow(s,"maxVal")),n.gl.uniform1f(this.minLoc,e),n.gl.uniform1f(this.maxLoc,t)}}}const Ws={kernelName:r.ClipByValue,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{clipValueMin:i,clipValueMax:o}=s;let l;l=(0,r.env)().getBool("WEBGL_PACK_CLIP")?new Vs(a.shape):new Ps(a.shape);const u=l.getCustomSetupFunc(i,o);return n.runWebGLProgram(l,[a],a.dtype,u)}};class Us{constructor(e){this.variableNames=["real","imag"],this.outputShape=e,this.userCode="\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    "}}function Gs(e,t){return{dataId:t.dataId,dtype:t.dtype,shape:e.shape}}const Hs={kernelName:r.ComplexAbs,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t,a=n.texData.get(s.dataId),r=new Us(s.shape),i=[Gs(s,a.complexTensorInfos.real),Gs(s,a.complexTensorInfos.imag)];return n.runWebGLProgram(r,i,i[0].dtype)}};class js{constructor(e){this.outputShape=[],this.outputShape=r.backend_util.computeOutShape(e,1),this.variableNames=e.map(((e,t)=>`T${t}`));const t=new Array(e.length-1);t[0]=e[0][1];for(let n=1;n<t.length;n++)t[n]=t[n-1]+e[n][1];const n=[`if (yC < ${t[0]}) setOutput(getT0(yR, yC));`];for(let e=1;e<t.length;e++){const s=t[e-1];n.push(`else if (yC < ${t[e]}) setOutput(getT${e}(yR, yC-${s}));`)}const s=t.length,a=t[t.length-1];n.push(`else setOutput(getT${s}(yR, yC-${a}));`),this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${n.join("\n        ")}\n      }\n    `}}class Xs{constructor(e,t){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=r.backend_util.computeOutShape(e,t);const n=this.outputShape,s=n.length,a=nt(s),i=zt("coords",s),o=["x","y","z","w","u","v"].slice(0,s);this.variableNames=e.map(((e,t)=>`T${t}`));const l=new Array(e.length-1);l[0]=e[0][t];for(let n=1;n<l.length;n++)l[n]=l[n-1]+e[n][t];const u=o[t],c=o.slice(-2),h=o.join();let p=`if (${u} < ${l[0]}) {\n        return getChannel(\n            getT0(${h}), vec2(${c.join()}));\n        }`;for(let e=1;e<l.length;e++){const t=l[e-1];p+=`\n        if (${u} < ${l[e]}  && ${u} >= ${l[e-1]}) {\n          return getChannel(\n            getT${e}(${qs(o,u,t)}),\n            vec2(${qs(c,u,t)}));\n        }`}const d=l.length,f=l[l.length-1];p+=`\n        return getChannel(\n          getT${d}(${qs(o,u,f)}),\n          vec2(${qs(c,u,f)}));`,this.userCode=`\n      float getValue(${o.map((e=>"int "+e))}) {\n        ${p}\n      }\n\n      void main() {\n        ${a} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${i}), 0., 0., 0.);\n\n        ${i[s-1]} = ${i[s-1]} + 1;\n        if (${i[s-1]} < ${n[s-1]}) {\n          result.g = getValue(${i});\n        }\n\n        ${i[s-2]} = ${i[s-2]} + 1;\n        if (${i[s-2]} < ${n[s-2]}) {\n          result.a = getValue(${i});\n        }\n\n        ${i[s-1]} = ${i[s-1]} - 1;\n        if (${i[s-2]} < ${n[s-2]} &&\n            ${i[s-1]} < ${n[s-1]}) {\n          result.b = getValue(${i});\n        }\n        setOutput(result);\n      }\n    `}}function qs(e,t,n){const s=e.indexOf(t);return e.map(((e,t)=>t===s?`${e} - ${n}`:e)).join()}function Ks(e){const{inputs:t,backend:n}=e,{input:s}=t;return sn({inputs:{x:n.texData.get(s.dataId).complexTensorInfos.imag},backend:n})}const Ys={kernelName:r.Imag,backendName:"webgl",kernelFunc:Ks};function Qs(e,t,n){const s=e[0].dtype;if("complex64"===s){const s=e.map((e=>Ds({inputs:{input:e},backend:n}))),a=e.map((e=>Ks({inputs:{input:e},backend:n}))),r=Qs(s,t,n),i=Qs(a,t,n),o=rn({inputs:{real:r,imag:i},backend:n});return s.forEach((e=>n.disposeIntermediateTensorInfo(e))),a.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(i),o}if("string"===s){const{tensors2D:a,outShape:i}=Js(e,t,n),o=a.map((e=>({vals:n.readSync(e.dataId),shape:e.shape}))),l=1===a[0].shape[0],u=ht(o,i,s,l),c=r.backend_util.computeOutShape(e.map((e=>e.shape)),t),h=n.makeTensorInfo(c,s,u);return a.forEach((e=>n.disposeIntermediateTensorInfo(e))),h}if(e.length>(0,r.env)().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")){const s=Math.floor(e.length/2),a=Qs(e.slice(0,s),t,n),r=Qs(e.slice(s),t,n),i=Qs([a,r],t,n);return n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(r),i}if((0,r.env)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&e[0].shape.length>1){const a=new Xs(e.map((e=>e.shape)),t);return n.runWebGLProgram(a,e,s)}const{tensors2D:a,outShape:i}=Js(e,t,n),o=new js(a.map((e=>e.shape))),l=n.runWebGLProgram(o,a,s);a.forEach((e=>n.disposeIntermediateTensorInfo(e)));const u=wn({inputs:{x:l},attrs:{shape:i},backend:n});return n.disposeIntermediateTensorInfo(l),u}function Js(e,t,n){const s=r.backend_util.computeOutShape(e.map((e=>e.shape)),t);return{tensors2D:e.map((e=>wn({inputs:{x:e},attrs:{shape:[-1,r.util.sizeFromShape(e.shape.slice(t))]},backend:n}))),outShape:s}}function Zs(e){const{inputs:t,backend:n,attrs:s}=e,{axis:a}=s,i=r.util.parseAxisParam(a,t[0].shape)[0],o=r.backend_util.computeOutShape(t.map((e=>e.shape)),i);if(0===r.util.sizeFromShape(o))return n.makeTensorInfo(o,t[0].dtype,[]);const l=t.filter((e=>r.util.sizeFromShape(e.shape)>0));if(1===l.length)return sn({inputs:{x:l[0]},backend:n});const u=l.map((e=>e.shape));return r.backend_util.assertParamsConsistent(u,i),Qs(l,i,n)}const ea={kernelName:r.Concat,backendName:"webgl",kernelFunc:Zs};class ta{constructor(e,t=!1,n=null,s=!1,a=!1){this.variableNames=["x","W"],this.outputShape=e.outShape;const r=e.padInfo.top,i=e.padInfo.left,o=e.strideHeight,l=e.strideWidth,u=e.dilationHeight,c=e.dilationWidth,h=e.filterHeight,p=e.filterWidth,d=4*Math.floor(e.inChannels/4),f=e.inChannels%4,m="channelsLast"===e.dataFormat,g=m?1:2,y=m?2:3,b=m?3:1;let x="",v="";n&&(x=s?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:a?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,v="result = activation(result);");const k=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),a&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${x}\n\n      const ivec2 strides = ivec2(${o}, ${l});\n      const ivec2 pads = ivec2(${r}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${b}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${g}], coords[${y}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${h}; wR++) {\n          int xR = xRCorner + wR * ${u};\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${p}; wC++) {\n            int xC = xCCorner + wC * ${c};\n\n            if (xC < 0 || xC >= ${e.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${d}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${m}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${1===f}) {\n\n              if (${m}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${d}) *\n                    getW(wR, wC, ${d}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${d}, xR, xC) *\n                    getW(wR, wC, ${d}, d2);\n              }\n\n            } else if (${2===f}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${d}, d2),\n                getW(wR, wC, ${d} + 1, d2)\n              );\n\n              if (${m}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${d}),\n                  getX(batch, xR, xC, ${d} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${d}, xR, xC),\n                  getX(batch, ${d} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${3===f}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${d}, d2),\n                getW(wR, wC, ${d} + 1, d2),\n                getW(wR, wC, ${d} + 2, d2)\n              );\n\n              if (${m}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${d}),\n                  getX(batch, xR, xC, ${d} + 1),\n                  getX(batch, xR, xC, ${d} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${d}, xR, xC),\n                  getX(batch, ${d} + 1, xR, xC),\n                  getX(batch, ${d} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${k}\n        ${v}\n        setOutput(result);\n      }\n    `}}class na{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const t=e.padInfo.front,n=e.padInfo.top,s=e.padInfo.left,a=e.strideDepth,r=e.strideHeight,i=e.strideWidth,o=e.dilationDepth,l=e.dilationHeight,u=e.dilationWidth,c=e.filterDepth,h=e.filterHeight,p=e.filterWidth,d=4*Math.floor(e.inChannels/4),f=e.inChannels%4;this.userCode=`\n      const ivec3 strides = ivec3(${a}, ${r}, ${i});\n      const ivec3 pads = ivec3(${t}, ${n}, ${s});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${c}; wF++) {\n          int xF = xFCorner + wF * ${o};\n\n          if (xF < 0 || xF >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${h}; wR++) {\n            int xR = xRCorner + wR * ${l};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${p}; wC++) {\n              int xC = xCCorner + wC * ${u};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${d}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${1===f}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${d}) *\n                  getW(wF, wR, wC, ${d}, d2);\n              } else if (${2===f}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${d}),\n                  getX(batch, xF, xR, xC, ${d} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${d}, d2),\n                  getW(wF, wR, wC, ${d} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${3===f}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${d}),\n                  getX(batch, xF, xR, xC, ${d} + 1),\n                  getX(batch, xF, xR, xC, ${d} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${d}, d2),\n                  getW(wF, wR, wC, ${d} + 1, d2),\n                  getW(wF, wR, wC, ${d} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class sa{constructor(e,t,n){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e;const{filterWidth:s,inChannels:a,strideWidth:r,strideHeight:i,padInfo:o,outWidth:l,dilationWidth:u,dilationHeight:c,dataFormat:h}=n,{left:p,top:d}=o,f=a*s,m=de(),g="channelsLast"===h,y=g?0:1,b=g?1:2;let x="";for(let n=0;n<=1;n++)for(let s=0;s<=1;s++)x+=`\n          blockIndex = rc.y + ${s};\n          pos = rc.x + ${n};\n\n          if(blockIndex < ${e[1]} && pos < ${e[0]}) {\n            offsetY = int(blockIndex / (${l})) * ${i} - ${d};\n            d0 = offsetY + ${c} * (pos / ${f});\n\n            if(d0 < ${t[y]} && d0 >= 0) {\n\n              offsetX = int(mod(float(blockIndex), ${l}.) * ${r}. - ${p}.);\n              d1 = offsetX + ${u} * (int(mod(float(pos), ${f}.) / ${a}.));\n\n              if(d1 < ${t[b]} && d1 >= 0) {\n\n                ch = int(mod(float(pos), ${a}.));\n\n                if (${g}) {\n                  innerDims = vec2(d1, ch);\n                  result[${2*n+s}] = getChannel(\n                    getA(d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${2*n+s}] = getChannel(\n                    getA(ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;this.userCode=`\n      void main() {\n        ivec2 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${x}\n\n        ${m.output} = result;\n      }\n    `}}function aa({x:e,filter:t,convInfo:n,backend:s,bias:a=null,preluActivationWeights:i=null,leakyreluAlpha:o=0,activation:l=null}){const u=e.shape,c=s.texData.get(e.dataId),h=n.inChannels,p=u[0]*u[1]*u[2],d=n.outChannels,f="channelsLast"===n.dataFormat;let m;const g=[],y=(1===p||1===d)&&h>1e3,b=u[2]%2!=0&&!!c.isPacked;if(!y&&(0,r.env)().getBool("WEBGL_LAZILY_UNPACK")&&(0,r.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&b){const h=f?u[0]*u[1]*(u[2]+1):u[0]*u[2]*(u[3]+1),p={dataId:e.dataId,shape:[1,h,n.inChannels],dtype:e.dtype},d=c.shape;c.shape=c.shape.slice(),c.shape[c.shape.length-2]++,r.util.assert(Q(c.shape,p.shape),(()=>`packed reshape ${c.shape} to ${p.shape} isn't free`));const y=wn({inputs:{x:t},backend:s,attrs:{shape:[1,n.inChannels,n.outChannels]}});g.push(y);const b=Dn({a:p,b:y,backend:s,transposeA:!1,transposeB:!1,bias:a,activation:l,preluActivationWeights:i,leakyreluAlpha:o}),x=s.texData.get(b.dataId);r.util.assert(x.isPacked,(()=>"batchMatMul result is expected to be packed")),c.shape=d,x.shape=n.outShape,m=sn({inputs:{x:b},backend:s}),m.shape=n.outShape,g.push(b)}else{const r=wn({inputs:{x:e},backend:s,attrs:{shape:[1,f?u[0]*u[1]*u[2]:u[0]*u[2]*u[3],n.inChannels]}}),c=wn({inputs:{x:t},backend:s,attrs:{shape:[1,n.inChannels,n.outChannels]}}),h=Dn({a:r,b:c,transposeA:!1,transposeB:!1,backend:s,bias:a,activation:l,preluActivationWeights:i,leakyreluAlpha:o});m=wn({inputs:{x:h},backend:s,attrs:{shape:n.outShape}}),g.push(r),g.push(c),g.push(h)}for(const e of g)s.disposeIntermediateTensorInfo(e);return m}function ra({x:e,filter:t,convInfo:n,backend:s,bias:a=null,preluActivationWeights:i=null,leakyreluAlpha:o=0,activation:l=null}){const{filterWidth:u,filterHeight:c,inChannels:h,outWidth:p,outHeight:d,dataFormat:f}=n,m="channelsLast"===f,g=u*c*h,y=d*p,b=[g,y],x=[],v=wn({inputs:{x:e},backend:s,attrs:{shape:e.shape.slice(1)}}),k=wn({inputs:{x:t},backend:s,attrs:{shape:[1,g,r.util.sizeFromShape(t.shape)/g]}});x.push(v),x.push(k);const w=new sa(b,v.shape,n),N=s.runWebGLProgram(w,[v],"float32"),I=wn({inputs:{x:N},backend:s,attrs:{shape:[1,b[0],b[1]]}});x.push(N),x.push(I);const S=null!=a,T=null!=i,C="leakyrelu"===l,$=l?gn(l,!0):null,A=new yn(I.shape,k.shape,[1,y,n.outChannels],!0,!1,S,$,T,C),E=[I,k];if(a&&E.push(a),T&&E.push(i),C){const e=s.makeTensorInfo([],"float32",r.util.createScalarValue(o,"float32"));E.push(e),x.push(e)}const _=s.runWebGLProgram(A,E,"float32"),R=wn({inputs:{x:_},backend:s,attrs:{shape:m?[1,d,p,n.outChannels]:[1,n.outChannels,d,p]}});x.push(_);for(const e of x)s.disposeIntermediateTensorInfo(e);return R}const ia={kernelName:r.Conv2D,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,filter:i}=t,{strides:o,pad:l,dataFormat:u,dilations:c,dimRoundingMode:h}=s,p=r.backend_util.convertConv2DDataFormat(u),d=r.backend_util.computeConv2DInfo(a.shape,i.shape,o,c,l,h,!1,p);let f;if(1!==d.filterHeight||1!==d.filterWidth||1!==d.dilationHeight||1!==d.dilationWidth||1!==d.strideHeight||1!==d.strideWidth||"SAME"!==d.padInfo.type&&"VALID"!==d.padInfo.type)if((0,r.env)().getBool("WEBGL_CONV_IM2COL")&&1===a.shape[0])f=ra({x:a,filter:i,convInfo:d,backend:n});else{const e=new ta(d);f=n.runWebGLProgram(e,[a,i],"float32")}else f=aa({x:a,filter:i,convInfo:d,backend:n});const m=wn({inputs:{x:f},backend:n,attrs:{shape:d.outShape}});return n.disposeIntermediateTensorInfo(f),m}};class oa{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,n=e.strideWidth,s=e.padInfo.top,a=e.padInfo.left,r="channelsLast"===e.dataFormat;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${s};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${a};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              if (${r}) {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class la{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,s=e.strideHeight,a=e.strideWidth,r="channelsLast"===e.dataFormat,i=t-1-e.padInfo.top,o=n-1-e.padInfo.left,l=r?1:2,u=r?2:3,c=r?3:1;this.userCode=`\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${c}];\n\n        ivec2 dyCorner = ivec2(coords[${l}], coords[${u}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${s}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${a}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n\n              if (${r}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class ua{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideDepth,n=e.strideHeight,s=e.strideWidth,a=e.padInfo.front,r=e.padInfo.top,i=e.padInfo.left;this.userCode=`\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yF = 0; yF < ${e.outDepth}; yF++) {\n            int xF = wF + yF * ${t} - ${a};\n\n            if (xF < 0 || xF >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${e.outHeight}; yR++) {\n              int xR = wR + yR * ${n} - ${r};\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${e.outWidth}; yC++) {\n                int xC = wC + yC * ${s} - ${i};\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class ca{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,s=e.filterWidth,a=e.strideDepth,r=e.strideHeight,i=e.strideWidth,o=t-1-e.padInfo.front,l=n-1-e.padInfo.top,u=s-1-e.padInfo.left;this.userCode=`\n      const ivec3 pads = ivec3(${o}, ${l}, ${u});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${t}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${a}.0;\n\n          if (dyF < 0.0 || dyF >= ${e.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${t} - 1 - wF;\n\n          for (int wR = 0; wR < ${n}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${r}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${n} - 1 - wR;\n\n            for (int wC = 0; wC < ${s}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${i}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${s} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const ha={kernelName:r.Conv2DBackpropFilter,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,dy:i}=t,{strides:o,pad:l,dataFormat:u,dimRoundingMode:c,filterShape:h}=s,p=r.backend_util.convertConv2DDataFormat(u),d=r.backend_util.computeConv2DInfo(a.shape,h,o,1,l,c,!1,p),f=new oa(d);return n.runWebGLProgram(f,[a,i],"float32")}},pa={kernelName:r.Conv2DBackpropInput,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,filter:i}=t,{inputShape:o,strides:l,pad:u,dataFormat:c,dimRoundingMode:h}=s,p=r.backend_util.convertConv2DDataFormat(c),d=r.backend_util.computeConv2DInfo(o,i.shape,l,1,u,h,!1,p),f=new la(d);return n.runWebGLProgram(f,[a,i],"float32")}},da={kernelName:r.Conv3D,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,filter:i}=t,{strides:o,pad:l,dilations:u}=s,c=r.backend_util.computeConv3DInfo(a.shape,i.shape,o,u,l),h=new na(c);return n.runWebGLProgram(h,[a,i],"float32")}},fa={kernelName:r.Conv3DBackpropFilterV2,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,dy:i}=t,{strides:o,pad:l,filterShape:u}=s,c=r.backend_util.computeConv3DInfo(a.shape,u,o,1,l),h=new ua(c);return n.runWebGLProgram(h,[a,i],"float32")}},ma={kernelName:r.Conv3DBackpropInputV2,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,filter:i}=t,{pad:o,strides:l,inputShape:u}=s,c=r.backend_util.computeConv3DInfo(u,i.shape,l,1,o),h=new ca(c);return n.runWebGLProgram(h,[a,i],"float32")}},ga=fn({opSnippet:"if (isnan(x)) return x;\n  return cos(x);\n"}),ya={kernelName:r.Cos,backendName:"webgl",kernelFunc:ga},ba=fn({opSnippet:"\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n"}),xa={kernelName:r.Cosh,backendName:"webgl",kernelFunc:ba};class va{constructor(e,t,n,s,a){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];const[r,i,o,l]=e,[u]=t,[c,h]=n;this.outputShape=[u,c,h,l];const p="bilinear"===s?1:0,[d,f]=[i-1+".0",o-1+".0"],[m,g,y]=c>1?[""+(i-1)/(c-1),"(y2-y1) * height_ratio",`y1*${d} + float(y)*(height_scale)`]:["0.0","0.0",`0.5 * (y1+y2) * ${d}`],[b,x,v]=h>1?[""+(o-1)/(h-1),"(x2-x1) * width_ratio",`x1*${f} + float(x)*(width_scale)`]:["0.0","0.0",`0.5 * (x1+x2) * ${f}`];this.userCode=`\n      const float height_ratio = float(${m});\n      const float width_ratio = float(${b});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${r}) {\n          return;\n        }\n\n        float height_scale = ${g};\n        float width_scale = ${x};\n\n        float in_y = ${y};\n        if( in_y < 0.0 || in_y > ${d} ) {\n          setOutput(float(${a}));\n          return;\n        }\n        float in_x = ${v};\n        if( in_x < 0.0 || in_x > ${f} ) {\n          setOutput(float(${a}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${p} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `}}const ka={kernelName:r.CropAndResize,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{image:a,boxes:r,boxInd:i}=t,{cropSize:o,method:l,extrapolationValue:u}=s,c=new va(a.shape,r.shape,o,l,u);return n.runWebGLProgram(c,[a,r,i],"float32")}};class wa{constructor(e,t,n){this.variableNames=["x"],this.outputShape=e;const s=e.length,a=t?"0.0":`getX(${Na(s,"coords")})`,r=e[e.length-1];let i="",o="";t?(i=n?"end != "+(r-1):"end != 0",o=n?"end + 1":"end - 1"):(i=n?`end + pow2 < ${r}`:"end >= pow2",o=n?"end + pow2":"end - pow2"),this.userCode=`\n      uniform float index;\n      void main() {\n        ${nt(s)} coords = getOutputCoords();\n        int end = ${Ia(s,"coords")};\n        float val = ${a};\n        int pow2 = int(pow(2.0, index));\n        if (${i}) {\n          int idx = ${o};\n          ${Ia(s,"coords")} = idx;\n          val += getX(${Na(s,"coords")});\n        }\n        setOutput(val);\n      }\n    `}getCustomSetupFunc(e){return(t,n)=>{null==this.index&&(this.index=t.getUniformLocation(n,"index")),t.gl.uniform1f(this.index,e)}}}function Na(e,t){if(1===e)return`${t}`;if(2===e)return`${t}.x, ${t}.y`;if(3===e)return`${t}.x, ${t}.y, ${t}.z`;if(4===e)return`${t}.x, ${t}.y, ${t}.z, ${t}.w`;throw Error(`Cumulative sum for rank ${e} is not yet supported`)}function Ia(e,t){if(1===e)return`${t}`;if(2===e)return`${t}.y`;if(3===e)return`${t}.z`;if(4===e)return`${t}.w`;throw Error(`Cumulative sum for rank ${e} is not yet supported`)}const Sa={kernelName:r.Cumsum,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:i,exclusive:o,reverse:l}=s,u=a.shape.length,c=r.backend_util.getAxesPermutation([i],u);let h=a;null!=c&&(h=Rn({inputs:{x:a},backend:n,attrs:{perm:c}}));const p=r.backend_util.getInnerMostAxes(1,u)[0];if(p!==u-1)throw new Error(`WebGL cumsum shader expects an inner-most axis=${a.shape.length-1} but got axis=${i}`);const d=h.shape[p];let f=sn({inputs:{x:h},backend:n});for(let e=0;e<=Math.ceil(Math.log2(d))-1;e++){const t=new wa(h.shape,!1,l),s=t.getCustomSetupFunc(e),a=f;f=n.runWebGLProgram(t,[f],f.dtype,s),n.disposeIntermediateTensorInfo(a)}if(o){const e=new wa(h.shape,o,l),t=f;f=n.runWebGLProgram(e,[f],f.dtype),n.disposeIntermediateTensorInfo(t)}if(null!=c){const e=Rn({inputs:{x:f},backend:n,attrs:{perm:r.backend_util.getUndoAxesPermutation(c)}});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(h),e}return f}},Ta={kernelName:r.DenseBincount,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,weights:r}=t,{size:i,binaryOutput:o}=s;if(1===a.shape.length){const e=n.readSync(a.dataId),t=n.readSync(r.dataId),s=lt(e,t,r.dtype,r.shape,i);return n.makeTensorInfo([i],r.dtype,s)}if(2===a.shape.length){const e=n.bufferSync(a),t=n.bufferSync(r),s=ut(e,t,i,o);return n.makeTensorInfo(s.shape,r.dtype,s.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${a.shape.length}.`)}};class Ca{constructor(e,t,n){this.variableNames=["x"],this.outputShape=[],this.outputShape=e,this.blockSize=t,this.dataFormat=n,this.userCode=`\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${t};\n      int offset_h = imod(h, ${t});\n      int in_w = w / ${t};\n      int offset_w = imod(w, ${t});\n      int offset_d = (offset_h * ${t} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `}getHeightCoordString(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}getWidthCoordString(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}getDepthCoordString(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}getOutputDepthSize(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}const $a={kernelName:r.DepthToSpace,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{blockSize:i,dataFormat:o}=s;r.util.assert(i>1,(()=>`blockSize should be > 1 for depthToSpace, but was: ${i}`));const l=a.shape[0],u="NHWC"===o?a.shape[1]:a.shape[2],c="NHWC"===o?a.shape[2]:a.shape[3],h="NHWC"===o?a.shape[3]:a.shape[1],p=u*i,d=c*i,f=h/(i*i),m=new Ca("NHWC"===o?[l,p,d,f]:[l,f,p,d],i,o);return n.runWebGLProgram(m,[a],a.dtype)}};class Aa{constructor(e,t=!1,n=null,s=!1,a=!1){this.variableNames=["x","W"],this.outputShape=e.outShape;const r=e.inHeight,i=e.inWidth,o=e.padInfo.top,l=e.padInfo.left,u=e.strideHeight,c=e.strideWidth,h=e.dilationHeight,p=e.dilationWidth,d=e.filterHeight,f=e.filterWidth,m=e.outChannels/e.inChannels;let g="",y="";n&&(g=s?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:a?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,y="result = activation(result);");const b=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),a&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${g}\n\n      const ivec2 strides = ivec2(${u}, ${c});\n      const ivec2 pads = ivec2(${o}, ${l});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${m};\n        int q = d2 - d1 * ${m};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${d}; wR++) {\n          int xR = xRCorner + wR * ${h};\n\n          if (xR < 0 || xR >= ${r}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${f}; wC++) {\n            int xC = xCCorner + wC * ${p};\n\n            if (xC < 0 || xC >= ${i}) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${b}\n        ${y}\n        setOutput(result);\n      }\n    `}}class Ea{constructor(e,t=!1,n=null,s=!1,a=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e.outShape;const i=e.inHeight,o=e.inWidth,l=e.padInfo.top,u=e.padInfo.left,c=e.strideHeight,h=e.strideWidth,p=e.dilationHeight,d=e.dilationWidth,f=e.filterHeight,m=e.filterWidth,g=m;let y="int xR; int xC; int xCOffset;";for(let e=0;e<f;e++)for(let t=0;t<m;t++)y+=`\n          vec4 xTexelR${e}C${2*t} = vec4(0.);\n          vec4 wR${e}C${t} = vec4(0.);\n          vec4 xR${e}C${t} = vec4(0.);`;for(let e=0;e<f;e++)for(let t=0;t<g;t++){const n=2*t;if(y+=`\n          xR = xRCorner + ${e*p};\n          xC = xCCorner + ${n*d};\n        `,1===h){if(n<m&&(y+=u%2==1?`\n                xCOffset = xC + 1;\n                if(xR >= 0 && xR < ${i} && xCOffset >= 0 && xCOffset < ${o}) {\n                  xTexelR${e}C${n} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= ${o}) {\n                    xTexelR${e}C${n}.zw = vec2(0.);\n                  }\n                } else {\n                  xTexelR${e}C${n} = vec4(0.);\n                }\n\n                xCOffset = xC + 1 - 2;\n                if(xR >= 0 && xR < ${i} && xCOffset >= 0 && xCOffset < ${o}) {\n                  vec4 previous = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= ${o}) {\n                    previous.zw = vec2(0.);\n                  }\n\n                  xR${e}C${n} = vec4(previous.zw, xTexelR${e}C${n}.xy);\n                } else {\n                  xR${e}C${n} = vec4(0, 0, xTexelR${e}C${n}.xy);\n                }\n              `:`\n                if(xR >= 0 && xR < ${i} && xC >= 0 && xC < ${o}) {\n                  xTexelR${e}C${n} = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR${e}C${n} = vec4(0.);\n                }\n\n                xR${e}C${n} = xTexelR${e}C${n};\n              `,n+1<m)){const t=u%2==0?r.util.nearestLargerEven(d):d;d%2==0&&u%2==1||d%2!=0&&u%2!=1?(y+=`\n                  xCOffset = xC + ${u%2} + ${t};\n\n                  if(xR >= 0 && xR < ${i} &&\n                    xCOffset >= 0 && xCOffset < ${o}) {\n                    xTexelR${e}C${n+2} = getX(batch, xR, xCOffset, d1);\n                  }\n                `,d>1&&(y+=`\n                    xCOffset -= 2;\n                    if(xR >= 0 && xR < ${i} &&\n                      xCOffset >= 0 && xCOffset < ${o}) {\n                      xTexelR${e}C${n} = getX(batch, xR, xCOffset, d1);\n                    } else {\n                      xTexelR${e}C${n} = vec4(0.);\n                    }\n                  `),y+=`\n                  xR${e}C${n+1} = vec4(\n                    xTexelR${e}C${n}.zw, xTexelR${e}C${n+2}.xy);\n                `):y+=`\n                  xCOffset = xC + ${t};\n\n                  if(xR >= 0 && xR < ${i} &&\n                    xCOffset >= 0 && xCOffset < ${o}) {\n                    xTexelR${e}C${n+2} = getX(batch, xR, xCOffset, d1);\n                  }\n\n                  xR${e}C${n+1} = xTexelR${e}C${n+2};\n                `}}else n<m&&(y+=`\n              if(xR >= 0 && xR < ${i}) {\n            `,u%2==1?(y+=`\n                xCOffset = xC + 1 - ${h};\n                if(xCOffset >= 0 && xCOffset < ${o}) {\n                  xTexelR${e}C${n} = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR${e}C${n} = vec4(0.);\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < ${o}) {\n                  xTexelR${e}C${n+2} = getX(batch, xR, xC + 1, d1);\n                } else {\n                  xTexelR${e}C${n+2} = vec4(0.);\n                }\n\n                xR${e}C${n} = vec4(\n                  xTexelR${e}C${n}.zw, xTexelR${e}C${n+2}.zw);\n              `,n+1<m&&(y+=`\n                  vec4 final = vec4(0.);\n                  xCOffset = xC + 1 + ${h};\n                  if(xCOffset >= 0 && xCOffset < ${o}) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xR${e}C${n+1} = vec4(xTexelR${e}C${n+2}.xy, final.xy);\n                `)):(y+=`\n                if(xC >= 0 && xC < ${o}) {\n                  xTexelR${e}C${n} = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR${e}C${n} = vec4(0.);\n                }\n\n                xCOffset = xC + ${h};\n                if(xCOffset >= 0 && xCOffset < ${o}) {\n                  xTexelR${e}C${n+2} = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR${e}C${n+2} = vec4(0.);\n                }\n\n                xR${e}C${n} = vec4(\n                  xTexelR${e}C${n}.xy, xTexelR${e}C${n+2}.xy);\n              `,n+1<m&&(y+=`\n                  xR${e}C${n+1} = vec4(\n                    xTexelR${e}C${n}.zw, xTexelR${e}C${n+2}.zw);\n                `)),y+="}");n<m&&(y+=`\n            vec4 wTexelR${e}C${n} = getW(${e}, ${n}, d1, q);\n            wR${e}C${n} = vec4(wTexelR${e}C${n}.xz, wTexelR${e}C${n}.xz);\n          `,n+1<m&&(y+=`\n              vec4 wTexelR${e}C${n+1} = getW(${e}, ${n+1}, d1, q);\n              wR${e}C${n+1} =\n                vec4(wTexelR${e}C${n+1}.xz, wTexelR${e}C${n+1}.xz);`))}for(let e=0;e<f;e++)for(let t=0;t<m;t++)y+=`dotProd += xR${e}C${t} * wR${e}C${t};`;let b="",x="";n&&(b=s?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:a?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`vec4 activation(vec4 x) {\n          ${n}\n        }`,x="result = activation(result);");const v=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),a&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${b}\n\n      const ivec2 strides = ivec2(${c}, ${h});\n      const ivec2 pads = ivec2(${l}, ${u});\n\n      void main() {\n\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2;\n        int q = 0;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        vec4 dotProd = vec4(0.);\n\n        ${y}\n\n        vec4 result = dotProd;\n        ${v}\n        ${x}\n        setOutput(result);\n      }\n    `}}const _a={kernelName:r.DepthwiseConv2dNative,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,filter:i}=t,{strides:o,pad:l,dilations:u,dimRoundingMode:c}=s;let h=u;null==h&&(h=[1,1]),r.util.assert(r.backend_util.eitherStridesOrDilationsAreOne(o,h),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${o} and dilations '${h}'`));const p=r.backend_util.computeConv2DInfo(a.shape,i.shape,o,h,l,c,!0);let d;return d=(0,r.env)().getBool("WEBGL_PACK_DEPTHWISECONV")&&p.strideWidth<=2&&p.outChannels/p.inChannels==1?new Ea(p):new Aa(p),n.runWebGLProgram(d,[a,i],"float32")}};class Ra{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,n=e.strideWidth,s=e.padInfo.top,a=e.padInfo.left,r=e.outChannels/e.inChannels;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${r} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${s};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${a};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Fa{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,s=e.strideHeight,a=e.strideWidth,r=t-1-e.padInfo.top,i=n-1-e.padInfo.left,o=e.outChannels/e.inChannels;this.userCode=`\n      const ivec2 pads = ivec2(${r}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${s}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${a}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${o}; dm++) {\n              int d2 = d1 * ${o} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const Da={kernelName:r.DepthwiseConv2dNativeBackpropFilter,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,dy:i}=t,{strides:o,dilations:l,pad:u,dimRoundingMode:c,filterShape:h}=s,p=r.backend_util.computeConv2DInfo(a.shape,h,o,l,u,c,!0),d=new Ra(p);return n.runWebGLProgram(d,[a,i],"float32")}},Oa={kernelName:r.DepthwiseConv2dNativeBackpropInput,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,filter:i}=t,{strides:o,dilations:l,pad:u,dimRoundingMode:c,inputShape:h}=s,p=r.backend_util.computeConv2DInfo(h,i.shape,o,l,u,c,!0),d=new Fa(p);return n.runWebGLProgram(d,[a,i],"float32")}};class Ma{constructor(e){this.variableNames=["X"],this.outputShape=[e,e],this.userCode="\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    "}}const za={kernelName:r.Diag,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t,a=[...s.shape,...s.shape],i=r.util.sizeFromShape(s.shape),o=wn({inputs:{x:s},backend:n,attrs:{shape:[i]}}),l=new Ma(i),u=n.runWebGLProgram(l,[o],o.dtype),c=wn({inputs:{x:u},backend:n,attrs:{shape:a}});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(u),c}};class La{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const{inHeight:t,inWidth:n,padInfo:s,strideHeight:a,strideWidth:r,filterHeight:i,filterWidth:o,dilationHeight:l,dilationWidth:u}=e,{top:c,left:h}=s;this.userCode=`\n      const ivec2 strides = ivec2(${a}, ${r});\n      const ivec2 pads = ivec2(${c}, ${h});\n      const float neg_infinity = -3.4e38;\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.w;\n        ivec2 outTopLeftCorner =\n            coords.yz * strides - pads;\n        int hBeg = outTopLeftCorner.x;\n        int wBeg = outTopLeftCorner.y;\n\n        float curVal = neg_infinity;\n        for (int h = 0; h < ${i}; h++) {\n          int hIn = hBeg + h * ${l};\n\n          if (hIn >= 0 && hIn < ${t}) {\n            for (int w = 0; w < ${o}; w++) {\n              int wIn = wBeg + w * ${u};\n\n              if (wIn >= 0 && wIn < ${n}) {\n                float xVal = getX(batch, hIn, wIn, d1);\n                float wVal = getW(h, w, d1);\n\n                float val = xVal + wVal;\n                if (val > curVal) {\n                  curVal = val;\n                }\n              }\n            }\n          }\n        }\n\n        float result = curVal;\n        setOutput(result);\n      }\n    `}}const Ba={kernelName:r.Dilation2D,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,filter:i}=t,{strides:o,pad:l,dilations:u}=s,c=r.backend_util.computeDilation2DInfo(a.shape,i.shape,o,l,"NHWC",u);let h;const p=new La(c);h=n.runWebGLProgram(p,[a,i],"float32");const d=wn({inputs:{x:h},backend:n,attrs:{shape:c.outShape}});return n.disposeIntermediateTensorInfo(h),d}},Pa=fn({opSnippet:"return (x >= 0.0) ? x : (exp(x) - 1.0);",packedOpSnippet:"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n"}),Va={kernelName:r.Elu,backendName:"webgl",kernelFunc:Pa},Wa={kernelName:r.EluGrad,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n}=e,{dy:s,y:a}=t,i=(0,r.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new nn("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n",s.shape,a.shape):new tn("return (b >= 1.0) ? a : a * (b + 1.0);",s.shape,a.shape);return n.runWebGLProgram(i,[s,a],s.dtype)}},Ua=mn({opSnippet:"return float(a == b);",packedOpSnippet:"\n  return vec4(equal(a, b));\n",dtype:"bool"}),Ga={kernelName:r.Equal,backendName:"webgl",kernelFunc:Ua},Ha=fn({opSnippet:`\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = ${r.backend_util.ERF_P};\n  float a1 = ${r.backend_util.ERF_A1};\n  float a2 = ${r.backend_util.ERF_A2};\n  float a3 = ${r.backend_util.ERF_A3};\n  float a4 = ${r.backend_util.ERF_A4};\n  float a5 = ${r.backend_util.ERF_A5};\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n`}),ja={kernelName:r.Erf,backendName:"webgl",kernelFunc:Ha},Xa="return exp(x);",qa=fn({opSnippet:Xa,packedOpSnippet:Xa,cpuKernelImpl:pt}),Ka={kernelName:r.Exp,backendName:"webgl",kernelFunc:qa};function Ya(e){const{inputs:t,attrs:n,backend:s}=e,{dim:a}=n,{input:i}=t,o=i.shape.length,l=i.shape.slice();let u=a;return a<0&&(r.util.assert(-(o+1)<=a,(()=>`Axis must be in the interval [${-(o+1)}, ${o}]`)),u=o+a+1),l.splice(u,0,1),wn({inputs:{x:i},backend:s,attrs:{shape:l}})}const Qa={kernelName:r.ExpandDims,backendName:"webgl",kernelFunc:Ya},Ja="return exp(x) - 1.0;",Za=fn({opSnippet:Ja,packedOpSnippet:Ja,cpuKernelImpl:dt}),er={kernelName:r.Expm1,backendName:"webgl",kernelFunc:Za};class tr{constructor(e,t,n){this.variableNames=["real","imag"];const s=t[1];this.outputShape=t;const a=n?`2.0 * ${Math.PI}`:`-2.0 * ${Math.PI}`,r=n?`${s}.0`:"1.0";let i;if("real"===e)i="return real * expR - imag * expI;";else{if("imag"!==e)throw new Error(`FFT component must be either "real" or "imag", got ${e}.`);i="return real * expI + imag * expR;"}this.userCode=`\n      const float exponentMultiplier = ${a};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${i}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${s});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${s}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${r};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `}}function nr(e,t,n){const s=n.texData.get(e.dataId),a=r.util.sizeFromShape(e.shape),i=e.shape[e.shape.length-1],o=wn({inputs:{x:e},backend:n,attrs:{shape:[a/i,i]}}),l=o.shape,u=new tr("real",l,t),c=new tr("imag",l,t),h=[{dataId:s.complexTensorInfos.real.dataId,dtype:s.complexTensorInfos.real.dtype,shape:l},{dataId:s.complexTensorInfos.imag.dataId,dtype:s.complexTensorInfos.imag.dtype,shape:l}],p=n.runWebGLProgram(u,h,"float32"),d=n.runWebGLProgram(c,h,"float32"),f=rn({inputs:{real:p,imag:d},backend:n});n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(d);const m=wn({inputs:{x:f},backend:n,attrs:{shape:e.shape}});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(f),m}const sr={kernelName:r.FFT,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t;return nr(s,!1,n)}};class ar{constructor(e,t){this.outputShape=[],this.variableNames=["x"],this.outputShape=e,this.userCode="\n      uniform float value;\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    "}getCustomSetupFunc(e){return(t,n)=>{null==this.valueLoc&&(this.valueLoc=t.getUniformLocationNoThrow(n,"value")),t.gl.uniform1f(this.valueLoc,e)}}}function rr(e){const{backend:t,attrs:n}=e,{shape:s,value:a}=n;let{dtype:i}=n;if(i=i||r.util.inferDtype(a),"string"===i){const e=r.util.getArrayFromDType(i,r.util.sizeFromShape(s));return e.fill(a),t.makeTensorInfo(s,i,e)}{const e=new ar(s,a),n=e.getCustomSetupFunc(a);return t.runWebGLProgram(e,[],i,n)}}const ir={kernelName:r.Fill,backendName:"webgl",kernelFunc:rr};class or{constructor(e){this.variableNames=["Image"],this.outputShape=[];const t=e[2];this.outputShape=e,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n\n          int coordX = ${t} - x;\n          float outputValue;\n          if(coordX >= 0 && coordX < ${t}) {\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\n          } else {\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const lr={kernelName:r.FlipLeftRight,backendName:"webgl",kernelFunc:({inputs:e,backend:t})=>{const{image:n}=e,s=t,a=new or(n.shape);return s.runWebGLProgram(a,[n],n.dtype)}},ur="return floor(x);",cr=fn({opSnippet:ur,packedOpSnippet:ur,cpuKernelImpl:ft}),hr={kernelName:r.Floor,backendName:"webgl",kernelFunc:cr},pr=mn({opSnippet:"\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n",packedOpSnippet:"\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n",dtype:"int32"}),dr={kernelName:r.FloorDiv,backendName:"webgl",kernelFunc:pr};class fr{constructor(e){this.variableNames=["A"];const t=de(),[n,s]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${s}.0, ${n}.0);\n\n        vec4 values = ${t.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `}}class mr{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const t=de(),[n,s]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${s}.0, ${n}.0);\n            vec4 values = ${t.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${t.output} = result;\n      }\n    `}}const gr={kernelName:r.FromPixels,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e;let{pixels:a}=t;const{numChannels:i}=s,o="undefined"!=typeof HTMLVideoElement&&a instanceof HTMLVideoElement,l="undefined"!=typeof HTMLImageElement&&a instanceof HTMLImageElement,[u,c]=o?[a.videoWidth,a.videoHeight]:[a.width,a.height],p=[c,u],d=[c,u,i];(l||o)&&(null==yr&&(yr=document.createElement("canvas").getContext("2d")),yr.canvas.width=u,yr.canvas.height=c,yr.drawImage(a,0,0,u,c),a=yr.canvas);const f=n.makeTensorInfo(p,"int32");n.texData.get(f.dataId).usage=h.PIXELS,n.gpgpu.uploadPixelDataToTexture(n.getTexture(f.dataId),a);const m=(0,r.env)().getBool("WEBGL_PACK")?new mr(d):new fr(d),g=n.runWebGLProgram(m,[f],"int32");return n.disposeData(f.dataId),g}};let yr;const br={kernelName:r.FusedConv2D,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,filter:i,bias:o,preluActivationWeights:l}=t,{strides:u,pad:c,dataFormat:h,dilations:p,dimRoundingMode:d,activation:f,leakyreluAlpha:m}=s,g=r.backend_util.convertConv2DDataFormat(h),y=r.backend_util.computeConv2DInfo(a.shape,i.shape,u,p,c,d,!1,g);let b;const x=[];if(1!==y.filterHeight||1!==y.filterWidth||1!==y.dilationHeight||1!==y.dilationWidth||1!==y.strideHeight||1!==y.strideWidth||"SAME"!==y.padInfo.type&&"VALID"!==y.padInfo.type)if((0,r.env)().getBool("WEBGL_CONV_IM2COL")&&1===a.shape[0])b=ra({x:a,filter:i,convInfo:y,backend:n,bias:o,activation:f,preluActivationWeights:l,leakyreluAlpha:m});else{const e=null!=o,t=null!=l,s="leakyrelu"===f,u=f?gn(f,!1):null,c=new ta(y,e,u,t,s),h=[a,i];if(o&&h.push(o),l&&h.push(l),s){const e=n.makeTensorInfo([],"float32",r.util.createScalarValue(m,"float32"));h.push(e),x.push(e)}b=n.runWebGLProgram(c,h,"float32")}else b=aa({x:a,filter:i,convInfo:y,backend:n,bias:o,activation:f,preluActivationWeights:l,leakyreluAlpha:m});const v=wn({inputs:{x:b},backend:n,attrs:{shape:y.outShape}});return x.push(b),x.forEach((e=>n.disposeIntermediateTensorInfo(e))),v}},xr={kernelName:r.FusedDepthwiseConv2D,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,filter:i,bias:o,preluActivationWeights:l}=t,{strides:u,pad:c,dilations:h,dimRoundingMode:p,activation:d,leakyreluAlpha:f}=s,m=[];let g=h;null==g&&(g=[1,1]),r.util.assert(r.backend_util.eitherStridesOrDilationsAreOne(u,g),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${u} and dilations '${g}'`));const y=r.backend_util.computeConv2DInfo(a.shape,i.shape,u,g,c,p,!0),b=(0,r.env)().getBool("WEBGL_PACK_DEPTHWISECONV")&&y.strideWidth<=2&&y.outChannels/y.inChannels==1,x=d?gn(d,b):null,v=[a,i],k=null!=o,w=null!=l,N="leakyrelu"===d;if(k&&v.push(o),w&&v.push(l),N){const e=n.makeTensorInfo([],"float32",r.util.createScalarValue(f,"float32"));v.push(e),m.push(e)}let I;I=b?new Ea(y,k,x,w,N):new Aa(y,k,x,w,N);const S=n.runWebGLProgram(I,v,"float32");return m.forEach((e=>n.disposeIntermediateTensorInfo(e))),S}};class vr{constructor(e,t,n){this.sliceDim=e,this.strides=t,this.variableNames=["x","indices"],this.outputShape=n;const s=nt(t.length),a=nt(n.length),r=this.sliceDim>1?"strides[j]":"strides";this.userCode=`\n        ${s} strides = ${s}(${this.strides});\n         void main() {\n          ${a} coords = getOutputCoords();\n          int flattenIndex = 0;\n          for (int j = 0; j < ${this.sliceDim}; j++) {\n            int index = round(getIndices(coords[0], j));\n            flattenIndex += index * ${r};\n          }\n          setOutput(getX(flattenIndex, coords[1]));\n        }\n      `}}const kr={kernelName:r.GatherNd,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{params:s,indices:a}=t,i=a.shape,o=i[i.length-1],[l,u,c,h]=r.backend_util.prepareAndValidate(s,a),p=wn({inputs:{x:a},backend:n,attrs:{shape:[u,o]}}),d=wn({inputs:{x:s},backend:n,attrs:{shape:[r.util.sizeFromShape(s.shape)/c,c]}}),f=new vr(o,h,[u,c]),m=n.runWebGLProgram(f,[d,p],d.dtype),g=wn({inputs:{x:m},backend:n,attrs:{shape:l}});return n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(m),g}};class wr{constructor(e,t){this.variableNames=["A","indices"],this.outputShape=t,this.rank=t.length;const n=nt(this.rank),s=function(e,t){const n=["resRC.x","resRC.y","resRC.z","resRC.w"],s=[];for(let t=0;t<e.length;t++)2===t?s.push("int(getIndices(resRC.x, resRC.z))"):s.push(`${n[t]}`);return s.join()}(e);this.userCode=`\n      void main() {\n        ${n} resRC = getOutputCoords();\n        setOutput(getA(${s}));\n      }\n    `}}const Nr={kernelName:r.GatherV2,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,indices:i}=t,{axis:o,batchDims:l}=s,u=r.util.parseAxisParam(o,a.shape)[0],c=r.backend_util.segment_util.collectGatherOpShapeInfo(a,i,u,l),h=r.util.sizeFromShape(i.shape),p=[],d=wn({inputs:{x:a},backend:n,attrs:{shape:[c.batchSize,c.outerSize,c.dimSize,c.sliceSize]}}),f=wn({inputs:{x:i},backend:n,attrs:{shape:[c.batchSize,h/c.batchSize]}});p.push(d),p.push(f);const m=[c.batchSize,c.outerSize,h/c.batchSize,c.sliceSize];if(n.shouldExecuteOnCPU([a,i])||"string"===a.dtype){const e=n.bufferSync(f),t=n.bufferSync(d),s=mt(t,e,m);return p.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(c.outputShape,s.dtype,s.values)}const g=new wr(d.shape,m),y=n.runWebGLProgram(g,[d,f],d.dtype);p.push(y);const b=wn({inputs:{x:y},backend:n,attrs:{shape:c.outputShape}});return p.forEach((e=>n.disposeIntermediateTensorInfo(e))),b}},Ir=mn({opSnippet:"return float(a > b);",packedOpSnippet:"\n  return vec4(greaterThan(a, b));\n",cpuKernelImpl:gt,dtype:"bool"}),Sr={kernelName:r.Greater,backendName:"webgl",kernelFunc:Ir},Tr=mn({opSnippet:"return float(a >= b);",packedOpSnippet:"\n  return vec4(greaterThanEqual(a, b));\n",dtype:"bool"}),Cr={kernelName:r.GreaterEqual,backendName:"webgl",kernelFunc:Tr},$r={kernelName:r.IFFT,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t;return nr(s,!0,n)}},Ar=fn({opSnippet:"return float(!isnan(x) && !isinf(x));",dtype:"bool"}),Er={kernelName:r.IsFinite,backendName:"webgl",kernelFunc:Ar},_r=fn({opSnippet:"return float(isinf(x));",dtype:"bool"}),Rr={kernelName:r.IsInf,backendName:"webgl",kernelFunc:_r},Fr=fn({opSnippet:"return float(isnan(x));",dtype:"bool"}),Dr={kernelName:r.IsNan,backendName:"webgl",kernelFunc:Fr},Or=mn({opSnippet:"return float(a < b);",packedOpSnippet:"\n  return vec4(lessThan(a, b));\n",cpuKernelImpl:yt,dtype:"bool"}),Mr={kernelName:r.Less,backendName:"webgl",kernelFunc:Or},zr=mn({opSnippet:"return float(a <= b);",packedOpSnippet:"\n  return vec4(lessThanEqual(a, b));\n",dtype:"bool"}),Lr={kernelName:r.LessEqual,backendName:"webgl",kernelFunc:zr},Br={kernelName:r.LinSpace,backendName:"webgl",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:s,stop:a,num:r}=n,i=bt(s,a,r);return t.makeTensorInfo([i.length],"float32",i)}},Pr=fn({opSnippet:"if (x < 0.0) return NAN;\n  return log(x);",packedOpSnippet:"\n  vec4 result = log(x);\n  vec4 isNaN = vec4(lessThan(x, vec4(0.0)));\n  result.r = isNaN.r == 1.0 ? NAN : result.r;\n  result.g = isNaN.g == 1.0 ? NAN : result.g;\n  result.b = isNaN.b == 1.0 ? NAN : result.b;\n  result.a = isNaN.a == 1.0 ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:xt}),Vr={kernelName:r.Log,backendName:"webgl",kernelFunc:Pr},Wr=fn({opSnippet:"return log(1.0 + x);"}),Ur={kernelName:r.Log1p,backendName:"webgl",kernelFunc:Wr},Gr=mn({opSnippet:"return float(a >= 1.0 && b >= 1.0);",packedOpSnippet:"\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n",dtype:"bool"}),Hr={kernelName:r.LogicalAnd,backendName:"webgl",kernelFunc:Gr},jr=fn({opSnippet:"return float(!(x >= 1.0));"}),Xr={kernelName:r.LogicalNot,backendName:"webgl",kernelFunc:jr},qr=mn({opSnippet:"return float(a >= 1.0 || b >= 1.0);",packedOpSnippet:"\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n",dtype:"bool"}),Kr={kernelName:r.LogicalOr,backendName:"webgl",kernelFunc:qr};class Yr{constructor(e,t,n,s,a){this.variableNames=["x"],this.outputShape=[];const r=t,i=e[3]-1;let o;this.outputShape=e;const l=`float(${n}) + float(${s}) * sum`;o=.5===a?`inversesqrt(${l})`:1===a?`1.0/(${l})`:`exp(log(${l}) * float(-${a}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${r}; j <= ${r}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${i}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${o};\n        setOutput(val);\n      }\n    `}}class Qr{constructor(e,t,n,s,a){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;const r=t,i=e[3]-1;let o;this.outputShape=e;const l=`float(${n}) + float(${s}) * sum`;o=.5===a?`inversesqrt(${l})`:1===a?`1.0/(${l})`:`exp(log(${l}) * float(-${a}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${r};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${r}; j <= ${r}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${i}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${o};\n        setOutput(result);\n      }\n    `}}const Jr={kernelName:r.LRN,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{depthRadius:i,bias:o,alpha:l,beta:u}=s,c=(0,r.env)().getBool("WEBGL_PACK_NORMALIZATION")?new Qr(a.shape,i,o,l,u):new Yr(a.shape,i,o,l,u);return n.runWebGLProgram(c,[a],a.dtype)}};class Zr{constructor(e,t,n,s,a){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=e,this.depth=e[3],this.depthRadius=t,this.bias=n,this.alpha=s,this.beta=a,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${t})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${t} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${s}) * norm + float(${n});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${s})\n                * float(${a})\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${a});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `}}const ei={kernelName:r.LRNGrad,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:a,y:r,dy:i}=t,{depthRadius:o,bias:l,alpha:u,beta:c}=s,h=new Zr(a.shape,o,l,u,c);return n.runWebGLProgram(h,[a,r,i],a.dtype)}};function ti(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{reductionIndices:i,keepDims:o}=s,l=a.shape.length,u=r.util.parseAxisParam(i,a.shape);let c=u;const h=r.backend_util.getAxesPermutation(c,l),p=null!=h,d=n.shouldExecuteOnCPU([a]);let f=a;if(p){if(d){const e=n.texData.get(f.dataId).values,t=new Array(l);for(let e=0;e<t.length;e++)t[e]=a.shape[h[e]];const s=Dt(e,a.shape,a.dtype,h,t);f=n.makeTensorInfo(t,a.dtype),n.texData.get(f.dataId).values=s}else f=An(a,h,n);c=r.backend_util.getInnerMostAxes(c.length,l)}r.backend_util.assertAxesAreInnerMostDims("max",c,l);const[m,g]=r.backend_util.computeOutAndReduceShapes(f.shape,c);let y,b=m;if(o&&(b=r.backend_util.expandShapeToKeepDim(m,u)),d){const e=n.texData.get(f.dataId).values,t=vt(e,r.util.sizeFromShape(g),b,a.dtype);y=n.makeTensorInfo(b,a.dtype),n.texData.get(y.dataId).values=t}else y=function(e,t,n,s){const a=r.util.sizeFromShape(t),i=wn({inputs:{x:e},attrs:{shape:[r.util.sizeFromShape(e.shape)/a,a]},backend:s}),o=Tn(i,e.dtype,"max",s),l=wn({inputs:{x:o},attrs:{shape:n},backend:s});return s.disposeIntermediateTensorInfo(i),s.disposeIntermediateTensorInfo(o),l}(f,g,b,n);return p&&n.disposeIntermediateTensorInfo(f),y}const ni={kernelName:r.Max,backendName:"webgl",kernelFunc:ti},si=mn({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return max(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(max(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:kt}),ai={kernelName:r.Maximum,backendName:"webgl",kernelFunc:si},ri={kernelName:r.MaxPool,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t;he(a,"maxPool");const{filterSize:i,strides:o,pad:l,dimRoundingMode:u}=s;r.util.assert(r.backend_util.eitherStridesOrDilationsAreOne(o,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`));const c=r.backend_util.computePool2DInfo(a.shape,i,o,1,l,u);if(1===c.filterWidth&&1===c.filterHeight&&r.util.arraysEqual(c.inShape,c.outShape))return sn({inputs:{x:a},backend:n});const h=new ds(c,"max",!1);return n.runWebGLProgram(h,[a],a.dtype)}},ii={kernelName:r.MaxPool3D,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{filterSize:i,strides:o,pad:l,dataFormat:u,dimRoundingMode:c}=s,h=r.backend_util.computePool3DInfo(a.shape,i,o,[1,1,1],l,c,u),p=new fs(h,"max",!1);return n.runWebGLProgram(p,[a],a.dtype)}};class oi{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideHeight,n=e.strideWidth,s=e.dilationHeight,a=e.effectiveFilterHeight,r=e.effectiveFilterWidth,i=a-1-e.padInfo.top,o=r-1-e.padInfo.left,l=a*r-1;this.userCode=`\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${a};\n          wR += ${s}) {\n          float dyR = float(dyRCorner + wR) / ${t}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${r}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${n}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${l} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${r} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class li{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideDepth,n=e.strideHeight,s=e.strideWidth,a=e.dilationDepth,r=e.dilationHeight,i=e.dilationWidth,o=e.effectiveFilterDepth,l=e.effectiveFilterHeight,u=e.effectiveFilterWidth,c=o-1-e.padInfo.front,h=l-1-e.padInfo.top,p=u-1-e.padInfo.left,d=o*l*u-1;this.userCode=`\n      const ivec3 pads = ivec3(${c}, ${h}, ${p});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${o};\n           wD += ${a}) {\n          float dyD = float(dyDCorner + wD) / ${t}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${l};\n              wR += ${r}) {\n            float dyR = float(dyRCorner + wR) / ${n}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${u};\n                wC += ${i}) {\n              float dyC = float(dyCCorner + wC) / ${s}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${d} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${l} * ${u} +\n                  wR * ${u} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const ui={kernelName:r.MaxPool3DGrad,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,input:i}=t,o=i,{filterSize:l,strides:u,pad:c,dimRoundingMode:h}=s,p=r.backend_util.computePool3DInfo(o.shape,l,u,[1,1,1],c,h),d=new fs(p,"max",!0),f=n.runWebGLProgram(d,[o],o.dtype),m=new li(p),g=n.runWebGLProgram(m,[a,f],o.dtype);return n.disposeIntermediateTensorInfo(f),g}},ci={kernelName:r.MaxPoolGrad,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,input:i,output:o}=t,l=i;he([i,o],"maxPoolGrad");const{filterSize:u,strides:c,pad:h,dimRoundingMode:p}=s,d=r.backend_util.computePool2DInfo(l.shape,u,c,1,h,p),f=new ds(d,"max",!0),m=n.runWebGLProgram(f,[l],l.dtype),g=new oi(d),y=n.runWebGLProgram(g,[a,m],l.dtype);return n.disposeIntermediateTensorInfo(m),y}},hi={kernelName:r.MaxPoolWithArgmax,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:s}=e,{filterSize:a,strides:i,pad:o,includeBatchInIndex:l}=t,u=n;r.util.assert(4===s.shape.length,(()=>`Error in maxPool: input must be rank 4 but got rank ${s.shape.length}.`));const c=[1,1];r.util.assert(r.backend_util.eitherStridesOrDilationsAreOne(i,c),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '${c}'`));const h=r.backend_util.computePool2DInfo(s.shape,a,i,c,o),[p,d]=function(e,t,n,s){let a=new ds(n,"max",!1);const r=s.runWebGLProgram(a,[e],"float32");return a=new ds(n,"max",!0,!0,t),[r,s.runWebGLProgram(a,[e],"float32")]}(s,l,h,u);return[p,d]}},pi={kernelName:r.Mean,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:s}=e,{keepDims:a,axis:i}=t,o=n,l=s.shape.length,u=r.util.parseAxisParam(i,s.shape);let c=u;const h=r.backend_util.getAxesPermutation(c,l),p=null!=h,d=o.shouldExecuteOnCPU([s]),f=[];let m=s;if(p){if(d){const e=o.texData.get(m.dataId).values,t=new Array(l);for(let e=0;e<t.length;e++)t[e]=s.shape[h[e]];const n=Dt(e,s.shape,s.dtype,h,t);m=o.makeTensorInfo(t,s.dtype),o.texData.get(m.dataId).values=n}else m=An(s,h,o);f.push(m),c=r.backend_util.getInnerMostAxes(c.length,l)}r.backend_util.assertAxesAreInnerMostDims("sum",c,l);const[g,y]=r.backend_util.computeOutAndReduceShapes(m.shape,c);let b=g;a&&(b=r.backend_util.expandShapeToKeepDim(g,u));const x=function(e,t,n,s){const a=r.util.sizeFromShape(t),i=wn({inputs:{x:e},attrs:{shape:[r.util.sizeFromShape(e.shape)/a,a]},backend:s}),o=Tn(i,"float32","mean",s),l=wn({inputs:{x:o},attrs:{shape:n},backend:s});return s.disposeIntermediateTensorInfo(i),s.disposeIntermediateTensorInfo(o),l}(m,y,b,o);for(const e of f)o.disposeIntermediateTensorInfo(e);return x}},di={kernelName:r.Min,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:i,keepDims:o}=s,l=a.shape.length,u=r.util.parseAxisParam(i,a.shape);let c=u;const h=r.backend_util.getAxesPermutation(c,l);let p=a;null!=h&&(p=Rn({inputs:{x:a},backend:n,attrs:{perm:h}}),c=r.backend_util.getInnerMostAxes(c.length,a.shape.length)),r.backend_util.assertAxesAreInnerMostDims("min",c,l);const[d,f]=r.backend_util.computeOutAndReduceShapes(p.shape,c),m=wn({inputs:{x:p},backend:n,attrs:{shape:[-1,r.util.sizeFromShape(f)]}}),g=Tn(m,m.dtype,"min",n);let y;return y=wn(o?{inputs:{x:g},backend:n,attrs:{shape:r.backend_util.expandShapeToKeepDim(d,u)}}:{inputs:{x:g},backend:n,attrs:{shape:d}}),n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(g),null!=h&&n.disposeIntermediateTensorInfo(p),y}},fi=mn({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return min(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(min(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:wt}),mi={kernelName:r.Minimum,backendName:"webgl",kernelFunc:fi};class gi{constructor(e,t,n){this.variableNames=["x"],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const s=e.length,a=nt(s),r=t.map((e=>e[0])).join(","),i=t.map(((t,n)=>t[0]+e[n])).join(","),o=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,s),l="reflect"===n?0:1;this.userCode=1!==s?`\n      ${a} start = ${a}(${r});\n      ${a} end = ${a}(${i});\n\n      void main() {\n        ${a} outC = getOutputCoords();\n        for (int i = 0; i < ${s}; i++) {\n          if (outC[i] < start[i]) {\n            outC[i] = start[i] * 2 - outC[i] - ${l};\n          } else if(outC[i] >= end[i]) {\n            outC[i] = (end[i] - 1) * 2 - outC[i] + ${l};\n          }\n        }\n        ${a} coords = outC - start;\n        setOutput(getX(${o}));\n      }\n    `:`\n        int start = ${r};\n        int end = ${i};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start) {\n            outC = start * 2 - outC - ${l};\n          } else if(outC >= end) {\n            outC = (end - 1) * 2 - outC + ${l};\n          }\n          setOutput(getX(outC - start));\n        }\n      `}}class yi{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const s=e.length,a=nt(s),r=t.map((e=>e[0])).join(","),i=t.map(((t,n)=>t[0]+e[n])).join(","),o=zt("rc",s),l=zt("source",s),u=`${o[s-1]} < ${this.outputShape[s-1]}`,c=1===s?"source":`vec2(${l.slice(-2).join()})`,h="reflect"===n?0:1;let p="";if(1===s){const e=`\n        ${a} source = rc;\n        if (source < start) {\n          source = start * 2 - source - ${h};\n        } else if (source >= end) {\n          source = (end - 1) * 2 - source + ${h};\n        }\n        source -= start;\n      `;p=`\n        ${a} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${l.join()}), ${c});\n        ${o[s-1]} += 1;\n        if(${u}) {\n          ${e}\n          result[1] = getChannel(getX(${l.join()}), ${c});\n        }\n      `}else{const e=`\n        ${a} source = rc;\n        ${a} lt = ${a}(lessThan(source, start));\n        ${a} gte = ${a}(greaterThanEqual(source, end));\n        ${a} orig = 1 - (lt + gte);\n        source = orig * source +\n                lt * (start * 2 - source - ${h}) +\n                gte * ((end - 1) * 2 - source + ${h});\n        source -= start;\n      `;p=`\n        ${a} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${l.join()}), ${c});\n        ${o[s-1]} += 1;\n        if(${u}) {\n          ${e}\n          result[1] = getChannel(getX(${l.join()}), ${c});\n        }\n        rc = outputLoc;\n        ${o[s-2]} += 1;\n        if(${o[s-2]} < ${this.outputShape[s-2]}) {\n          ${e}\n          result[2] = getChannel(getX(${l.join()}), ${c});\n          ${o[s-1]} += 1;\n          if(${u}) {\n            ${e}\n            result[3] = getChannel(getX(${l.join()}), ${c});\n          }\n        }\n      `}this.userCode=`\n      const ${a} start = ${a}(${r});\n      const ${a} end = ${a}(${i});\n\n      void main() {\n        ${a} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${p}\n        setOutput(result);\n      }\n    `}}const bi={kernelName:r.MirrorPad,backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s}=e,{paddings:a,mode:i}=n,o=(0,r.env)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new yi(s.shape,a,i):new gi(s.shape,a,i);return t.runWebGLProgram(o,[s],s.dtype)}},xi=mn({opSnippet:"if (b == 0.0) return NAN;\n  return mod(a, b);",packedOpSnippet:"\n  vec4 result = mod(a, b);\n  vec4 isNaN = vec4(equal(b, vec4(0.0)));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"}),vi={kernelName:r.Mod,backendName:"webgl",kernelFunc:xi};class ki{constructor(e,t,n){this.variableNames=["probs"],this.outputShape=[e,n],this.userCode=`\n      uniform float seed;\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${t-1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${t-1}));\n      }\n    `}getCustomSetupFunc(e){return(t,n)=>{null==this.seedLoc&&(this.seedLoc=t.getUniformLocation(n,"seed")),t.gl.uniform1f(this.seedLoc,e)}}}const wi=mn({opSnippet:"\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;",packedOpSnippet:"\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n",checkOutOfBounds:!0}),Ni={kernelName:r.RealDiv,backendName:"webgl",kernelFunc:wi},Ii="return a - b;",Si=mn({opSnippet:Ii,packedOpSnippet:Ii,supportsComplex:!0,cpuKernelImpl:_t}),Ti={kernelName:r.Sub,backendName:"webgl",kernelFunc:Si};function Ci(e){const{inputs:t,backend:n,attrs:s}=e,{logits:a}=t,{dim:i}=s,o=r.util.parseAxisParam([i],a.shape),l=ti({inputs:{x:a},backend:n,attrs:{reductionIndices:o,keepDims:!1}}),u=r.backend_util.expandShapeToKeepDim(l.shape,o),c=wn({inputs:{x:l},backend:n,attrs:{shape:u}}),h=Si({inputs:{a,b:c},backend:n}),p=qa({inputs:{x:h},backend:n}),d=En({inputs:{x:p},backend:n,attrs:{axis:o,keepDims:!1}}),f=wn({inputs:{x:d},backend:n,attrs:{shape:u}}),m=wi({inputs:{a:p,b:f},backend:n});return n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(c),n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),m}const $i={kernelName:r.Softmax,backendName:"webgl",kernelFunc:Ci},Ai={kernelName:r.Multinomial,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{logits:a}=t,{numSamples:r,seed:i,normalized:o}=s,l=o?a:Ci({inputs:{logits:a},backend:n,attrs:{dim:a.shape.length-1}}),u=l.shape[0],c=l.shape[1],h=new ki(u,c,r),p=h.getCustomSetupFunc(i),d=n.runWebGLProgram(h,[l],"int32",p);return o||n.disposeIntermediateTensorInfo(l),d}},Ei="return -x;",_i={kernelName:r.Neg,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t;if(n.shouldExecuteOnCPU([s])){const e=n.texData.get(s.dataId),[t,a]=It(e.values,s.shape,s.dtype);return n.makeTensorInfo(a,s.dtype,t)}let a;return a=(0,r.env)().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new Xt(s.shape,Ei):new Gt(s.shape,Ei),n.runWebGLProgram(a,[s],s.dtype)}},Ri=r.kernel_impls.nonMaxSuppressionV3Impl,Fi={kernelName:r.NonMaxSuppressionV3,backendName:"webgl",kernelFunc:function(e){r.backend_util.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:s}=e,{boxes:a,scores:i}=t,{maxOutputSize:o,iouThreshold:l,scoreThreshold:u}=s,c=n.readSync(a.dataId),h=n.readSync(i.dataId),{selectedIndices:p}=Ri(c,h,o,l,u);return n.makeTensorInfo([p.length],"int32",new Int32Array(p))}},Di=r.kernel_impls.nonMaxSuppressionV4Impl,Oi={kernelName:r.NonMaxSuppressionV4,backendName:"webgl",kernelFunc:function(e){r.backend_util.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:s}=e,{boxes:a,scores:i}=t,{maxOutputSize:o,iouThreshold:l,scoreThreshold:u,padToMaxOutputSize:c}=s,h=n.readSync(a.dataId),p=n.readSync(i.dataId),{selectedIndices:d,validOutputs:f}=Di(h,p,o,l,u,c);return[n.makeTensorInfo([d.length],"int32",new Int32Array(d)),n.makeTensorInfo([],"int32",new Int32Array([f]))]}},Mi=r.kernel_impls.nonMaxSuppressionV5Impl,zi={kernelName:r.NonMaxSuppressionV5,backendName:"webgl",kernelFunc:function(e){r.backend_util.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:s}=e,{boxes:a,scores:i}=t,{maxOutputSize:o,iouThreshold:l,scoreThreshold:u,softNmsSigma:c}=s,h=n.readSync(a.dataId),p=n.readSync(i.dataId),d=o,f=l,m=u,g=c,{selectedIndices:y,selectedScores:b}=Mi(h,p,d,f,m,g);return[n.makeTensorInfo([y.length],"int32",new Int32Array(y)),n.makeTensorInfo([b.length],"float32",new Float32Array(b))]}};class Li{constructor(e,t,n,s){this.variableNames=["indices"],this.outputShape=[e,t],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${s}), float(${n}),\n                      float(index == coords.y)));\n      }\n    `}}const Bi={kernelName:r.OneHot,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{indices:a}=t,{depth:i,onValue:o,offValue:l}=s,u=r.util.sizeFromShape(a.shape),c=new Li(u,i,o,l),h=wn({inputs:{x:a},backend:n,attrs:{shape:[u]}}),p=n.runWebGLProgram(c,[h],a.dtype);n.disposeIntermediateTensorInfo(h);const d=wn({inputs:{x:p},backend:n,attrs:{shape:[...a.shape,i]}});return n.disposeIntermediateTensorInfo(p),d}};function Pi(e){const{inputs:t,backend:n}=e,{x:s}=t;if("complex64"===s.dtype){const e=Ds({inputs:{input:s},backend:n}),t=Pi({inputs:{x:e},backend:n}),a=Ks({inputs:{input:s},backend:n}),r=Pi({inputs:{x:a},backend:n}),i=rn({inputs:{real:t,imag:r},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(r),i}return rr({attrs:{shape:s.shape,dtype:s.dtype,value:"string"===s.dtype?"":0},backend:n})}const Vi={kernelName:r.ZerosLike,backendName:"webgl",kernelFunc:Pi},Wi={kernelName:r.OnesLike,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:s}=t,{x:a}=n;if("string"===a.dtype)throw new Error("onesLike is not supported under string dtype");if("complex64"===a.dtype){const t=Ds({inputs:{input:a},backend:s}),n=e({inputs:{x:t},backend:s}),r=Ks({inputs:{input:a},backend:s}),i=Pi({inputs:{x:r},backend:s}),o=rn({inputs:{real:n,imag:i},backend:s});return s.disposeIntermediateTensorInfo(t),s.disposeIntermediateTensorInfo(n),s.disposeIntermediateTensorInfo(r),s.disposeIntermediateTensorInfo(i),o}return rr({attrs:{shape:a.shape,dtype:a.dtype,value:1},backend:s})}},Ui={kernelName:r.Pack,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{axis:a}=s;if(1===t.length)return Ya({inputs:{input:t[0]},backend:n,attrs:{dim:a}});const i=t[0].shape,o=t[0].dtype;t.forEach((e=>{r.util.assertShapesMatch(i,e.shape,"All tensors passed to stack must have matching shapes"),r.util.assert(o===e.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));const l=[],u=Zs({inputs:t.map((e=>{const t=Ya({inputs:{input:e},backend:n,attrs:{dim:a}});return l.push(t),t})),backend:n,attrs:{axis:a}});return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),u}};class Gi{constructor(e,t,n){this.variableNames=["x"],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const s=e.length,a=nt(s),r=t.map((e=>e[0])).join(","),i=t.map(((t,n)=>t[0]+e[n])).join(","),o=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,s);this.userCode=1!==s?`\n      ${a} start = ${a}(${r});\n      ${a} end = ${a}(${i});\n      uniform float value;\n\n      void main() {\n        ${a} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(value);\n        } else {\n          ${a} coords = outC - start;\n          setOutput(getX(${o}));\n        }\n      }\n    `:`\n        int start = ${r};\n        int end = ${i};\n        uniform float value;\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(value);\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `}getCustomSetupFunc(e){return(t,n)=>{null==this.valueLoc&&(this.valueLoc=t.getUniformLocationNoThrow(n,"value")),t.gl.uniform1f(this.valueLoc,e)}}}class Hi{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const s=e.length,a=nt(s),r=t.map((e=>e[0])).join(","),i=t.map(((t,n)=>t[0]+e[n])).join(","),o=zt("rc",s),l=zt("source",s),u=`${o[s-1]} < ${this.outputShape[s-1]}`,c=1===s?"source":`vec2(${l.slice(-2).join()})`,h=[`${a} rc = outputLoc;`,`${o[s-1]} += 1;\n       if(${u}) {\n      `,1===s?"":`}\n       rc = outputLoc;\n       ${o[s-2]} += 1;\n       if(${o[s-2]} < ${this.outputShape[s-2]}) {`,1===s?"":`  ${o[s-1]} += 1;\n         if(${u}) {`],p=1===s?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";let d="";for(let e=0,t=1===s?2:4;e<t;e++)d+=`\n        ${h[e]}\n        if (${p}) {\n          result[${e}] = float(value);\n        } else {\n          ${a} source = rc - start;\n          result[${e}] = getChannel(getX(${l.join()}), ${c});\n        }\n      `;d+=1===s?"} ":"}}",this.userCode=`\n      const ${a} start = ${a}(${r});\n      const ${a} end = ${a}(${i});\n      uniform float value;\n\n      void main() {\n        ${a} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${d}\n        setOutput(result);\n      }\n    `}getCustomSetupFunc(e){return(t,n)=>{null==this.valueLoc&&(this.valueLoc=t.getUniformLocationNoThrow(n,"value")),t.gl.uniform1f(this.valueLoc,e)}}}const ji=e=>{const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{paddings:i,constantValue:o}=s,l=(0,r.env)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Hi(a.shape,i,o):new Gi(a.shape,i,o),u=l.getCustomSetupFunc(o);return n.runWebGLProgram(l,[a],a.dtype,u)},Xi={kernelName:r.PadV2,backendName:"webgl",kernelFunc:ji},qi=mn({opSnippet:"\n  if(a < 0.0 && floor(b) < b){\n    return NAN;\n  }\n  if (b == 0.0) {\n    return 1.0;\n  }\n  return (round(mod(b, 2.0)) != 1) ?\n      pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",packedOpSnippet:"\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"}),Ki={kernelName:r.Pow,backendName:"webgl",kernelFunc:qi},Yi={kernelName:r.Prod,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:i,keepDims:o}=s,l=a.shape.length,u=[],c=r.util.parseAxisParam(i,a.shape);let h=c;const p=r.backend_util.getAxesPermutation(h,l);let d,f=a;if(null!=p&&(f=Rn({inputs:{x:a},backend:n,attrs:{perm:p}}),h=r.backend_util.getInnerMostAxes(h.length,l),u.push(f)),r.backend_util.assertAxesAreInnerMostDims("prod",h,l),n.shouldExecuteOnCPU([f])){const e=n.texData.get(f.dataId).values,{outVals:t,outShape:s,outDtype:a}=St(f.shape,f.dtype,e,h);d=n.makeTensorInfo(s,a,t)}else{const[e,t]=r.backend_util.computeOutAndReduceShapes(f.shape,h),s=r.util.sizeFromShape(t),i=wn({inputs:{x:f},backend:n,attrs:{shape:[-1,s]}}),o=Tn(i,(0,r.sumOutType)(a.dtype),"prod",n);d=wn({inputs:{x:o},backend:n,attrs:{shape:e}}),u.push(i),u.push(o)}if(o){u.push(d);const e=r.backend_util.expandShapeToKeepDim(d.shape,c);d=wn({inputs:{x:d},backend:n,attrs:{shape:e}})}return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),d}},Qi=e=>{const{backend:t,attrs:n}=e,{start:s,stop:a,step:r,dtype:i}=n,o=Tt(s,a,r,i);return t.makeTensorInfo([o.length],i,o)},Ji={kernelName:r.Range,backendName:"webgl",kernelFunc:Qi},Zi=fn({opSnippet:"return 1.0 / x;"}),eo={kernelName:r.Reciprocal,backendName:"webgl",kernelFunc:Zi},to=fn({opSnippet:"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : x;\n",packedOpSnippet:"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),no={kernelName:r.Relu,backendName:"webgl",kernelFunc:to},so=fn({opSnippet:"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",packedOpSnippet:"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),ao={kernelName:r.Relu6,backendName:"webgl",kernelFunc:so};class ro{constructor(e,t,n,s,a){this.variableNames=["A"],this.outputShape=[];const[r,i,o,l]=e;this.outputShape=[r,t,n,l];const u=[s&&t>1?i-1:i,s&&n>1?o-1:o],c=[s&&t>1?t-1:t,s&&n>1?n-1:n];let h;h=a?"(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]});\n      const vec2 inputShapeRC = vec2(${i}.0, ${o}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${h};\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `}}class io{constructor(e,t,n,s,a){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[r,i,o,l]=e;this.outputShape=[r,t,n,l];const u=[s&&t>1?i-1:i,s&&n>1?o-1:o],c=[s&&t>1?t-1:t,s&&n>1?n-1:n];let h;h=a?"(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]},\n          ${u[1]/c[1]});\n      const vec3 inputShapeRC = vec3(${i}.0, ${o}.0,\n                                     ${o}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${h};\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${l-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `}}const oo={kernelName:r.ResizeBilinear,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:a}=t,{alignCorners:i,halfPixelCenters:o,size:l}=s,[u,c]=l,h=(0,r.env)().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new io(a.shape,u,c,i,o):new ro(a.shape,u,c,i,o);return n.runWebGLProgram(h,[a],"float32")}};class lo{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,s,a]=t,[,r,i]=e,o=[n&&r>1?s-1:s,n&&i>1?a-1:a],l=[n&&r>1?r-1:r,n&&i>1?i-1:i],u=o[0]/l[0],c=o[1]/l[1],h=1/u,p=1/c,d=2*Math.ceil(h)+2,f=2*Math.ceil(p)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${u});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${p});\n\n        const int winHeight = int(${d});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${r}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${s-1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${a-1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const uo={kernelName:r.ResizeBilinearGrad,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:a,dy:r}=t,{alignCorners:i}=s,o=new lo(r.shape,a.shape,i);return n.runWebGLProgram(o,[r],r.dtype)}};class co{constructor(e,t,n,s,a){this.variableNames=["A"],this.outputShape=[];const[r,i,o,l]=e;this.outputShape=[r,t,n,l];const u=[s&&t>1?i-1:i,s&&n>1?o-1:o],c=[s&&t>1?t-1:t,s&&n>1?n-1:n],h=s?"0.5":"0.0";let p;p=a?"max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]});\n      const vec2 inputShapeRC = vec2(${i}.0, ${o}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${p};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${h})));\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `}}const ho={kernelName:r.ResizeNearestNeighbor,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:a}=t,{alignCorners:r,halfPixelCenters:i,size:o}=s,[l,u]=o,c=new co(a.shape,l,u,r,i);return n.runWebGLProgram(c,[a],a.dtype)}};class po{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,s,a]=t,[,r,i]=e,o=[n&&r>1?s-1:s,n&&i>1?a-1:a],l=[n&&r>1?r-1:r,n&&i>1?i-1:i],u=o[0]/l[0],c=o[1]/l[1],h=1/u,p=1/c,d=2*Math.ceil(h)+2,f=2*Math.ceil(p)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${u});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${p});\n\n        const int winHeight = int(${d});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${r}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${o[0]}) *\n                (float(dyR) / float(${l[0]}));\n\n            float sourceFracCol =\n                float(${o[1]}) *\n                  (float(dyC) / float(${l[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${s}) - 1),\n                ${n} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${a}) - 1),\n                ${n} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const fo={kernelName:r.ResizeNearestNeighborGrad,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:a,dy:r}=t,{alignCorners:i}=s,o=new po(r.shape,a.shape,i);return n.runWebGLProgram(o,[r],r.dtype)}};class mo{constructor(e,t){this.variableNames=["x"];const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);if(this.outputShape=e,1===n)return void(this.userCode=`\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${e[0]} - coord - 1));\n        }\n      `);const s=e.map(((n,s)=>(n=>-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - coords[${n}] - 1`:`coords[${n}]`)(s))).join(","),a=nt(n);this.userCode=`\n      void main() {\n        ${a} coords = getOutputCoords();\n        setOutput(getX(${s}));\n      }\n    `}}class go{constructor(e,t){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);this.outputShape=e;const s=zt("rc",n),a=`${s[n-1]} + 1 < ${this.outputShape[n-1]}`,r=`${s[n-2]} + 1 < ${this.outputShape[n-2]}`,i=nt(n);function o(n){const s=e.map(((s,a)=>function(n,s){return-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - ${s[n]} - 1`:`${s[n]}`}(a,n)));return`getChannel(getX(${s.join(",")}), vec2(${s.slice(-2).join(",")}))`}this.userCode=1===n?`\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${e[0]} - rc - 1),\n            ${e[0]} - rc - 1);\n          if(${a}){\n              result.g = getChannel(getX(${e[0]} - (rc  + 1) - 1),\n                ${e[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `:`\n        void main() {\n          ${i} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${function(e){return o(e)}(s.slice())};\n          if(${a}){\n            result.g = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",o(e)}(s.slice())};\n          }\n          if(${r}) {\n            result.b = ${function(e){return e[n-2]="("+e[n-2]+" + 1)",o(e)}(s.slice())};\n            if(${a}) {\n              result.a = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",e[n-2]="("+e[n-2]+" + 1)",o(e)}(s.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `}}const yo={kernelName:r.Reverse,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{dims:i}=s,o=a.shape.length,l=r.util.parseAxisParam(i,a.shape);if(0===o)return sn({inputs:{x:a},backend:n});const u=(0,r.env)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new go(a.shape,l):new mo(a.shape,l);return n.runWebGLProgram(u,[a],a.dtype)}};class bo{constructor(e,t){this.variableNames=["Image"],this.outputShape=[];const n=e[1],s=e[2];this.outputShape=e;let a="";a="number"==typeof t?`float outputValue = ${t.toFixed(2)};`:`\n        vec3 fill = vec3(${t.join(",")});\n        float outputValue = fill[coords[3]];`,this.userCode=`\n        uniform vec4 params;\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - params[0]) * params[3] -\n            (float(y) - params[1]) * params[2];\n          float coordYFloat = (float(x) - params[0]) * params[2] +\n            (float(y) - params[1]) * params[3];\n          int coordX = int(round(coordXFloat + params[0]));\n          int coordY = int(round(coordYFloat + params[1]));\n          ${a}\n          if(coordX >= 0 && coordX < ${s} && coordY >= 0 && coordY < ${n}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}getCustomSetupFunc(e,t,n,s){return(a,r)=>{null==this.paramsLoc&&(this.paramsLoc=a.getUniformLocationNoThrow(r,"params")),a.gl.uniform4f(this.paramsLoc,e,t,n,s)}}}const xo={kernelName:r.RotateWithOffset,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:s}=e,{radians:a,fillValue:i,center:o}=t,l=n,u=new bo(s.shape,i),[c,h]=r.backend_util.getImageCenter(o,s.shape[1],s.shape[2]),p=u.getCustomSetupFunc(c,h,Math.sin(a),Math.cos(a));return l.runWebGLProgram(u,[s],s.dtype,p)}},vo=fn({opSnippet:"\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n"}),ko={kernelName:r.Round,backendName:"webgl",kernelFunc:vo},wo=fn({opSnippet:"return inversesqrt(x);",cpuKernelImpl:Ct}),No={kernelName:r.Rsqrt,backendName:"webgl",kernelFunc:wo};class Io{constructor(e,t,n,s,a,r,i=!0){this.variableNames=["updates","indices","defaultValue"],this.outputShape=r;const o=nt(a.length),l=nt(r.length);let u="";1===n?u="i":2===n&&(u="i, j");const c=`getIndices(${u})`;let h="";1===s?h="i":2===s&&(h="i, coords[1]");const p=`getUpdates(${h})`,d=t>1?"strides[j]":"strides";this.userCode=`\n        ${o} strides = ${o}(${a});\n\n        void main() {\n          ${l} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${e}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${t}; j++) {\n              int index = round(${c});\n              flattenedIndex += index * ${d};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${p};\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      `}}const So={kernelName:r.ScatterNd,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{indices:a,updates:i}=t,{shape:o}=s,{sliceRank:l,numUpdates:u,sliceSize:c,strides:h,outputSize:p}=r.backend_util.calculateShapes(i,a,o),d=[p/c,c];if(0===p)return n.makeTensorInfo(o,a.dtype);const f=wn({inputs:{x:a},backend:n,attrs:{shape:[u,l]}}),m=wn({inputs:{x:i},backend:n,attrs:{shape:[u,c]}}),g=n.makeTensorInfo([],"float32",new Float32Array([0])),y=new Io(u,l,f.shape.length,m.shape.length,h,d),b=n.runWebGLProgram(y,[m,f,g],m.dtype),x=wn({inputs:{x:b},backend:n,attrs:{shape:o}});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(b),n.disposeIntermediateTensorInfo(g),x}};class To{constructor(e,t,n){let s,a;if(this.variableNames=["c","a","b"],this.outputShape=t,n>4)throw Error(`Where for rank ${n} is not yet supported`);if(1===n)a="resRC",s="resRC";else{const n=["resRC.x","resRC.y","resRC.z","resRC.w"],r=[],i=[];for(let s=0;s<t.length;s++)i.push(`${n[s]}`),s<e&&r.push(`${n[s]}`);s=r.join(),a=i.join()}const r=nt(n);this.userCode=`\n      void main() {\n        ${r} resRC = getOutputCoords();\n        float cVal = getC(${s});\n        if (cVal >= 1.0) {\n          setOutput(getA(${a}));\n        } else {\n          setOutput(getB(${a}));\n        }\n      }\n    `}}const Co={kernelName:r.Select,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{condition:s,t:a,e:i}=t,o=new To(s.shape.length,a.shape,a.shape.length);return n.runWebGLProgram(o,[s,a,i],(0,r.upcastType)(a.dtype,i.dtype))}},$o=fn({opSnippet:`\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = ${r.backend_util.SELU_SCALEALPHA};\n  float scale = ${r.backend_util.SELU_SCALE};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`}),Ao={kernelName:r.Selu,backendName:"webgl",kernelFunc:$o},Eo=fn({opSnippet:"return 1.0 / (1.0 + exp(-1.0 * x));"}),_o={kernelName:r.Sigmoid,backendName:"webgl",kernelFunc:Eo},Ro=fn({opSnippet:"\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n"}),Fo={kernelName:r.Sign,backendName:"webgl",kernelFunc:Ro},Do=fn({opSnippet:"if (isnan(x)) return x;\n  return sin(x);\n"}),Oo={kernelName:r.Sin,backendName:"webgl",kernelFunc:Do},Mo=fn({opSnippet:"\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n"}),zo={kernelName:r.Sinh,backendName:"webgl",kernelFunc:Mo},Lo=fn({opSnippet:"\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n"}),Bo={kernelName:r.Softplus,backendName:"webgl",kernelFunc:Lo},Po={kernelName:r.SpaceToBatchND,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{blockShape:i,paddings:o}=s;r.util.assert(a.shape.length<=4,(()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet"));const l=i.reduce(((e,t)=>e*t)),u=[[0,0]];u.push(...o);for(let e=1+i.length;e<a.shape.length;++e)u.push([0,0]);const c=[],h=ji({inputs:{x:a},backend:n,attrs:{paddings:u,constantValue:0}}),p=r.backend_util.getReshaped(h.shape,i,l,!1),d=r.backend_util.getPermuted(p.length,i.length,!1),f=r.backend_util.getReshapedPermuted(h.shape,i,l,!1),m=wn({inputs:{x:h},backend:n,attrs:{shape:p}}),g=Rn({inputs:{x:m},backend:n,attrs:{perm:d}}),y=wn({inputs:{x:g},backend:n,attrs:{shape:f}});return c.push(h),c.push(m),c.push(g),c.forEach((e=>n.disposeIntermediateTensorInfo(e))),y}},Vo={kernelName:r.SparseToDense,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{sparseIndices:a,sparseValues:i,defaultValue:o}=t,{outputShape:l}=s,{sliceRank:u,numUpdates:c,strides:h,outputSize:p}=r.backend_util.calculateShapes(i,a,l),d=new Io(c,u,a.shape.length,i.shape.length,h,[p,1],!1),f=n.runWebGLProgram(d,[i,a,o],i.dtype),m=wn({inputs:{x:f},backend:n,attrs:{shape:l}});return n.disposeIntermediateTensorInfo(f),m}},Wo={kernelName:r.SplitV,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{numOrSizeSplits:i,axis:o}=s,l=r.util.parseAxisParam(o,a.shape)[0],u=r.backend_util.prepareSplitSize(a,i,l),c=a.shape.length,h=new Array(c).fill(0),p=a.shape.slice();return u.map((e=>{const t=[...p];t[l]=e;const s=$s({inputs:{x:a},backend:n,attrs:{begin:h,size:t}});return h[l]+=e,s}))}},Uo=fn({opSnippet:"return sqrt(x);"}),Go={kernelName:r.Sqrt,backendName:"webgl",kernelFunc:Uo},Ho=fn({opSnippet:"return x * x;"}),jo={kernelName:r.Square,backendName:"webgl",kernelFunc:Ho},Xo="return (a - b) * (a - b);",qo=mn({opSnippet:Xo,packedOpSnippet:Xo}),Ko={kernelName:r.SquaredDifference,backendName:"webgl",kernelFunc:qo},Yo={kernelName:r.Step,backendName:"webgl",kernelFunc:function({inputs:e,attrs:t,backend:n}){const{x:s}=e,a=`if (isnan(x)) return x;\n    return x > 0.0 ? 1.0 : float(${t.alpha});\n  `,r=new Gt(s.shape,a);return n.runWebGLProgram(r,[s],s.dtype)}};class Qo{constructor(e,t,n){this.variableNames=["x"],this.outputShape=n;const s=n.length,a=nt(n.length),r=nt(n.length);let i="";if(1===s)i="coords * strides + begin";else{let e=0;i=n.map(((t,s)=>(e++,1===n.length?`coords * strides[${s}] + begin[${s}]`:`coords[${e-1}] * strides[${s}] + begin[${s}]`))).join(",")}this.userCode=`\n      ${a} begin = ${a}(${e});\n      ${a} strides = ${a}(${t});\n\n      void main() {\n        ${r} coords = getOutputCoords();\n        setOutput(getX(${i}));\n      }\n    `}}const Jo={kernelName:r.StridedSlice,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{begin:i,end:o,strides:l,beginMask:u,endMask:c,ellipsisMask:h,newAxisMask:p,shrinkAxisMask:d}=s,{nonStrided:f,$begin:m,$strides:g,size:y,newShape:b,outShape:x}=r.slice_util.sliceInfo(a.shape,i,o,l,u,c,h,p,d),v=wn({inputs:{x:a},backend:n,attrs:{shape:b}});let k;if(f){const e=$s({inputs:{x:v},backend:n,attrs:{begin:m,size:y}});k=wn({inputs:{x:e},backend:n,attrs:{shape:x}}),n.disposeIntermediateTensorInfo(e)}else if(x.some((e=>0===e)))k=n.makeTensorInfo(x,a.dtype,[]);else if(n.shouldExecuteOnCPU([v])){const e=n.texData.get(v.dataId).values,t=(0,r.buffer)(v.shape,v.dtype,e),s=Et(x,t,g,m);k=n.makeTensorInfo(x,v.dtype,s.values)}else{const e=new Qo(m,g,x);k=n.runWebGLProgram(e,[v],v.dtype)}const w=wn({inputs:{x:k},backend:n,attrs:{shape:x}});return n.disposeIntermediateTensorInfo(v),n.disposeIntermediateTensorInfo(k),w}},Zo=fn({opSnippet:"return tan(x);"}),el={kernelName:r.Tan,backendName:"webgl",kernelFunc:Zo},tl=fn({opSnippet:"\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n"}),nl={kernelName:r.Tanh,backendName:"webgl",kernelFunc:tl};class sl{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let s=0;s<n.length;s++)n[s]=e[s]*t[s];this.outputShape=n,this.rank=n.length;const s=nt(this.rank),a=function(e){const t=e.length;if(t>5)throw Error(`Tile for rank ${t} is not yet supported`);if(1===t)return`imod(resRC, ${e[0]})`;const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],s=[];for(let t=0;t<e.length;t++)s.push(`imod(${n[t]}, ${e[t]})`);return s.join()}(e);this.userCode=`\n      void main() {\n        ${s} resRC = getOutputCoords();\n        setOutput(getA(${a}));\n      }\n    `}}function al(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{reps:i}=s;if("string"===a.dtype){const e=n.readSync(a.dataId).map((e=>r.util.decodeString(e))),t=(0,r.buffer)(a.shape,a.dtype,e),s=Rt(t,i);return n.makeTensorInfo(s.shape,s.dtype,s.values)}const o=new sl(a.shape,i);return n.runWebGLProgram(o,[a],a.dtype)}const rl={kernelName:r.Tile,backendName:"webgl",kernelFunc:al},il={kernelName:r.TopK,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{k:r,sorted:i}=s,o=n.readSync(a.dataId),[l,u]=Ft(o,a.shape,a.dtype,r,i);return[n.makeTensorInfo(l.shape,l.dtype,l.values),n.makeTensorInfo(u.shape,u.dtype,u.values)]}};class ol{constructor(e,t,n,s,a,r){this.variableNames=["Image","Transforms"],this.outputShape=r;const i="nearest"===n?1:2;let o;switch(s){case"constant":o=1;break;case"reflect":o=2;break;case"wrap":o=3;break;case"nearest":o=4;break;default:o=1}this.userCode=`\n            float mapCoord(float outCoord, float len) {\n              float inCoord = outCoord;\n              if(${o} == 2) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    if (inCoord < sz2) {\n                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +\n                      inCoord;\n                    }\n                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    inCoord -= sz2 * float(int(float(inCoord / sz2)));\n                    if (inCoord >= len) {\n                      inCoord = sz2 - inCoord - 1.0;\n                    }\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${o} == 3) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord -= len * float(int(float(inCoord / sz)));\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${o} == 4) {\n                return clamp(outCoord, 0.0, len - 1.0);\n              } else {\n                return outCoord;\n              }\n            }\n\n            float readWithFillValue(int batch, int coordY, int coordX,\n              int channel) {\n              float outputValue;\n              if (0 <= coordY && coordY < ${e} && 0 <= coordX && coordX < ${t}) {\n                  outputValue = getImage(batch, coordY, coordX, channel);\n              } else {\n                outputValue = float(${a});\n              }\n              return outputValue;\n            }\n\n            void main() {\n              ivec4 coords = getOutputCoords();\n              float outputValue;\n              int batch = coords[0];\n              int x = coords[2];\n              int y = coords[1];\n              int channel = coords[3];\n              float xf = float(x);\n              float yf = float(y);\n              float a1 = getTransforms(batch, 0);\n              float a2 = getTransforms(batch, 1);\n              float a3 = getTransforms(batch, 2);\n              float b1 = getTransforms(batch, 3);\n              float b2 = getTransforms(batch, 4);\n              float b3 = getTransforms(batch, 5);\n              float c1 = getTransforms(batch, 6);\n              float c2 = getTransforms(batch, 7);\n              float projection = c1 * xf + c2 * yf + 1.0;\n              if (projection == 0.0) {\n                outputValue = float(${a});\n              } else {\n                float inX = (a1 * xf + a2 * yf + a3) / projection;\n                float inY = (b1 * xf + b2 * yf + b3) / projection;\n                float mapX = mapCoord(inX, float(${t}));\n                float mapY = mapCoord(inY, float(${e}));\n\n                if (${i} == 1) {\n                  int coordY = int(round(mapY));\n                  int coordX = int(round(mapX));\n                  outputValue = readWithFillValue(batch, coordY, coordX,\n                    channel);\n                } else {\n                  float yFloor = floor(mapY);\n                  float xFloor = floor(mapX);\n                  float yCeil = yFloor + 1.0;\n                  float xCeil = xFloor + 1.0;\n                  float valueYFloor = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);\n                  float valueYCeil = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);\n                  outputValue = (yCeil - mapY) * valueYFloor +\n                  (mapY - yFloor) * valueYCeil;\n                }\n              }\n              setOutput(outputValue);\n            }\n        `}}const ll={kernelName:r.Transform,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{image:a,transforms:r}=t,{interpolation:i,fillMode:o,fillValue:l,outputShape:u}=s,[c,h,p,d]=a.shape,[f,m]=null!=u?u:[h,p],g=new ol(h,p,i,o,l,[c,f,m,d]);return n.runWebGLProgram(g,[a,r],"float32")}},ul={kernelName:r.Unique,backendName:"webgl",kernelFunc:function(e){const{inputs:t,attrs:n,backend:s}=e,{axis:a}=n,{x:r}=t;he(r,"unique"),console.warn("WARNING: ","UI might be locked temporarily as data is being downloaded");const i=s.readSync(r.dataId),{outputValues:o,outputShape:l,indices:u}=Ot(i,a,r.shape,r.dtype);return[s.makeTensorInfo(l,r.dtype,o),s.makeTensorInfo([u.length],"int32",u)]}},cl={kernelName:r.Unpack,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{value:a}=t;let{axis:r}=s;r<0&&(r+=a.shape.length);const i=a,o=i.shape.length,l=a.shape[r],u=new Array(o-1);let c=0;for(let e=0;e<o;e++)e!==r&&(u[c++]=i.shape[e]);const h=[],p=new Array(o).fill(0),d=i.shape.slice();d[r]=1;const f=new Array(l);for(let e=0;e<f.length;e++){p[r]=e;const t=$s({inputs:{x:i},backend:n,attrs:{begin:p,size:d}}),s=wn({inputs:{x:t},backend:n,attrs:{shape:u}});f[e]=s,h.push(t)}return h.forEach((e=>n.disposeIntermediateTensorInfo(e))),f}};class hl{constructor(e,t){this.variableNames=["x","segmentIds"];const n=e.windowSize,s=e.batchSize,a=e.inSize,r=e.numSegments,i=r*Math.ceil(a/n);this.outputShape=[s,i];const o=4*Math.floor(n/4),l=n%4,u="\n        sumValue += dot(values, segFilter);\n    ";let c="";a%n>0&&(c=`\n        if (inIdx < 0 || inIdx >= ${a}) {\n          return initializationValue;\n        }\n      `);let h="";a%n>0&&(h=`\n        if (inIdx < 0 || inIdx >= ${a}) {\n          return -1.0;\n        }\n      `),this.userCode=`\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        ${c}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${h}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${r})) * float(${n}));\n        int currentSeg = int(mod(float(outIdx), float(${r})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${o}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${u}\n        }\n\n        int inIdx = inOffset + ${o};\n        if (${1===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${u}\n        } else if (${2===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${u}\n        } else if (${3===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${u}\n        }\n        setOutput(sumValue);\n      }\n    `}}const pl=[Jr,ei,On,zn,Bn,Vn,Gn,Xn,qn,Kn,ts,ns,as,is,cs,ls,ps,gs,ms,xs,vs,ks,Is,Es,_s,Ms,Bs,Ws,Hs,on,ea,ha,pa,ia,fa,ma,da,ya,xa,ka,Sa,Ta,$a,Da,Oa,_a,za,Ba,Va,Wa,Ga,ja,Ka,Qa,er,sr,ir,lr,hr,dr,gr,br,xr,kr,Nr,Sr,Cr,an,$r,Ys,Er,Rr,Dr,cn,Mr,Lr,Br,Ur,Vr,Hr,Xr,Kr,ni,ii,ri,ui,ci,hi,ai,pi,di,mi,bi,vi,Ai,kn,_i,Fi,Oi,zi,Fs,Bi,Wi,Ui,Xi,Ki,dn,Yi,Ji,Os,Ni,eo,ao,no,Nn,oo,uo,ho,fo,yo,xo,ko,No,So,Co,Ao,_o,Fo,Oo,zo,As,$i,Bo,Po,Vo,Wo,Go,jo,Ko,Yo,Jo,Ti,_n,el,nl,rl,il,ll,Fn,ul,cl,{kernelName:r.UnsortedSegmentSum,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,segmentIds:i}=t,{numSegments:o}=s,l=a.shape.length,u=[];let c=0;const h=r.backend_util.getAxesPermutation([c],l);let p=a;null!=h&&(p=Rn({inputs:{x:a},backend:n,attrs:{perm:h}}),u.push(p),c=r.backend_util.getInnerMostAxes(1,l)[0]);const d=r.backend_util.segment_util.computeOutShape(p.shape,c,o),f=r.util.sizeFromShape([p.shape[c]]),m=wn({inputs:{x:p},backend:n,attrs:{shape:[-1,f]}});u.push(m);const g=(0,r.sumOutType)(a.dtype),y=(e,t,s,a,i)=>{const o=e.shape[0],l=e.shape[1],c=r.backend_util.segment_util.segOpComputeOptimalWindowSize(l,i),h=new hl({windowSize:c,inSize:l,batchSize:o,numSegments:i},t),p=n.compileAndRun(h,[e,s],a);if(u.push(p),p.shape[1]===i)return p;const d=Qi({backend:n,attrs:{start:0,stop:i,step:1,dtype:"float32"}}),f=al({inputs:{x:d},backend:n,attrs:{reps:[l/c]}});return u.push(d),u.push(f),y(p,t,f,a,i)},b=wn({inputs:{x:y(m,"unsortedSegmentSum",i,g,o)},backend:n,attrs:{shape:d}});let x=b;if(null!=h){u.push(b);const e=r.backend_util.getUndoAxesPermutation(h);x=Rn({inputs:{x},backend:n,attrs:{perm:e}})}return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),x}},Vi];for(const e of pl)(0,r.registerKernel)(e)},3916:(e,t,n)=>{"use strict";n.r(t),n.d(t,{GraphModel:()=>ls,deregisterOp:()=>T,loadGraphModel:()=>us,registerOp:()=>I,version_converter:()=>cs});var s={};n.r(s),n.d(s,{json:()=>D});var a={};n.r(a),n.d(a,{json:()=>O});var r={};n.r(r),n.d(r,{json:()=>M});var i={};n.r(i),n.d(i,{json:()=>z});var o={};n.r(o),n.d(o,{json:()=>L});var l={};n.r(l),n.d(l,{json:()=>B});var u={};n.r(u),n.d(u,{json:()=>P});var c={};n.r(c),n.d(c,{json:()=>V});var h={};n.r(h),n.d(h,{json:()=>W});var p={};n.r(p),n.d(p,{json:()=>U});var d={};n.r(d),n.d(d,{json:()=>G});var f={};n.r(f),n.d(f,{json:()=>H});var m={};n.r(m),n.d(m,{json:()=>j});var g={};n.r(g),n.d(g,{json:()=>X});var y={};n.r(y),n.d(y,{json:()=>q});var b={};n.r(b),n.d(b,{json:()=>K});var x={};n.r(x),n.d(x,{json:()=>Y});var v,k,w=n(5998);!function(e){e[e.DT_INVALID=0]="DT_INVALID",e[e.DT_FLOAT=1]="DT_FLOAT",e[e.DT_DOUBLE=2]="DT_DOUBLE",e[e.DT_INT32=3]="DT_INT32",e[e.DT_UINT8=4]="DT_UINT8",e[e.DT_INT16=5]="DT_INT16",e[e.DT_INT8=6]="DT_INT8",e[e.DT_STRING=7]="DT_STRING",e[e.DT_COMPLEX64=8]="DT_COMPLEX64",e[e.DT_INT64=9]="DT_INT64",e[e.DT_BOOL=10]="DT_BOOL",e[e.DT_QINT8=11]="DT_QINT8",e[e.DT_QUINT8=12]="DT_QUINT8",e[e.DT_QINT32=13]="DT_QINT32",e[e.DT_BFLOAT16=14]="DT_BFLOAT16",e[e.DT_FLOAT_REF=101]="DT_FLOAT_REF",e[e.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",e[e.DT_INT32_REF=103]="DT_INT32_REF",e[e.DT_UINT8_REF=104]="DT_UINT8_REF",e[e.DT_INT16_REF=105]="DT_INT16_REF",e[e.DT_INT8_REF=106]="DT_INT8_REF",e[e.DT_STRING_REF=107]="DT_STRING_REF",e[e.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",e[e.DT_INT64_REF=109]="DT_INT64_REF",e[e.DT_BOOL_REF=110]="DT_BOOL_REF",e[e.DT_QINT8_REF=111]="DT_QINT8_REF",e[e.DT_QUINT8_REF=112]="DT_QUINT8_REF",e[e.DT_QINT32_REF=113]="DT_QINT32_REF",e[e.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF"}(v||(v={})),function(e){let t;!function(e){e[e.LEGACY=0]="LEGACY",e[e.V1=1]="V1",e[e.V2=2]="V2"}(t=e.CheckpointFormatVersion||(e.CheckpointFormatVersion={}))}(k||(k={}));const N={};function I(e,t){const n={tfOpName:e,category:"custom",inputs:[],attrs:[],customExecutor:t};N[e]=n}function S(e){return N[e]}function T(e){delete N[e]}function C(e,t,n,s,a){const r=t.inputParams[e];if(r&&void 0!==r.inputIndexStart){const e=r.inputIndexStart,i=0===r.inputIndexEnd?void 0:void 0===r.inputIndexEnd?e+1:r.inputIndexEnd;if("tensor"===r.type)return $(t.inputNames[r.inputIndexStart],n,s,a);if("tensors"===r.type)return t.inputNames.slice(e,i).map((e=>$(e,n,s,a)));const o=$(t.inputNames.slice(e)[0],n,s,a),l=o.dataSync();return"number"===r.type?l[0]:w.util.toNestedArray(o.shape,l)}const i=t.attrParams[e];return i&&i.value}function $(e,t,n,s){const[a,r]=_(e);if(null!=s){const e=s.getHashTableHandleByName(a);if(null!=e)return e}const i=n.currentContextIds.find((e=>!!t[E(a,e)]));return void 0!==i?t[E(a,i)][r]:void 0}function A(e,t){const[n,s]=_(e);return[E(n,t&&t.currentContextId),s]}function E(e,t){return t?`${e}-${t}`:e}function _(e){const t=e.split(":");return 1===t.length?[e,0]:[t[0],Number(t[t.length-1])]}function R(e,t,n){let s=C("pad",e,t,n);if("explicit"===s){s=C("explicitPaddings",e,t,n);const a=[[0,0],[0,0],[0,0],[0,0]];for(let e=0;e<4;e++)a[e][0]=s[2*e],a[e][1]=s[2*e+1];return a}return s}function F(e){return e.kept?e:(0,w.clone)(e)}const D=[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],O=[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"clipValueMin",type:"number"},{start:2,name:"clipValueMax",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Prod",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axes",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],M=[{tfOpName:"EmptyTensorList",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"maxNumElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]}],z=[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[],notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number"}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}],L=[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}],B=[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],P=[{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]},{tfOpName:"Unique",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"UniqueV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]}],V=[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}],W=[{tfOpName:"HashTable",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"HashTableV2",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"LookupTableImport",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableImportV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFind",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFindV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableSize",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"LookupTableSizeV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]}],U=[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]}],G=[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],H=[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],j=[{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"SparseToDense",category:"normalization",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!0,notSupported:!0}]}],X=[{tfOpName:"Bincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}]},{tfOpName:"DenseBincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}],attrs:[{tfName:"binary_output",name:"binaryOutput",type:"bool"}]},{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}],q=[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}],attrs:[{tfName:"batch_dims",name:"batchDims",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool[]"}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]}],K=[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}],Y=[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"MirrorPad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"mode",name:"mode",type:"string"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]}];class Q{static get Instance(){return this._instance||(this._instance=new this)}constructor(){const e=[].concat(...[s,a,r,i,o,l,u,d,p,c,f,m,g,y,b,x,h].map((e=>e.json)));this.opMappers=e.reduce(((e,t)=>(e[t.tfOpName]=t,e)),{})}transformGraph(e,t={}){const n=e.node,s=[],a=[],r=[],i=n.reduce(((e,t)=>(e[t.name]=this.mapNode(t),t.op.startsWith("Placeholder")?s.push(e[t.name]):"Const"===t.op?a.push(e[t.name]):null!=t.input&&0!==t.input.length||r.push(e[t.name]),e)),{});let o=[];const l=[];let u={},c={};null!=t&&(u=this.mapSignatureEntries(t.inputs),c=this.mapSignatureEntries(t.outputs));const h=Object.keys(i);h.forEach((e=>{const t=i[e];t.inputNames.forEach((e=>{const[n]=A(e);t.inputs.push(i[n]),i[n].children.push(t)}))})),0===Object.keys(c).length?h.forEach((e=>{const t=i[e];0===t.children.length&&l.push(t)})):Object.keys(c).forEach((e=>{const[t]=A(e),n=i[t];null!=n&&(n.signatureKey=c[e],l.push(n))})),Object.keys(u).length>0?Object.keys(u).forEach((e=>{const[t]=A(e),n=i[t];n&&(n.signatureKey=u[e],o.push(n))})):o=s;let p={};null!=e.library&&null!=e.library.function&&(p=e.library.function.reduce(((e,t)=>(e[t.signature.name]=this.mapFunction(t),e)),{}));const d={nodes:i,inputs:o,outputs:l,weights:a,placeholders:s,signature:t,functions:p};return r.length>0&&(d.initNodes=r),d}mapSignatureEntries(e){return Object.keys(e||{}).reduce(((t,n)=>(t[e[n].name]=n,t)),{})}mapNode(e){const t=S(e.op)||this.opMappers[e.op]||{};null==e.attr&&(e.attr={});const n={name:e.name,op:e.op,category:t.category,inputNames:(e.input||[]).map((e=>e.startsWith("^")?e.substr(1):e)),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:e.attr};return null!=t.inputs&&(n.inputParams=t.inputs.reduce(((e,t)=>(e[t.name]={type:t.type,inputIndexStart:t.start,inputIndexEnd:t.end},e)),{})),null!=t.attrs&&(n.attrParams=t.attrs.reduce(((t,n)=>{const s=n.type;let a;switch(n.type){case"string":a=Z(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=Z(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"string[]":a=ue(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=ue(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number":a=te(e.attr,n.tfName,n.defaultValue||0),void 0===a&&n.tfDeprecatedName&&(a=te(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number[]":a=le(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=le(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool":a=ee(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=ee(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool[]":a=he(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=he(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape":a=oe(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=oe(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape[]":a=ce(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=ce(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype":a=ae(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=ae(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype[]":a=re(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=re(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"func":a=se(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=se(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"tensor":case"tensors":break;default:throw new Error(`Unsupported param type: ${n.type} for op: ${e.op}`)}return t[n.name]={value:a,type:s},t}),{})),n}mapFunction(e){const t=e.nodeDef,n=[];let s={};null!=t&&(s=t.reduce(((e,t)=>(e[t.name]=this.mapNode(t),"Const"===t.op&&n.push(e[t.name]),e)),{}));const a=[],r=[];e.signature.inputArg.forEach((e=>{const[t]=A(e.name),n={name:t,op:"Placeholder",inputs:[],inputNames:[],category:"graph",inputParams:{},attrParams:{dtype:{value:ne(e.type),type:"dtype"}},children:[]};n.signatureKey=e.name,a.push(n),s[t]=n})),Object.keys(s).forEach((e=>{const t=s[e];t.inputNames.forEach((e=>{const[n]=A(e);t.inputs.push(s[n]),s[n].children.push(t)}))}));const i=e.ret;e.signature.outputArg.forEach((e=>{const[t,n]=A(i[e.name]),a=s[t];null!=a&&(a.defaultOutput=n,r.push(a))}));const o=this.mapArgsToSignature(e);return{nodes:s,inputs:a,outputs:r,weights:n,placeholders:[],signature:o}}mapArgsToSignature(e){return{methodName:e.signature.name,inputs:e.signature.inputArg.reduce(((e,t)=>(e[t.name]=this.mapArgToTensorInfo(t),e)),{}),outputs:e.signature.outputArg.reduce(((t,n)=>(t[n.name]=this.mapArgToTensorInfo(n,e.ret),t)),{})}}mapArgToTensorInfo(e,t){let n=e.name;return null!=t&&(n=t[n]),{name:n,dtype:e.type}}}function J(e,t){const n=Array.isArray(e)?String.fromCharCode.apply(null,e):function(e){const t=(0,w.env)().global;if(void 0!==t.atob)return t.atob(e);if("undefined"!=typeof Buffer)return new Buffer(e,"base64").toString();throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()")}(e);return t?n:n.toLowerCase()}function Z(e,t,n,s=!1){const a=e[t];return null!=a?J(a.s,s):n}function ee(e,t,n){const s=e[t];return s?s.b:n}function te(e,t,n){const s=e[t]||{},a=null!=s.i?s.i:null!=s.f?s.f:n;return"number"==typeof a?a:parseInt(a,10)}function ne(e){switch("string"==typeof e&&(e=v[e]),e){case v.DT_FLOAT:return"float32";case v.DT_INT32:case v.DT_INT64:case v.DT_INT8:case v.DT_UINT8:return"int32";case v.DT_BOOL:return"bool";case v.DT_DOUBLE:return"float32";case v.DT_STRING:return"string";default:return null}}function se(e,t,n){const s=e[t];return s&&s.func?s.func.name:n}function ae(e,t,n){const s=e[t];return s&&s.type?ne(s.type):n}function re(e,t,n){const s=e[t];return s&&s.list&&s.list.type?s.list.type.map((e=>ne(e))):n}function ie(e){if(!e.unknownRank)return null!=e.dim?e.dim.map((e=>"number"==typeof e.size?e.size:parseInt(e.size,10))):[]}function oe(e,t,n){const s=e[t];return s&&s.shape?ie(s.shape):n}function le(e,t,n){const s=e[t];return s?((s.list.f&&s.list.f.length?s.list.f:s.list.i)||[]).map((e=>"number"==typeof e?e:parseInt(e,10))):n}function ue(e,t,n,s=!1){const a=e[t];return a&&a.list&&a.list.s?a.list.s.map((e=>J(e,s))):n}function ce(e,t,n){const s=e[t];return s&&s.list&&s.list.shape?s.list.shape.map((e=>ie(e))):n}function he(e,t,n){const s=e[t];return s&&s.list&&s.list.b?s.list.b:n}class pe{constructor(e,t,n){this.node=e,this.tensorMap=t,this.context=n,this.inputs=[],this.attrs={},this.inputs=e.inputNames.map((e=>this.getInput(e))),null!=e.rawAttrs&&(this.attrs=Object.keys(e.rawAttrs).reduce(((e,t)=>(e[t]=this.getAttr(t),e)),{}))}getInput(e){return $(e,this.tensorMap,this.context)}getAttr(e,t){const n=this.node.rawAttrs[e];if(null!=n.tensor)return $(e,this.tensorMap,this.context);if(null!=n.i||null!=n.f)return te(this.node.rawAttrs,e,t);if(null!=n.s)return Z(this.node.rawAttrs,e,t);if(null!=n.b)return ee(this.node.rawAttrs,e,t);if(null!=n.shape)return oe(this.node.rawAttrs,e,t);if(null!=n.type)return ae(this.node.rawAttrs,e,t);if(null!=n.list){if(null!=n.list.i||null!=n.list.f)return le(this.node.rawAttrs,e,t);if(null!=n.list.s)return ue(this.node.rawAttrs,e,t);if(null!=n.list.shape)return ce(this.node.rawAttrs,e,t);if(null!=n.list.b)return he(this.node.rawAttrs,e,t);if(null!=n.list.type)return re(this.node.rawAttrs,e,t)}return t}}var de=n(6407),fe=n(3135),me=n(5228),ge=n(4841),ye=n(1274),be=n(9322),xe=n(9165),ve=n(827),ke=n(4513),we=n(632),Ne=n(3453),Ie=n(5265),Se=n(6235),Te=n(7839),Ce=n(1470),$e=n(2421),Ae=n(1891),Ee=n(7037),_e=n(9812),Re=n(369),Fe=n(6825),De=n(1661),Oe=n(173),Me=n(2699),ze=n(3233),Le=n(4650),Be=n(4842),Pe=n(3426),Ve=n(6943),We=n(2597),Ue=n(7474),Ge=n(4386),He=n(7370),je=n(9036),Xe=n(766),qe=n(7409),Ke=n(7809),Ye=n(5503),Qe=n(625),Je=n(9331),Ze=n(4434),et=n(3254),tt=n(3694),nt=n(3261),st=n(248),at=n(1869),rt=n(1173),it=n(2279),ot=n(3582),lt=n(2634),ut=n(9451),ct=n(9133),ht=n(8151);function pt(e,t,n=""){if("number"!=typeof e&&"number"!=typeof t){w.util.assert(e.length===t.length,(()=>n+` Shapes ${e} and ${t} must match`));for(let s=0;s<e.length;s++){const a=e[s],r=t[s];w.util.assert(a<0||r<0||a===r,(()=>n+` Shapes ${e} and ${t} must match`))}}}function dt(e){return"number"!=typeof e&&!e.some((e=>e<0))}function ft(e,t,n){let s=mt(e,n);const a=!dt(s);if(a&&0===t.length)throw new Error(`Tried to calculate elements of an empty list with non-fully-defined elementShape: ${s}`);if(a&&t.forEach((e=>{s=mt(e.shape,s)})),!dt(s))throw new Error(`Non-fully-defined elementShape: ${s}`);return s}function mt(e,t){if("number"==typeof e)return t;if("number"==typeof t)return e;if(e.length!==t.length)throw new Error(`Incompatible ranks during merge: ${e} vs. ${t}`);const n=[];for(let s=0;s<e.length;++s){const a=e[s],r=t[s];if(a>=0&&r>=0&&a!==r)throw new Error(`Incompatible shape during merge: ${e} vs. ${t}`);n[s]=a>=0?a:r}return n}class gt{constructor(e,t,n,s,a,r,i){this.name=e,this.dtype=t,this.maxSize=n,this.elementShape=s,this.identicalElementShapes=a,this.dynamicSize=r,this.clearAfterRead=i,this.tensors=[],this.closed_=!1,this.idTensor=(0,w.scalar)(0),(0,w.keep)(this.idTensor)}get id(){return this.idTensor.id}get closed(){return this.closed_}clearAndClose(e){this.tensors.forEach((t=>{null!=e&&e.has(t.tensor.id)||t.tensor.dispose()})),this.tensors=[],this.closed_=!0,this.idTensor.dispose()}size(){return this.tensors.length}read(e){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||e>=this.size())throw new Error(`Tried to read from index ${e}, but array size is: ${this.size()}`);const t=this.tensors[e];if(t.cleared)throw new Error(`TensorArray ${this.name}: Could not read index ${e} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);return this.clearAfterRead&&(t.cleared=!0),t.read=!0,t.tensor}readMany(e){return e.map((e=>this.read(e)))}write(e,t){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||!this.dynamicSize&&e>=this.maxSize)throw new Error(`Tried to write to index ${e}, but array is not resizeable and size is: ${this.maxSize}`);const n=this.tensors[e]||{};if(t.dtype!==this.dtype)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e},\n          because the value dtype is ${t.dtype}, but TensorArray dtype is ${this.dtype}.`);if(0!==this.size()||null!=this.elementShape&&0!==this.elementShape.length||(this.elementShape=t.shape),pt(this.elementShape,t.shape,`TensorArray ${this.name}: Could not write to TensorArray index ${e}.`),n.read)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been read.`);if(n.written)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been written.`);n.tensor=t,(0,w.keep)(t),n.written=!0,this.tensors[e]=n}writeMany(e,t){if(e.length!==t.length)throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${e.length} is not the same as tensors size: ${t.length}.`);e.forEach(((e,n)=>this.write(e,t[n])))}gather(e,t){if(t&&t!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${t}`);if(e)e=e.slice(0,this.size());else{e=[];for(let t=0;t<this.size();t++)e.push(t)}if(0===e.length)return(0,w.tensor)([],[0].concat(this.elementShape));const n=this.readMany(e);return pt(this.elementShape,n[0].shape,"TensorArray shape mismatch: "),(0,w.stack)(n,0)}concat(e){if(e&&e!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${e}`);if(0===this.size())return(0,w.tensor)([],[0].concat(this.elementShape));const t=[];for(let e=0;e<this.size();e++)t.push(e);const n=this.readMany(t);return pt(this.elementShape,n[0].shape,`TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${n[0].shape})`),(0,w.concat)(n,0)}scatter(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);if(e.length!==t.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${e.length} vs. ${t.shape[0]}`);const n=Math.max(...e);if(!this.dynamicSize&&n>=this.maxSize)throw new Error(`Max index must be < array size (${n}  vs. ${this.maxSize})`);this.writeMany(e,(0,w.unstack)(t,0))}split(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);let n=0;const s=e.map((e=>(n+=e,n)));if(n!==t.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${n}, and tensor's shape is: ${t.shape}`);if(!this.dynamicSize&&e.length!==this.maxSize)throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${e.length}), and the TensorArray is not marked as dynamically resizeable`);const a=0===n?0:t.size/n,r=[];(0,w.tidy)((()=>{t=(0,w.reshape)(t,[1,n,a]);for(let n=0;n<e.length;++n){const i=[0,0===n?0:s[n-1],0],o=[1,e[n],a];r[n]=(0,w.reshape)((0,w.slice)(t,i,o),this.elementShape)}return r}));const i=[];for(let t=0;t<e.length;t++)i[t]=t;this.writeMany(i,r)}}class yt{constructor(e,t,n,s=-1){this.tensors=e,this.elementShape=t,this.elementDtype=n,null!=e&&e.forEach((e=>{if(n!==e.dtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${e.dtype}`);pt(t,e.shape,"TensorList shape mismatch: "),(0,w.keep)(e)})),this.idTensor=(0,w.scalar)(0),this.maxNumElements=s,(0,w.keep)(this.idTensor)}get id(){return this.idTensor.id}copy(){return new yt([...this.tensors],this.elementShape,this.elementDtype)}clearAndClose(e){this.tensors.forEach((t=>{null!=e&&e.has(t.id)||t.dispose()})),this.tensors.length=0,this.idTensor.dispose()}size(){return this.tensors.length}stack(e,t,n=-1){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(-1!==n&&this.tensors.length!==n)throw new Error(`Operation expected a list with ${n} elements but got a list with ${this.tensors.length} elements.`);pt(e,this.elementShape,"TensorList shape mismatch: ");const s=ft(this.elementShape,this.tensors,e);return(0,w.tidy)((()=>{const e=this.tensors.map((e=>(0,w.reshape)(e,s)));return(0,w.stack)(e,0)}))}popBack(e,t){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(0===this.size())throw new Error("Trying to pop from an empty list.");const n=ft(this.elementShape,this.tensors,e),s=this.tensors.pop();return pt(s.shape,e,"TensorList shape mismatch: "),(0,w.reshape)(s,n)}pushBack(e){if(e.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`);if(pt(e.shape,this.elementShape,"TensorList shape mismatch: "),this.maxNumElements===this.size())throw new Error("Trying to push element into a full list.");(0,w.keep)(e),this.tensors.push(e)}resize(e){if(e<0)throw new Error(`TensorListResize expects size to be non-negative. Got: ${e}`);if(-1!==this.maxNumElements&&e>this.maxNumElements)throw new Error(`TensorListResize input size ${e} is greater maxNumElement ${this.maxNumElements}.`);this.tensors.length=e}getItem(e,t,n){if(n!==this.elementDtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${this.elementDtype}`);if(e<0||e>this.tensors.length)throw new Error(`Trying to access element ${e} in a list with ${this.tensors.length} elements.`);if(null==this.tensors[e])throw new Error(`element at index ${e} is null.`);pt(this.tensors[e].shape,t,"TensorList shape mismatch: ");const s=ft(this.elementShape,this.tensors,t);return(0,w.reshape)(this.tensors[e],s)}setItem(e,t){if(t.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${this.elementDtype}`);if(e<0||-1!==this.maxNumElements&&e>=this.maxNumElements)throw new Error(`Trying to set element ${e} in a list with max ${this.maxNumElements} elements.`);pt(this.elementShape,t.shape,"TensorList shape mismatch: "),(0,w.keep)(t),this.tensors[e]=t}gather(e,t,n){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);pt(this.elementShape,n,"TensorList shape mismatch: "),e=e.slice(0,this.size());const s=ft(this.elementShape,this.tensors,n);return 0===e.length?(0,w.tensor)([],[0].concat(s)):(0,w.tidy)((()=>{const t=e.map((e=>(0,w.reshape)(this.tensors[e],s)));return(0,w.stack)(t,0)}))}concat(e,t){if(e&&e!==this.elementDtype)throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${e}`);pt(this.elementShape,t,"TensorList shape mismatch: ");const n=ft(this.elementShape,this.tensors,t);return 0===this.size()?(0,w.tensor)([],[0].concat(n)):(0,w.tidy)((()=>{const e=this.tensors.map((e=>(0,w.reshape)(e,n)));return(0,w.concat)(e,0)}))}}var bt=n(1355),xt=n(4794),vt=n(4624),kt=n(1405),wt=n(4718),Nt=n(473),It=n(5176),St=n(1174),Tt=n(6877),Ct=n(1749),$t=n(5020),At=n(557);function Et(e,t,n){const[s,a]=C("fusedOps",e,t,n),r="biasadd"===s,i="prelu"===a,o="fusedbatchnorm"===s,l=C("numArgs",e,t,n);if(r){if(i&&2!==l)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&1!==l)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if(o)throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported.");const u=C("strides",e,t,n),c=R(e,t,n),h=C("dataFormat",e,t,n).toUpperCase(),p=C("dilations",e,t,n),[d,f]=C("args",e,t,n);return{stride:u,pad:c,dataFormat:h,dilations:p,biasArg:d,preluArg:f,activationFunc:a,leakyreluAlpha:C("leakyreluAlpha",e,t,n)}}var _t=n(4006),Rt=n(4135),Ft=n(686),Dt=n(6708),Ot=n(4917),Mt=n(7846),zt=n(5002),Lt=n(7245),Bt=n(3596),Pt=n(9640),Vt=n(6577),Wt=n(6499),Ut=n(2271),Gt=n(6380),Ht=n(6567);function jt(e,t,n){return{boxes:C("boxes",e,t,n),scores:C("scores",e,t,n),maxOutputSize:C("maxOutputSize",e,t,n),iouThreshold:C("iouThreshold",e,t,n),scoreThreshold:C("scoreThreshold",e,t,n),softNmsSigma:C("softNmsSigma",e,t,n)}}var Xt=n(3243),qt=n(9608),Kt=n(6092),Yt=n(9494);class Qt{constructor(e,t){this.keyDType=e,this.valueDType=t,this.handle=(0,w.scalar)(0),this.tensorMap=new Map,(0,w.keep)(this.handle)}get id(){return this.handle.id}clearAndClose(){this.tensorMap.forEach((e=>e.dispose())),this.tensorMap.clear(),this.handle.dispose()}size(){return this.tensorMap.size}tensorSize(){return Yt.i(this.size(),"int32")}async import(e,t){this.checkKeyAndValueTensor(e,t);const n=await e.data();return this.tensorMap.forEach((e=>e.dispose())),this.tensorMap.clear(),(0,w.tidy)((()=>{const e=(0,w.unstack)(t),s=n.length,a=e.length;w.util.assert(s===a,(()=>`The number of elements doesn't match, keys has ${s} elements, the values has ${a} elements.`));for(let t=0;t<s;t++){const s=n[t],a=e[t];(0,w.keep)(a),this.tensorMap.set(s,a)}return this.handle}))}async find(e,t){this.checkKeyAndValueTensor(e,t);const n=await e.data();return(0,w.tidy)((()=>{const e=[];for(let s=0;s<n.length;s++){const a=n[s],r=this.findWithDefault(a,t);e.push(r)}return(0,w.stack)(e)}))}findWithDefault(e,t){const n=this.tensorMap.get(e);return null!=n?n:t}checkKeyAndValueTensor(e,t){if(e.dtype!==this.keyDType)throw new Error(`Expect key dtype ${this.keyDType}, but got ${e.dtype}`);if(t.dtype!==this.valueDType)throw new Error(`Expect value dtype ${this.valueDType}, but got ${t.dtype}`)}}var Jt=n(6477),Zt=n(6500),en=n(636),tn=n(7630),nn=n(6573),sn=n(624),an=n(2856),rn=n(8651),on=n(5750),ln=n(5912),un=n(8687),cn=n(9065),hn=n(7505),pn=n(9648),dn=n(682),fn=n(1510),mn=n(9758),gn=n(3307),yn=n(5130),bn=n(5735),xn=n(5475),vn=n(781),kn=n(2998),wn=n(47),Nn=n(7394),In=n(7405),Sn=n(3865),Tn=n(5746),Cn=n(6884),$n=n(4926),An=n(7486),En=n(2676),_n=n(5158),Rn=n(9590),Fn=n(4968),Dn=n(2991),On=n(4136),Mn=n(7501),zn=n(8644),Ln=n(3100),Bn=n(7494),Pn=n(7020),Vn=n(8447),Wn=n(3710),Un=n(4415),Gn=n(1300),Hn=n(1483),jn=n(9682),Xn=n(7918),qn=n(8441),Kn=n(9112),Yn=n(8247);function Qn(e,t,n,s){const a=((e,t,n)=>{switch(e.category){case"arithmetic":return w.tidy((()=>((e,t,n)=>{switch(e.op){case"BiasAdd":case"AddV2":case"Add":return[de.I(C("a",e,t,n),C("b",e,t,n))];case"AddN":return[fe.Q(C("tensors",e,t,n))];case"FloorMod":case"Mod":return[me.w(C("a",e,t,n),C("b",e,t,n))];case"Mul":return[ge.d(C("a",e,t,n),C("b",e,t,n))];case"RealDiv":case"Div":return[ye.h(C("a",e,t,n),C("b",e,t,n))];case"DivNoNan":return[be.N(C("a",e,t,n),C("b",e,t,n))];case"FloorDiv":return[xe.q(C("a",e,t,n),C("b",e,t,n))];case"Sub":return[ve.l(C("a",e,t,n),C("b",e,t,n))];case"Minimum":return[ke.L(C("a",e,t,n),C("b",e,t,n))];case"Maximum":return[we.g(C("a",e,t,n),C("b",e,t,n))];case"Pow":return[Ne.s(C("a",e,t,n),C("b",e,t,n))];case"SquaredDifference":return[Ie.$(C("a",e,t,n),C("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"basic_math":return w.tidy((()=>((e,t,n)=>{switch(e.op){case"Abs":case"ComplexAbs":return[Se.W(C("x",e,t,n))];case"Acos":return[Te.K(C("x",e,t,n))];case"Acosh":return[Ce._(C("x",e,t,n))];case"Asin":return[$e.Z(C("x",e,t,n))];case"Asinh":return[Ae.V(C("x",e,t,n))];case"Atan":return[Ee.z(C("x",e,t,n))];case"Atan2":return[_e.f(C("x",e,t,n),C("y",e,t,n))];case"Atanh":return[Re.C(C("x",e,t,n))];case"Ceil":return[Fe.m(C("x",e,t,n))];case"Complex":return[De.P(C("real",e,t,n),C("imag",e,t,n))];case"Cos":return[Oe.m(C("x",e,t,n))];case"Cosh":return[Me.f(C("x",e,t,n))];case"Elu":return[ze.p(C("x",e,t,n))];case"Erf":return[Le.q(C("x",e,t,n))];case"Exp":return[Be.Q(C("x",e,t,n))];case"Expm1":return[Pe.t(C("x",e,t,n))];case"Floor":return[Ve.G(C("x",e,t,n))];case"Log":return[We.c(C("x",e,t,n))];case"Log1p":return[Ue.K(C("x",e,t,n))];case"Imag":return[Ge.a(C("x",e,t,n))];case"Neg":return[He.W(C("x",e,t,n))];case"Reciprocal":return[je.M(C("x",e,t,n))];case"Real":return[Xe.k(C("x",e,t,n))];case"Relu":return[qe.U(C("x",e,t,n))];case"Round":return[Ke.N(C("x",e,t,n))];case"Selu":return[Ye.U(C("x",e,t,n))];case"Sigmoid":return[Qe.X(C("x",e,t,n))];case"Sin":return[Je.O(C("x",e,t,n))];case"Sign":return[Ze.X(C("x",e,t,n))];case"Sinh":return[et.R(C("x",e,t,n))];case"Softplus":return[tt.W(C("x",e,t,n))];case"Sqrt":return[nt._(C("x",e,t,n))];case"Square":return[st.h(C("x",e,t,n))];case"Tanh":return[at.A(C("x",e,t,n))];case"Tan":return[rt.O(C("x",e,t,n))];case"ClipByValue":return[it.i(C("x",e,t,n),C("clipValueMin",e,t,n),C("clipValueMax",e,t,n))];case"Relu6":return[ot.b(C("x",e,t,n))];case"Rsqrt":return[lt.b($(e.inputNames[0],t,n))];case"Prod":return[ut.W(C("x",e,t,n),C("axes",e,t,n))];case"LeakyRelu":return[ct.h(C("x",e,t,n),C("alpha",e,t,n))];case"Prelu":return[ht.A(C("x",e,t,n),C("alpha",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"control":return(async(e,t,n)=>{switch(e.op){case"If":case"StatelessIf":{const s=C("thenBranch",e,t,n),a=C("elseBranch",e,t,n),r=C("cond",e,t,n),i=C("args",e,t,n);return(await r.data())[0]?n.functionMap[s].executeFunctionAsync(i,n.tensorArrayMap,n.tensorListMap):n.functionMap[a].executeFunctionAsync(i,n.tensorArrayMap,n.tensorListMap)}case"While":case"StatelessWhile":{const s=C("body",e,t,n),a=C("cond",e,t,n),r=C("args",e,t,n),i=await n.functionMap[a].executeFunctionAsync(r,n.tensorArrayMap,n.tensorListMap),o=r.map((e=>e.id));let l=await i[0].data();i.forEach((e=>{e.kept||-1!==o.indexOf(e.id)||e.dispose()}));let u=r;for(;l[0];){const e=u;u=await n.functionMap[s].executeFunctionAsync(u,n.tensorArrayMap,n.tensorListMap);const t=u.map((e=>e.id));e.forEach((e=>{e.kept||-1!==o.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()}));const r=await n.functionMap[a].executeFunctionAsync(u,n.tensorArrayMap,n.tensorListMap);l=await r[0].data(),r.forEach((e=>{e.kept||-1!==o.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()}))}return u}case"LoopCond":return[F(C("pred",e,t,n))];case"Switch":{const s=C("pred",e,t,n);let a=C("data",e,t,n);return a.kept||(a=F(a)),(await s.data())[0]?[void 0,a]:[a,void 0]}case"Merge":{const s=e.inputNames.find((e=>void 0!==$(e,t,n)));return s?[F($(s,t,n))]:void 0}case"Enter":{const s=C("frameName",e,t,n),a=C("tensor",e,t,n);return n.enterFrame(s),[F(a)]}case"Exit":{const s=C("tensor",e,t,n);return n.exitFrame(),[F(s)]}case"NextIteration":{const s=C("tensor",e,t,n);return n.nextIteration(),[F(s)]}case"TensorArrayV3":{const s=C("size",e,t,n),a=C("dtype",e,t,n),r=C("elementShape",e,t,n),i=C("dynamicSize",e,t,n),o=C("clearAfterRead",e,t,n),l=C("identicalElementShapes",e,t,n),u=C("name",e,t,n),c=new gt(u,a,s,r,l,i,o);return n.addTensorArray(c),[c.idTensor,(0,w.scalar)(1)]}case"TensorArrayWriteV3":{const s=C("tensorArrayId",e,t,n),a=C("index",e,t,n),r=C("tensor",e,t,n),i=n.getTensorArray(s.id);return i.write(a,r),[i.idTensor]}case"TensorArrayReadV3":{const s=C("tensorArrayId",e,t,n),a=C("index",e,t,n);return[n.getTensorArray(s.id).read(a)]}case"TensorArrayGatherV3":{const s=C("tensorArrayId",e,t,n),a=C("indices",e,t,n),r=C("dtype",e,t,n);return[n.getTensorArray(s.id).gather(a,r)]}case"TensorArrayScatterV3":{const s=C("tensorArrayId",e,t,n),a=C("indices",e,t,n),r=C("tensor",e,t,n),i=n.getTensorArray(s.id);return i.scatter(a,r),[i.idTensor]}case"TensorArrayConcatV3":{const s=C("tensorArrayId",e,t,n),a=n.getTensorArray(s.id),r=C("dtype",e,t,n);return[a.concat(r)]}case"TensorArraySplitV3":{const s=C("tensorArrayId",e,t,n),a=C("tensor",e,t,n),r=C("lengths",e,t,n),i=n.getTensorArray(s.id);return i.split(r,a),[i.idTensor]}case"TensorArraySizeV3":{const s=C("tensorArrayId",e,t,n),a=n.getTensorArray(s.id);return[(0,w.scalar)(a.size(),"int32")]}case"TensorArrayCloseV3":{const s=C("tensorArrayId",e,t,n),a=n.getTensorArray(s.id);return a.clearAndClose(),[a.idTensor]}case"TensorListSetItem":{const s=C("tensorListId",e,t,n),a=C("index",e,t,n),r=C("tensor",e,t,n),i=n.getTensorList(s.id);return i.setItem(a,r),[i.idTensor]}case"TensorListGetItem":{const s=C("tensorListId",e,t,n),a=C("index",e,t,n),r=C("elementShape",e,t,n),i=C("elementDType",e,t,n);return[n.getTensorList(s.id).getItem(a,r,i)]}case"TensorListScatterV2":case"TensorListScatter":{const s=C("indices",e,t,n),a=function(e,t,n,s){if(t.length!==e.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${e.shape[0]}`);const a=Math.max(...t);if(null!=s&&-1!==s&&a>=s)throw new Error(`Max index must be < array size (${a}  vs. ${s})`);const r=new yt([],n,e.dtype,s),i=(0,w.unstack)(e,0);return t.forEach(((e,t)=>{r.setItem(e,i[t])})),r}(C("tensor",e,t,n),s,C("elementShape",e,t,n),C("numElements",e,t,n));return n.addTensorList(a),[a.idTensor]}case"TensorListReserve":case"EmptyTensorList":{const s=C("elementShape",e,t,n),a=C("elementDType",e,t,n);let r;r="TensorListReserve"===e.op?"numElements":"maxNumElements";const i=function(e,t,n){return new yt([],e,t,n)}(s,a,C(r,e,t,n));return n.addTensorList(i),[i.idTensor]}case"TensorListGather":{const s=C("tensorListId",e,t,n),a=C("indices",e,t,n),r=C("elementShape",e,t,n),i=C("elementDType",e,t,n);return[n.getTensorList(s.id).gather(a,i,r)]}case"TensorListStack":{const s=C("tensorListId",e,t,n),a=C("elementShape",e,t,n),r=C("elementDType",e,t,n),i=C("numElements",e,t,n);return[n.getTensorList(s.id).stack(a,r,i)]}case"TensorListFromTensor":{const s=function(e,t,n){const s=e.dtype;if(e.shape.length<1)throw new Error(`Tensor must be at least a vector, but saw shape: ${e.shape}`);if(e.dtype!==n)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${n}`);pt(e.shape.slice(1),t,"TensorList shape mismatch: ");const a=(0,w.unstack)(e);return new yt(a,t,s)}(C("tensor",e,t,n),C("elementShape",e,t,n),C("elementDType",e,t,n));return n.addTensorList(s),[s.idTensor]}case"TensorListConcat":{const s=C("tensorListId",e,t,n),a=n.getTensorList(s.id),r=C("dtype",e,t,n),i=C("elementShape",e,t,n);return[a.concat(r,i)]}case"TensorListPushBack":{const s=C("tensorListId",e,t,n),a=C("tensor",e,t,n),r=n.getTensorList(s.id);return r.pushBack(a),[r.idTensor]}case"TensorListPopBack":{const s=C("tensorListId",e,t,n),a=C("elementShape",e,t,n),r=C("elementDType",e,t,n);return[n.getTensorList(s.id).popBack(a,r)]}case"TensorListSplit":{const s=C("tensor",e,t,n),a=C("elementShape",e,t,n),r=function(e,t,n){let s=0;const a=t.map((e=>(s+=e,s)));if(s!==e.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${s}, and tensor's shape is: ${e.shape}`);const r=mt(e.shape.slice(1),n),i=0===s?0:e.size/s,o=(0,w.tidy)((()=>{const n=[];e=(0,w.reshape)(e,[1,s,i]);for(let s=0;s<t.length;++s){const o=[0,0===s?0:a[s-1],0],l=[1,t[s],i];n[s]=(0,w.reshape)((0,w.slice)(e,o,l),r)}return e.dispose(),n})),l=new yt([],n,e.dtype,t.length);for(let e=0;e<o.length;e++)l.setItem(e,o[e]);return l}(s,C("lengths",e,t,n),a);return n.addTensorList(r),[r.idTensor]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n);case"convolution":return w.tidy((()=>((e,t,n)=>{switch(e.op){case"Conv1D":{const s=C("stride",e,t,n),a=C("pad",e,t,n),r=C("dataFormat",e,t,n).toUpperCase(),i=C("dilation",e,t,n);return[bt.P(C("x",e,t,n),C("filter",e,t,n),s,a,r,i)]}case"Conv2D":{const s=C("strides",e,t,n),a=R(e,t,n),r=C("dataFormat",e,t,n).toUpperCase(),i=C("dilations",e,t,n);return[xt.T(C("x",e,t,n),C("filter",e,t,n),[s[1],s[2]],a,r,[i[1],i[2]])]}case"_FusedConv2D":{const{stride:s,pad:a,dataFormat:r,dilations:i,biasArg:o,preluArg:l,activationFunc:u,leakyreluAlpha:c}=Et(e,t,n);return[vt.conv2d({x:C("x",e,t,n),filter:C("filter",e,t,n),strides:[s[1],s[2]],pad:a,dataFormat:r,dilations:[i[1],i[2]],bias:o,activation:u,preluActivationWeights:l,leakyreluAlpha:c})]}case"FusedDepthwiseConv2dNative":{const{stride:s,pad:a,dataFormat:r,dilations:i,biasArg:o,preluArg:l,activationFunc:u,leakyreluAlpha:c}=Et(e,t,n);return[vt.depthwiseConv2d({x:C("x",e,t,n),filter:C("filter",e,t,n),strides:[s[1],s[2]],pad:a,dataFormat:r,dilations:[i[1],i[2]],bias:o,activation:u,preluActivationWeights:l,leakyreluAlpha:c})]}case"Conv2DBackpropInput":case"Conv2dTranspose":{const s=C("outputShape",e,t,n),a=C("strides",e,t,n),r=R(e,t,n);return[kt.b(C("x",e,t,n),C("filter",e,t,n),s,[a[1],a[2]],r)]}case"DepthwiseConv2dNative":case"DepthwiseConv2d":{const s=C("strides",e,t,n),a=R(e,t,n),r=C("dilations",e,t,n),i=C("dataFormat",e,t,n).toUpperCase();return[wt.B(C("input",e,t,n),C("filter",e,t,n),[s[1],s[2]],a,i,[r[1],r[2]])]}case"Conv3D":{const s=C("strides",e,t,n),a=C("pad",e,t,n),r=C("dataFormat",e,t,n).toUpperCase(),i=C("dilations",e,t,n);return[Nt.p(C("x",e,t,n),C("filter",e,t,n),[s[1],s[2],s[3]],a,r,[i[1],i[2],i[3]])]}case"AvgPool":{const s=C("strides",e,t,n),a=C("pad",e,t,n),r=C("kernelSize",e,t,n);return[It.w(C("x",e,t,n),[r[1],r[2]],[s[1],s[2]],a)]}case"MaxPool":{const s=C("strides",e,t,n),a=C("pad",e,t,n),r=C("kernelSize",e,t,n);return[St._(C("x",e,t,n),[r[1],r[2]],[s[1],s[2]],a)]}case"MaxPoolWithArgmax":{const s=C("strides",e,t,n),a=C("pad",e,t,n),r=C("kernelSize",e,t,n),i=C("includeBatchInIndex",e,t,n),{result:o,indexes:l}=Tt.I(C("x",e,t,n),[r[1],r[2]],[s[1],s[2]],a,i);return[o,l]}case"AvgPool3D":{const s=C("strides",e,t,n),a=C("pad",e,t,n),r=C("kernelSize",e,t,n);return[Ct.u(C("x",e,t,n),[r[1],r[2],r[3]],[s[1],s[2],s[3]],a)]}case"MaxPool3D":{const s=C("strides",e,t,n),a=C("pad",e,t,n),r=C("kernelSize",e,t,n);return[$t.Y(C("x",e,t,n),[r[1],r[2],r[3]],[s[1],s[2],s[3]],a)]}case"Dilation2D":{const s=C("strides",e,t,n),a=C("pad",e,t,n),r=C("dilations",e,t,n),i=s[1],o=s[2],l=r[1],u=r[2];return[At.W(C("x",e,t,n),C("filter",e,t,n),[i,o],a,[l,u],"NHWC")]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"creation":return w.tidy((()=>((e,t,n)=>{switch(e.op){case"Fill":{const s=C("shape",e,t,n),a=C("dtype",e,t,n),r=C("value",e,t,n);return[_t.h(s,r,a)]}case"LinSpace":{const s=C("start",e,t,n),a=C("stop",e,t,n),r=C("num",e,t,n);return[Rt.S(s,a,r)]}case"Multinomial":{const s=C("logits",e,t,n),a=C("numSamples",e,t,n),r=C("seed",e,t,n);return[Ft.S(s,a,r)]}case"OneHot":{const s=C("indices",e,t,n),a=C("depth",e,t,n),r=C("onValue",e,t,n),i=C("offValue",e,t,n);return[Dt.l(s,a,r,i)]}case"Ones":return[Ot.i(C("shape",e,t,n),C("dtype",e,t,n))];case"OnesLike":return[Mt.J(C("x",e,t,n))];case"RandomUniform":return[zt.L(C("shape",e,t,n),C("minval",e,t,n),C("maxval",e,t,n),C("dtype",e,t,n))];case"Range":{const s=C("start",e,t,n),a=C("stop",e,t,n),r=C("step",e,t,n);return[Lt.w(s,a,r,C("dtype",e,t,n))]}case"TruncatedNormal":{const s=C("shape",e,t,n),a=C("mean",e,t,n),r=C("stdDev",e,t,n),i=C("seed",e,t,n);return[Bt.X(s,a,r,C("dtype",e,t,n),i)]}case"Zeros":return[Pt.l(C("shape",e,t,n),C("dtype",e,t,n))];case"ZerosLike":return[Vt.P(C("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"dynamic":return(async(e,t,n)=>{switch(e.op){case"NonMaxSuppressionV5":{const{boxes:s,scores:a,maxOutputSize:r,iouThreshold:i,scoreThreshold:o,softNmsSigma:l}=jt(e,t,n),u=await Wt.BHj.nonMaxSuppressionWithScoreAsync(s,a,r,i,o,l);return[u.selectedIndices,u.selectedScores]}case"NonMaxSuppressionV4":{const{boxes:s,scores:a,maxOutputSize:r,iouThreshold:i,scoreThreshold:o}=jt(e,t,n),l=C("padToMaxOutputSize",e,t,n),u=await Wt.BHj.nonMaxSuppressionPaddedAsync(s,a,r,i,o,l);return[u.selectedIndices,u.validOutputs]}case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":{const{boxes:s,scores:a,maxOutputSize:r,iouThreshold:i,scoreThreshold:o}=jt(e,t,n);return[await Wt.BHj.nonMaxSuppressionAsync(s,a,r,i,o)]}case"Where":{const s=Ut.p(C("condition",e,t,n),"bool"),a=[await Gt.i(s)];return s.dispose(),a}case"ListDiff":return Ht.O(C("x",e,t,n),C("y",e,t,n));default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n);case"evaluation":return w.tidy((()=>((e,t,n)=>{switch(e.op){case"TopKV2":{const s=C("x",e,t,n),a=C("k",e,t,n),r=C("sorted",e,t,n),i=Xt.h(s,a,r);return[i.values,i.indices]}case"Unique":{const s=C("x",e,t,n),a=qt.T(s);return[a.values,a.indices]}case"UniqueV2":{const s=C("x",e,t,n),a=C("axis",e,t,n),r=qt.T(s,a);return[r.values,r.indices]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"image":return w.tidy((()=>((e,t,n)=>{switch(e.op){case"ResizeBilinear":{const s=C("images",e,t,n),a=C("size",e,t,n),r=C("alignCorners",e,t,n),i=C("halfPixelCenters",e,t,n);return[Wt.BHj.resizeBilinear(s,[a[0],a[1]],r,i)]}case"ResizeNearestNeighbor":{const s=C("images",e,t,n),a=C("size",e,t,n),r=C("alignCorners",e,t,n),i=C("halfPixelCenters",e,t,n);return[Wt.BHj.resizeNearestNeighbor(s,[a[0],a[1]],r,i)]}case"CropAndResize":{const s=C("image",e,t,n),a=C("boxes",e,t,n),r=C("boxInd",e,t,n),i=C("cropSize",e,t,n),o=C("method",e,t,n),l=C("extrapolationValue",e,t,n);return[Wt.BHj.cropAndResize(s,a,r,i,o,l)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"graph":return w.tidy((()=>((e,t,n)=>{switch(e.op){case"Const":return t[e.name];case"PlaceholderWithDefault":const s=C("default",e,t,n);return[$(e.name,t,n)||s];case"Placeholder":return[$(e.name,t,n)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":return[F(C("x",e,t,n))];case"IdentityN":return C("x",e,t,n).map((e=>F(e)));case"Snapshot":return[F(C("x",e,t,n))];case"Shape":return[Kt.R(C("x",e,t,n).shape,"int32")];case"ShapeN":return C("x",e,t,n).map((e=>Kt.R(e.shape)));case"Size":return[Yt.i(C("x",e,t,n).size,"int32")];case"Rank":return[Yt.i(C("x",e,t,n).rank,"int32")];case"NoOp":return[Yt.i(1)];case"Print":const a=C("x",e,t,n),r=C("data",e,t,n),i=C("message",e,t,n),o=C("summarize",e,t,n);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(i);for(let e=0;e<r.length;e++)console.log(Array.prototype.slice.call(r[e].dataSync()).slice(0,o));return[a];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"logical":return w.tidy((()=>((e,t,n)=>{switch(e.op){case"Equal":return[Jt.D(C("a",e,t,n),C("b",e,t,n))];case"NotEqual":return[Zt.Q(C("a",e,t,n),C("b",e,t,n))];case"Greater":return[en.p(C("a",e,t,n),C("b",e,t,n))];case"GreaterEqual":return[tn.b(C("a",e,t,n),C("b",e,t,n))];case"Less":return[nn.d(C("a",e,t,n),C("b",e,t,n))];case"LessEqual":return[sn.z(C("a",e,t,n),C("b",e,t,n))];case"LogicalAnd":return[an.H(C("a",e,t,n),C("b",e,t,n))];case"LogicalNot":return[rn.h(C("a",e,t,n))];case"LogicalOr":return[on.K(C("a",e,t,n),C("b",e,t,n))];case"Select":case"SelectV2":return[ln.a(C("condition",e,t,n),C("a",e,t,n),C("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"matrices":return w.tidy((()=>((e,t,n)=>{switch(e.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[un.O(C("a",e,t,n),C("b",e,t,n),C("transposeA",e,t,n),C("transposeB",e,t,n))];case"Transpose":return[cn.p(C("x",e,t,n),C("perm",e,t,n))];case"_FusedMatMul":const[s,a]=C("fusedOps",e,t,n),r="biasadd"===s,i="prelu"===a,o=C("numArgs",e,t,n),l=C("leakyreluAlpha",e,t,n);if(r){if(i&&2!==o)throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&1!==o)throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}const[u,c]=C("args",e,t,n);return[vt.matMul({a:C("a",e,t,n),b:C("b",e,t,n),transposeA:C("transposeA",e,t,n),transposeB:C("transposeB",e,t,n),bias:u,activation:a,preluActivationWeights:c,leakyreluAlpha:l})];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"normalization":return w.tidy((()=>((e,t,n)=>{switch(e.op){case"FusedBatchNorm":case"FusedBatchNormV2":case"FusedBatchNormV3":return[hn.t(C("x",e,t,n),C("mean",e,t,n),C("variance",e,t,n),C("offset",e,t,n),C("scale",e,t,n),C("epsilon",e,t,n))];case"LRN":return[pn.G(C("x",e,t,n),C("radius",e,t,n),C("bias",e,t,n),C("alpha",e,t,n),C("beta",e,t,n))];case"Softmax":return[dn.X(C("x",e,t,n))];case"LogSoftmax":return[fn.C(C("x",e,t,n))];case"SparseToDense":return[mn.e(C("sparseIndices",e,t,n),C("outputShape",e,t,n),C("sparseValues",e,t,n),C("defaultValue",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"reduction":return w.tidy((()=>((e,t,n)=>{switch(e.op){case"Max":{const s=C("axis",e,t,n),a=C("keepDims",e,t,n);return[gn.F(C("x",e,t,n),s,a)]}case"Mean":{const s=C("axis",e,t,n),a=C("keepDims",e,t,n);return[yn.J(C("x",e,t,n),s,a)]}case"Min":{const s=C("axis",e,t,n),a=C("keepDims",e,t,n);return[bn.V(C("x",e,t,n),s,a)]}case"Sum":{const s=C("axis",e,t,n),a=C("keepDims",e,t,n);return[xn.S(C("x",e,t,n),s,a)]}case"All":{const s=C("axis",e,t,n),a=C("keepDims",e,t,n);return[vn.$(C("x",e,t,n),s,a)]}case"Any":{const s=C("axis",e,t,n),a=C("keepDims",e,t,n);return[kn.Y(C("x",e,t,n),s,a)]}case"ArgMax":{const s=C("axis",e,t,n);return[wn.N(C("x",e,t,n),s)]}case"ArgMin":{const s=C("axis",e,t,n);return[Nn.v(C("x",e,t,n),s)]}case"Prod":{const s=C("axis",e,t,n),a=C("keepDims",e,t,n);return[ut.W(C("x",e,t,n),s,a)]}case"Cumsum":{const s=C("axis",e,t,n),a=C("exclusive",e,t,n),r=C("reverse",e,t,n);return[In.z(C("x",e,t,n),s,a,r)]}case"Bincount":const s=C("x",e,t,n),a=C("weights",e,t,n),r=C("size",e,t,n);return[Sn.y(s,a,r)];case"DenseBincount":{const s=C("x",e,t,n),a=C("weights",e,t,n),r=C("size",e,t,n),i=C("binaryOutput",e,t,n);return[Tn.p(s,a,r,i)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"slice_join":return w.tidy((()=>((e,t,n)=>{switch(e.op){case"ConcatV2":case"Concat":{const s=C("n",e,t,n),a=C("axis",e,t,n);let r=C("tensors",e,t,n);return r=r.slice(0,s),[Cn.z(r,a)]}case"Gather":{const s=C("x",e,t,n),a=C("indices",e,t,n);return[$n.I(s,Ut.p(a,"int32"),0)]}case"GatherV2":{const s=C("axis",e,t,n),a=C("batchDims",e,t,n),r=C("x",e,t,n),i=C("indices",e,t,n);return[$n.I(r,Ut.p(i,"int32"),s,a)]}case"Reverse":{const s=C("dims",e,t,n),a=[];for(let e=0;e<s.length;e++)s[e]&&a.push(e);const r=C("x",e,t,n);return[An.G(r,a)]}case"ReverseV2":{const s=C("axis",e,t,n),a=C("x",e,t,n);return[An.G(a,s)]}case"Slice":{const s=C("begin",e,t,n),a=C("size",e,t,n);return[En.t(C("x",e,t,n),s,a)]}case"StridedSlice":{const s=C("begin",e,t,n),a=C("end",e,t,n),r=C("strides",e,t,n),i=C("beginMask",e,t,n),o=C("endMask",e,t,n),l=C("ellipsisMask",e,t,n),u=C("newAxisMask",e,t,n),c=C("shrinkAxisMask",e,t,n),h=C("x",e,t,n);return[_n.N(h,s,a,r,i,o,l,u,c)]}case"Pack":return(0,w.tidy)((()=>{const s=C("axis",e,t,n),a=C("tensors",e,t,n),r=a[0].shape,i=Rn.L(a[0]).shape,o=a.map((e=>{const t=w.util.arraysEqual(e.shape,r);if(!t&&!w.util.arraysEqual(Rn.L(e).shape,i))throw new Error("the input tensors shape does not match");return t?e:Fn.X(e,r)}));return[Dn.k(o,s)]}));case"Unpack":{const s=C("axis",e,t,n),a=C("tensor",e,t,n);return On.H(a,s)}case"Tile":{const s=C("reps",e,t,n);return[Mn.G(C("x",e,t,n),s)]}case"Split":case"SplitV":{const s=C("axis",e,t,n),a=C("numOrSizeSplits",e,t,n),r=C("x",e,t,n);return zn.V(r,a,s)}case"ScatterNd":{const s=C("indices",e,t,n),a=C("values",e,t,n),r=C("shape",e,t,n);return[Ln.s(s,a,r)]}case"GatherNd":{const s=C("x",e,t,n),a=C("indices",e,t,n);return[Bn.d(s,a)]}case"SparseToDense":{const s=C("sparseIndices",e,t,n),a=C("outputShape",e,t,n),r=C("sparseValues",e,t,n),i=C("defaultValue",e,t,n);return[mn.e(s,r,a,r.dtype===i.dtype?i:Ut.p(i,r.dtype))]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"spectral":return w.tidy((()=>((e,t,n)=>{switch(e.op){case"FFT":return[Pn.k(C("x",e,t,n))];case"IFFT":return[Vn.S(C("x",e,t,n))];case"RFFT":return[Wn.Q(C("x",e,t,n))];case"IRFFT":return[Un.w(C("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"transformation":return w.tidy((()=>((e,t,n)=>{switch(e.op){case"Cast":return[Ut.p(C("x",e,t,n),C("dtype",e,t,n))];case"ExpandDims":{const s=C("axis",e,t,n);return[Gn.d(C("x",e,t,n),s)]}case"Squeeze":{const s=C("axis",e,t,n);return[Rn.L(C("x",e,t,n),s)]}case"Reshape":return[Fn.X(C("x",e,t,n),C("shape",e,t,n))];case"MirrorPad":return[Hn.V(C("x",e,t,n),C("padding",e,t,n),C("mode",e,t,n))];case"PadV2":case"Pad":return[jn.v(C("x",e,t,n),C("padding",e,t,n),C("constantValue",e,t,n))];case"SpaceToBatchND":{const s=C("blockShape",e,t,n),a=C("paddings",e,t,n);return[Xn.f(C("x",e,t,n),s,a)]}case"BatchToSpaceND":{const s=C("blockShape",e,t,n),a=C("crops",e,t,n);return[qn.E(C("x",e,t,n),s,a)]}case"DepthToSpace":{const s=C("blockSize",e,t,n),a=C("dataFormat",e,t,n).toUpperCase();return[Kn.n(C("x",e,t,n),s,a)]}case"BroadcastTo":return[Yn.U(C("x",e,t,n),C("shape",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"hash_table":return(async(e,t,n,s)=>{switch(e.op){case"HashTable":case"HashTableV2":{const a=C("keyDType",e,t,n),r=C("valueDType",e,t,n),i=new Qt(a,r);return s.addHashTable(e.name,i),[i.handle]}case"LookupTableImport":case"LookupTableImportV2":{const a=C("tableHandle",e,t,n,s),r=C("keys",e,t,n),i=C("values",e,t,n),o=s.getHashTableById(a.id);return[await o.import(r,i)]}case"LookupTableFind":case"LookupTableFindV2":{const a=C("tableHandle",e,t,n,s),r=C("keys",e,t,n),i=C("defaultValue",e,t,n),o=s.getHashTableById(a.id);return[await o.find(r,i)]}case"LookupTableSize":case"LookupTableSizeV2":{const a=C("tableHandle",e,t,n,s);return[s.getHashTableById(a.id).tensorSize()]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n,s);case"custom":const a=S(e.op);if(a&&a.customExecutor)return a.customExecutor(new pe(e,t,n));throw TypeError(`Custom op ${e.op} is not registered.`);default:throw TypeError(`Unknown op '${e.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`)}})(e,t,n);return w.util.isPromise(a)?a.then((e=>[].concat(e))):[].concat(a)}class Jn{constructor(e={},t={},n={},s={}){this.weightMap=e,this.tensorArrayMap=t,this.tensorListMap=n,this.functionMap=s,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}newFrame(e,t){return{id:e,frameName:t,iterationId:0}}set currentContext(e){this.contexts!==e&&(this.contexts=e,this.generateCurrentContextIds())}get currentContext(){return this.contexts}get currentContextId(){return this._currentContextIds[0]}get currentContextIds(){return this._currentContextIds}generateCurrentContextIds(){const e=[];for(let t=0;t<this.contexts.length-1;t++){const n=this.contexts.slice(0,this.contexts.length-t);e.push(this.contextIdforContexts(n))}e.push(""),this._currentContextIds=e}contextIdforContexts(e){return e?e.map((e=>0===e.id&&0===e.iterationId?"":`${e.frameName}-${e.iterationId}`)).join("/"):""}enterFrame(e){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,e)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))}exitFrame(){if(!(this.contexts&&this.contexts.length>1))throw new Error("Cannot exit frame, the context is empty");this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift()}nextIteration(){if(!(this.contexts&&this.contexts.length>0))throw new Error("Cannot increase frame iteration, the context is empty");{this.contexts=this.contexts.slice(),this.lastId++;const e=Object.assign({},this.contexts[this.contexts.length-1]);e.iterationId+=1,e.id=this.lastId,this.contexts.splice(-1,1,e),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))}}getWeight(e){return this.weightMap[e]}addTensorArray(e){this.tensorArrayMap[e.id]=e}getTensorArray(e){return this.tensorArrayMap[e]}addTensorList(e){this.tensorListMap[e.id]=e}getTensorList(e){return this.tensorListMap[e]}dispose(e){for(const t in this.tensorArrayMap)this.tensorArrayMap[t].clearAndClose(e);for(const t in this.tensorListMap)this.tensorListMap[t].clearAndClose(e)}}function Zn(e,t,n,s){const a=new Set,r=[];let i=null,o=null;const l=new Set,u=Object.keys(e).map((e=>_(e)[0]));let c=[];null!=s&&(c=s.map((e=>_(e.name)[0])));const h=[...t];for(;h.length>0;){const e=h.pop();(ss(e)||as(e)||rs(e))&&null==i&&(i=e,o=i.children.map((e=>e.name)).filter((e=>a.has(e)))),a.add(e.name),null==n[e.name]&&-1===u.indexOf(e.name)&&-1===c.indexOf(e.name)&&(0!==e.inputs.length?e.inputs.forEach((e=>{l.has(e.name)||(l.add(e.name),h.push(e))})):r.push(e.name))}return{inputs:e,outputs:t,usedNodes:a,missingInputs:r,dynamicNode:i,syncInputs:o}}const es=["Switch","Merge","Enter","Exit","NextIteration","StatelessIf","StatelessWhile","if","While"],ts=["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"],ns=["HashTable","HashTableV2","LookupTableImport","LookupTableImportV2","LookupTableFind","LookupTableFindV2","LookupTableSize","LookupTableSizeV2"];function ss(e){return es.indexOf(e.op)>=0}function as(e){return ts.indexOf(e.op)>=0}function rs(e){return ns.indexOf(e.op)>=0}class is{constructor(e,t){this.graph=e,this.parent=t,this.compiledMap=new Map,this._weightMap={},this.SEPERATOR=",",this._functions={},this._functionExecutorMap={},this._outputs=e.outputs,this._inputs=e.inputs,this._initNodes=e.initNodes,this._signature=e.signature,this._functions=e.functions,null!=e.functions&&Object.keys(e.functions).forEach((t=>{this._functionExecutorMap[t]=new is(e.functions[t],this)}))}get weightIds(){return this.parent?this.parent.weightIds:this._weightIds}get functionExecutorMap(){return this.parent?this.parent.functionExecutorMap:this._functionExecutorMap}get weightMap(){return this.parent?this.parent.weightMap:this._weightMap}set weightMap(e){const t=Object.keys(e).map((t=>e[t].map((e=>e.id))));this._weightIds=[].concat(...t),this._weightMap=e}set resourceManager(e){this._resourceManager=e}get inputs(){return this._inputs.map((e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0})))}get outputs(){return this._outputs.map((e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0})))}get inputNodes(){return this._inputs.map((e=>e.signatureKey||e.name))}get outputNodes(){return this._outputs.map((e=>{const t=e.signatureKey||e.name;return e.defaultOutput?`${t}:${e.defaultOutput}`:t}))}get functions(){return Object.keys(this._functions).reduce(((e,t)=>(e[t]=this._functions[t].signature,e)),{})}getCompilationKey(e,t){const n=e.map((e=>e.name)).sort(),s=t.map((e=>e.name)).sort();return n.join(this.SEPERATOR)+"--"+s.join(this.SEPERATOR)}compile(e,t){const n=Zn(e,t,this.weightMap,this._initNodes),{missingInputs:s,dynamicNode:a,syncInputs:r}=n;if(null!=a)throw new Error(`This execution contains the node '${a.name}', which has the dynamic op '${a.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${r}]`);if(s.length>0){const n=t.map((e=>e.name)),a=Object.keys(e);throw new Error(`Cannot compute the outputs [${n}] from the provided inputs [${a}]. Missing the following inputs: [${s}]`)}return function(e,t,n){const{usedNodes:s,inputs:a}=n,r=[],i=Object.keys(a).map((e=>_(e)[0])).map((t=>e.nodes[t])),o=e.initNodes;i.forEach((e=>{s.has(e.name)&&r.push(e)})),e.weights.forEach((e=>{s.has(e.name)&&r.push(e)})),null!=o&&o.forEach((e=>{s.has(e.name)&&r.push(e)}));const l=new Set,u=[];for(;r.length>0;){const e=r.pop();l.add(e.name),t[e.name]||u.push(e),e.children.forEach((e=>{!l.has(e.name)&&s.has(e.name)&&e.inputs.every((e=>l.has(e.name)))&&r.push(e)}))}return u}(this.graph,this.weightMap,n)}execute(e,t){e=this.mapInputs(e);const n=Object.keys(e).sort();this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t);const s=n.map((e=>this.graph.nodes[_(e)[0]])),a=t.map((e=>_(e)[0]));let r=a.map((e=>this.graph.nodes[e]));0===r.length&&(r=this._outputs);const i=this.getCompilationKey(s,r);let o=this.compiledMap.get(i);null==o&&(o=this.compile(e,r),this.compiledMap.set(i,o));const l={},u={};return(0,w.tidy)((()=>{const n=new Jn(this.weightMap,l,u,this.functionExecutorMap),s=Object.assign({},this.weightMap);Object.keys(e).forEach((t=>{const[n,a]=_(t),r=[];r[a]=e[t],s[n]=r}));const r=this.getFrozenTensorIds(s),i={};for(let e=0;e<o.length;e++){const t=o[e];if(!s[t.name]){const e=Qn(t,s,n,this._resourceManager);if(w.util.isPromise(e))throw new Error(`The execution of the op '${t.op}' returned a promise. Please use model.executeAsync() instead.`);s[t.name]=e,this.checkTensorForDisposal(t.name,t,s,n,r,a,i)}}return null==this.parent&&n.dispose(r),t.map((e=>$(e,s,n)))}))}getFrozenTensorIds(e){const t=[].concat.apply([],Object.keys(e).map((t=>e[t])).map((e=>e.map((e=>e.id)))));return new Set(t)}checkTensorForDisposal(e,t,n,s,a,r,i){"control"!==t.category&&-1===r.indexOf(e)&&(n[e].forEach((e=>{null!=e&&(i[e.id]=(i[e.id]||0)+t.children.length)})),t.inputs.forEach((e=>{if("control"!==e.category){const t=function(e,t,n){return t[E(e,n.currentContextId)]}(e.name,n,s);null!=t&&t.forEach((e=>{if(e&&!a.has(e.id)){const t=i[e.id];1===t?(e.dispose(),delete i[e.id]):null!=t&&i[e.id]--}}))}})))}async executeAsync(e,t){return this._executeAsync(e,t)}async _executeAsync(e,t,n=!1,s={},a={}){n||(e=this.mapInputs(e),this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t));const r=new Jn(this.weightMap,s,a,this.functionExecutorMap),i=await this.executeWithControlFlow(e,r,t,n),o=t.map((e=>$(e,i,r))),l=o.map((e=>e.id)),u=Object.keys(e).map((t=>e[t].id)),c=new Set([...l,...u,...this.weightIds]);return Object.keys(i).forEach((e=>{i[e].forEach((e=>{!e||e.isDisposed||c.has(e.id)||e.dispose()}))})),null==this.parent&&r.dispose(c),o}async executeFunctionAsync(e,t,n){const s=e.reduce(((e,t,n)=>(e[this.inputs[n].name]=t,e)),{});return this._executeAsync(s,this.outputNodes,!0,t,n)}async executeWithControlFlow(e,t,n,s){const a=Object.keys(e),r=a.map((e=>this.graph.nodes[_(e)[0]])),i=n.map((e=>_(e)[0]));let o=i.map((e=>this.graph.nodes[e]));0===o.length&&(o=this._outputs);const{usedNodes:l,missingInputs:u,dynamicNode:c,syncInputs:h}=Zn(e,o,this.weightMap,this._initNodes),p=[...r,...this.graph.weights,...this._initNodes||[]].map((e=>({node:e,contexts:t.currentContext}))),d=Object.assign({},this.weightMap);Object.keys(e).forEach((t=>{const[n,s]=_(t),a=[];a[s]=e[t],d[n]=a}));const f={},m=this.getFrozenTensorIds(d),g={};for(;p.length>0;){const e=this.processStack(r,p,t,d,g,m,i,f,l);await Promise.all(e)}null!=c||s||console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");const y=o.filter((e=>!ss(e)&&!$(e.name,d,t))).map((e=>e.name));if(y.length>0){let e="";throw null!=c&&(e=`Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${h}]`),new Error(`Cannot compute the outputs [${y}] from the provided inputs [${a}]. Consider providing the following inputs: [${u}]. ${e}`)}return d}processStack(e,t,n,s,a,r,i,o,l){const u=[];for(;t.length>0;){const e=t.pop();n.currentContext=e.contexts;let c="";if("Enter"===e.node.op&&C("isConstant",e.node,s,n)&&([c]=A(e.node.name,n)),null==s[e.node.name]){const h=Qn(e.node,s,n,this._resourceManager);c||([c]=A(e.node.name,n));const p=n.currentContext;w.util.isPromise(h)?u.push(h.then((u=>(s[c]=u,n.currentContext=p,this.checkTensorForDisposal(c,e.node,s,n,r,i,o),this.processChildNodes(e.node,t,n,s,a,l),u)))):(s[c]=h,this.checkTensorForDisposal(c,e.node,s,n,r,i,o),this.processChildNodes(e.node,t,n,s,a,l))}else this.processChildNodes(e.node,t,n,s,a,l)}return u}processChildNodes(e,t,n,s,a,r){e.children.forEach((e=>{const[i]=A(e.name,n);!a[i]&&r.has(e.name)&&("Merge"===e.op?e.inputNames.some((e=>!!$(e,s,n)))&&(a[i]=!0,t.push({contexts:n.currentContext,node:e})):e.inputNames.every((e=>!!$(e,s,n)))&&(a[i]=!0,t.push({contexts:n.currentContext,node:e})))}))}dispose(){Object.keys(this.weightMap).forEach((e=>this.weightMap[e].forEach((e=>e.dispose()))))}checkInputShapeAndType(e){Object.keys(e).forEach((t=>{const n=e[t],[s]=_(t),a=this.graph.nodes[s];if(a.attrParams.shape&&a.attrParams.shape.value){const e=a.attrParams.shape.value,t=e.length===n.shape.length&&n.shape.every(((t,n)=>-1===e[n]||e[n]===t));w.util.assert(t,(()=>`The shape of dict['${a.name}'] provided in model.execute(dict) must be [${e}], but was [${n.shape}]`))}a.attrParams.dtype&&a.attrParams.dtype.value&&w.util.assert(n.dtype===a.attrParams.dtype.value,(()=>`The dtype of dict['${a.name}'] provided in model.execute(dict) must be ${a.attrParams.dtype.value}, but was ${n.dtype}`))}))}mapInputs(e){const t={};for(const n in e)null!=this._signature&&null!=this._signature.inputs&&null!=this._signature.inputs[n]?t[this._signature.inputs[n].name]=e[n]:t[n]=e[n];return t}checkInputs(e){const t=Object.keys(e).filter((e=>{const[t]=_(e);return null==this.graph.nodes[t]}));if(t.length>0)throw new Error(`The dict provided in model.execute(dict) has keys: [${t}] that are not part of graph`)}mapOutputs(e){return e.map((e=>null!=this._signature&&null!=this._signature.outputs&&null!=this._signature.outputs[e]?this._signature.outputs[e].name:e),{})}checkOutputs(e){e.forEach((e=>{const[t]=_(e);if(!this.graph.nodes[t])throw new Error(`The output '${e}' is not found in the graph`)}))}}class os{constructor(e={},t={}){this.hashTableNameToHandle=e,this.hashTableMap=t}addHashTable(e,t){this.hashTableNameToHandle[e]=t.handle,this.hashTableMap[t.id]=t}getHashTableHandleByName(e){return this.hashTableNameToHandle[e]}getHashTableById(e){return this.hashTableMap[e]}dispose(){for(const e in this.hashTableMap)this.hashTableMap[e].clearAndClose(),delete this.hashTableMap[e];for(const e in this.hashTableNameToHandle)this.hashTableNameToHandle[e].dispose(),delete this.hashTableNameToHandle[e]}}class ls{constructor(e,t={}){this.modelUrl=e,this.loadOptions=t,this.version="n/a",null==t&&(this.loadOptions={}),this.resourceManager=new os}get modelVersion(){return this.version}get inputNodes(){return this.executor.inputNodes}get outputNodes(){return this.executor.outputNodes}get inputs(){return this.executor.inputs}get outputs(){return this.executor.outputs}get weights(){return this.executor.weightMap}get metadata(){return this.artifacts.userDefinedMetadata}get modelSignature(){return this.signature}findIOHandler(){const e=this.modelUrl;if(null!=e.load)this.handler=e;else if(null!=this.loadOptions.requestInit)this.handler=w.io.browserHTTPRequest(e,this.loadOptions);else{const t=w.io.getLoadHandlers(e,this.loadOptions);if(0===t.length)t.push(w.io.browserHTTPRequest(e,this.loadOptions));else if(t.length>1)throw new Error(`Found more than one (${t.length}) load handlers for URL '${[e]}'`);this.handler=t[0]}}async load(){if(this.findIOHandler(),null==this.handler.load)throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const e=await this.handler.load();return this.loadSync(e)}loadSync(e){this.artifacts=e;const t=this.artifacts.modelTopology;let n;n=null!=this.artifacts.userDefinedMetadata&&null!=this.artifacts.userDefinedMetadata.signature?this.artifacts.userDefinedMetadata.signature:this.artifacts.signature,this.signature=n,this.version=`${t.versions.producer}.${t.versions.minConsumer}`;const s=w.io.decodeWeights(this.artifacts.weightData,this.artifacts.weightSpecs);if(this.executor=new is(Q.Instance.transformGraph(t,this.signature)),this.executor.weightMap=this.convertTensorMapToTensorsMap(s),this.executor.resourceManager=this.resourceManager,null!=e.modelInitializer&&null!=e.modelInitializer.node){const t=Q.Instance.transformGraph(e.modelInitializer);this.initializer=new is(t),this.initializer.weightMap=this.executor.weightMap,this.initializer.resourceManager=this.resourceManager,this.initializer.executeAsync({},[])}return!0}async save(e,t){if("string"==typeof e){const t=w.io.getSaveHandlers(e);if(0===t.length)throw new Error(`Cannot find any save handlers for URL '${e}'`);if(t.length>1)throw new Error(`Found more than one (${t.length}) save handlers for URL '${e}'`);e=t[0]}if(null==e.save)throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return e.save(this.artifacts)}predict(e,t){return this.execute(e,this.outputNodes)}normalizeInputs(e){if(!(e instanceof w.Tensor||Array.isArray(e)))return e;if((e=Array.isArray(e)?e:[e]).length!==this.inputNodes.length)throw new Error(`Input tensor count mismatch,the graph model has ${this.inputNodes.length} placeholders, while there are ${e.length} input tensors.`);return this.inputNodes.reduce(((t,n,s)=>(t[n]=e[s],t)),{})}normalizeOutputs(e){return e=e||this.outputNodes,Array.isArray(e)?e:[e]}execute(e,t){e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const n=this.executor.execute(e,t);return n.length>1?n:n[0]}async executeAsync(e,t){e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const n=await this.executor.executeAsync(e,t);return n.length>1?n:n[0]}convertTensorMapToTensorsMap(e){return Object.keys(e).reduce(((t,n)=>(t[n]=[e[n]],t)),{})}dispose(){this.executor.dispose(),this.initializer&&this.initializer.dispose(),this.resourceManager.dispose()}}async function us(e,t={}){if(null==e)throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");null==t&&(t={}),t.fromTFHub&&null==e.load&&(e.endsWith("/")||(e+="/"),e=`${e}model.json?tfjs-format=file`);const n=new ls(e,t);return await n.load(),n}const cs="3.3.0"},8713:(e,t,n)=>{"use strict";n.d(t,{JL:()=>s,Zu:()=>a});class s{constructor(e,t){this.backend=e,this.dataMover=t,this.data=new WeakMap,this.dataIdsCount=0}get(e){return this.data.has(e)||this.dataMover.moveData(this.backend,e),this.data.get(e)}set(e,t){this.dataIdsCount++,this.data.set(e,t)}has(e){return this.data.has(e)}delete(e){return this.dataIdsCount--,this.data.delete(e)}numDataIds(){return this.dataIdsCount}}class a{refCount(e){return r("refCount")}incRef(e){return r("incRef")}timerAvailable(){return!0}time(e){return r("time")}read(e){return r("read")}readSync(e){return r("readSync")}numDataIds(){return r("numDataIds")}disposeData(e,t){return r("disposeData")}write(e,t,n){return r("write")}move(e,t,n,s,a){return r("move")}memory(){return r("memory")}floatPrecision(){return r("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}dispose(){return r("dispose")}}function r(e){throw new Error(`'${e}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}},3337:(e,t,n)=>{"use strict";function s(e,t,n){const s=function(e,t,n){return function(e,t,n){let s=0,a=e.length,r=0,i=!1;for(;s<a;){r=s+(a-s>>>1);const o=n(t,e[r]);o>0?s=r+1:(a=r,i=!o)}return i?s:-s-1}(e,t,n||a)}(e,t,n),r=s<0?-(s+1):s;e.splice(r,0,t)}function a(e,t){return e>t?1:e<t?-1:0}function r(e,t,n,s,a){return l(e,t,n,s,a,0)}function i(e,t,n,s,a,r){return l(e,t,n,s,a,0,!1,r,!0)}function o(e,t,n,s,a,r){return l(e,t,n,s,a,r,!0)}function l(e,t,n,a,r,i,o=!1,l=!1,p=!1){const d=[];for(let e=0;e<t.length;e++)t[e]>r&&d.push({score:t[e],boxIndex:e,suppressBeginIndex:0});d.sort(h);const f=i>0?-.5/i:0,m=[],g=[];for(;m.length<n&&d.length>0;){const t=d.pop(),{score:n,boxIndex:i,suppressBeginIndex:o}=t;if(n<r)break;let l=!1;for(let n=m.length-1;n>=o;--n){const s=u(e,i,m[n]);if(s>=a){l=!0;break}if(t.score=t.score*c(a,f,s),t.score<=r)break}t.suppressBeginIndex=m.length,l||(t.score===n?(m.push(i),g.push(t.score)):t.score>r&&s(d,t,h))}const y=m.length,b=n-y;l&&b>0&&(m.push(...new Array(b).fill(0)),g.push(...new Array(b).fill(0)));const x={selectedIndices:m};return o&&(x.selectedScores=g),p&&(x.validOutputs=y),x}function u(e,t,n){const s=e.subarray(4*t,4*t+4),a=e.subarray(4*n,4*n+4),r=Math.min(s[0],s[2]),i=Math.min(s[1],s[3]),o=Math.max(s[0],s[2]),l=Math.max(s[1],s[3]),u=Math.min(a[0],a[2]),c=Math.min(a[1],a[3]),h=Math.max(a[0],a[2]),p=Math.max(a[1],a[3]),d=(o-r)*(l-i),f=(h-u)*(p-c);if(d<=0||f<=0)return 0;const m=Math.max(r,u),g=Math.max(i,c),y=Math.min(o,h),b=Math.min(l,p),x=Math.max(y-m,0)*Math.max(b-g,0);return x/(d+f-x)}function c(e,t,n){const s=Math.exp(t*n*n);return n<=e?s:0}function h(e,t){return e.score-t.score||e.score===t.score&&t.boxIndex-e.boxIndex}n.d(t,{GP:()=>r,qP:()=>i,pA:()=>o})},8333:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a});var s=n(2657);function a(e,t){const n=[];for(let e=0;e<t.length;e++)t[e]&&n.push(e);const a=(0,s.f)(e,"int32"),r=(0,s.f)([n.length,e.length],"int32");for(let t=0;t<n.length;t++){const s=a.indexToLoc(n[t]),i=t*e.length;r.values.set(s,i)}return r.toTensor()}},7097:(e,t,n)=>{"use strict";n.d(t,{BV:()=>x,wv:()=>b});var s=n(8713),a=n(2885),r=n(5938),i=n(9121),o=n(6151),l=n(9155),u=n(569);class c{constructor(e,t){this.backendTimer=e,this.logger=t,null==t&&(this.logger=new p)}profileKernel(e,t,n){let s;const r=()=>{s=n()};let i;const o=l.now();if(this.backendTimer.timerAvailable())i=this.backendTimer.time(r);else{r();for(const e of s)e.dataSync();i=Promise.resolve({kernelMs:l.now()-o})}if((0,a.OB)().getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let t=0;t<s.length;t++){const n=s[t];n.data().then((t=>{h(t,n.dtype,e)}))}return{kernelName:e,outputs:s,inputs:t,timeMs:i.then((e=>e.kernelMs)),extraInfo:i.then((e=>null!=e.getExtraProfileInfo?e.getExtraProfileInfo():""))}}logKernelProfile(e){const{kernelName:t,outputs:n,timeMs:s,inputs:a,extraInfo:r}=e;n.forEach((e=>{Promise.all([e.data(),s,r]).then((n=>{this.logger.logKernelProfile(t,e,n[0],n[1],a,n[2])}))}))}}function h(e,t,n){if("float32"!==t)return!1;for(let t=0;t<e.length;t++){const s=e[t];if(isNaN(s)||!isFinite(s))return console.warn(`Found ${s} in the result of '${n}'`),!0}return!1}class p{logKernelProfile(e,t,n,s,a,r){const i="number"==typeof s?u.oj(`${s}ms`,9):s.error,o=u.oj(e,25),l=t.rank,c=t.size,h=u.oj(t.shape.toString(),14);let p="";for(const e in a){const n=a[e];if(null!=n){const s=n.shape||t.shape,a=s.length;p+=`${e}: ${a}D ${a>0?s:""} `}}console.log(`%c${o}\t%c${i}\t%c${l}D ${h}\t%c${c}\t%c${p}\t%c${r}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}var d=n(4077),f=n(747);function m(e){return null!=e.kernelName}class g{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map((e=>e.name))))}}}dispose(){for(const e in this.registeredVariables)this.registeredVariables[e].dispose()}}class y{constructor(e){this.ENV=e,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new g}async ready(){if(null!=this.pendingBackendInit)return this.pendingBackendInit.then((()=>{}));if(null!=this.backendInstance)return;const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t];if(await this.initializeBackend(n).success)return void await this.setBackend(n)}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){const{name:e,asyncInit:t}=this.initializeBackendsAndReturnBest();if(t)throw new Error(`The highest priority backend '${e}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(e)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(e){if(!(e in this.registry)){if(!(e in this.registryFactory))return null;{const{asyncInit:t}=this.initializeBackend(e);if(t)return null}}return this.registry[e]}findBackendFactory(e){return e in this.registryFactory?this.registryFactory[e].factory:null}registerBackend(e,t,n=1){return e in this.registryFactory?(console.warn(`${e} backend was already registered. Reusing existing backend factory.`),!1):(this.registryFactory[e]={factory:t,priority:n},!0)}async setBackend(e){if(null==this.registryFactory[e])throw new Error(`Backend name '${e}' not found in registry`);if(this.backendName=e,null==this.registry[e]){this.backendInstance=null;const{success:t,asyncInit:n}=this.initializeBackend(e);if(!(n?await t:t))return!1}return this.backendInstance=this.registry[e],this.setupRegisteredKernels(),this.profiler=new c(this.backendInstance),!0}setupRegisteredKernels(){(0,o.tr)(this.backendName).forEach((e=>{null!=e.setupFunc&&e.setupFunc(this.backendInstance)}))}disposeRegisteredKernels(e){(0,o.tr)(e).forEach((t=>{null!=t.disposeFunc&&t.disposeFunc(this.registry[e])}))}initializeBackend(e){const t=this.registryFactory[e];if(null==t)throw new Error(`Cannot initialize backend ${e}, no registration found.`);try{const n=t.factory();if(!n||n instanceof s.Zu||"function"!=typeof n.then)return this.registry[e]=n,{success:!0,asyncInit:!1};{const t=++this.pendingBackendInitId,s=n.then((n=>!(t<this.pendingBackendInitId||(this.registry[e]=n,this.pendingBackendInit=null,0)))).catch((n=>(t<this.pendingBackendInitId||(this.pendingBackendInit=null,console.warn(`Initialization of backend ${e} failed`),console.warn(n.stack||n.message)),!1)));return this.pendingBackendInit=s,{success:s,asyncInit:!0}}}catch(t){return console.warn(`Initialization of backend ${e} failed`),console.warn(t.stack||t.message),{success:!1,asyncInit:!1}}}removeBackend(e){if(!(e in this.registryFactory))throw new Error(`${e} backend not found in registry`);this.backendName===e&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,e in this.registry&&(this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e]),delete this.registryFactory[e],this.backendName===e&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort(((e,t)=>this.registryFactory[t].priority-this.registryFactory[e].priority))}initializeBackendsAndReturnBest(){const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t],{success:s,asyncInit:a}=this.initializeBackend(n);if(a||s)return{name:n,asyncInit:a}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(e,t){const n=this.state.tensorInfo.get(t),s=n.backend,a=this.readSync(t),r=s.refCount(t);s.disposeData(t,!0),n.backend=e,e.move(t,a,n.shape,n.dtype,r),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(e,t){let n,s=null;if(null==t){if("function"!=typeof e)throw new Error("Please provide a function to tidy()");t=e}else{if("string"!=typeof e&&!(e instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof t)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");s=e}return this.scopedRun((()=>this.startScope(s)),(()=>this.endScope(n)),(()=>(n=t(),n instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n)))}scopedRun(e,t,n){e();try{const e=n();return t(),e}catch(e){throw t(),e}}nextTensorId(){return y.nextTensorId++}nextVariableId(){return y.nextVariableId++}clone(e){const t=x.runKernel(i.iJ,{x:e}),n={x:e};return this.addTapeNode(this.state.activeScope.name,n,[t],(e=>({x:()=>{const t={x:e};return x.runKernel(i.RF,t,{dtype:"float32"})}})),[],{}),t}runKernel(e,t,n){if(null==(0,o.pI)(e,this.backendName))throw new Error(`Kernel '${e}' not registered for backend '${this.backendName}'`);return this.runKernelFunc({kernelName:e,inputs:t,attrs:n})}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(e,t,n){const s=this.backend.numDataIds();let a=0;n.forEach((e=>{a+="complex64"===e.dtype?3:1}));const r=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],i=s-t-a-r;if(i>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${i} data ids) after running '${e}'`)}runKernelFunc(e){let t,n=[];const s=this.isTapeOn(),a=this.state.numBytes,r=this.state.numTensors;let i,l;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0),null==this.backendName&&this.backend;const c=m(e)?e.kernelName:null!=this.state.activeScope?this.state.activeScope.name:"";if(m(e)){const{kernelName:t,inputs:a,attrs:r}=e;null==this.backendName&&this.backend;const c=(0,o.pI)(t,this.backendName);u.hu(null!=c,(()=>`Cannot find registered kernel '${t}' for backend '${this.backendName}'`)),i=()=>{const e=this.backend.numDataIds();l=c.kernelFunc({inputs:a,attrs:r,backend:this.backend});const i=Array.isArray(l)?l:[l];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(t,e,i);const o=i.map((e=>{if(null!=e.rank)return e;const{dataId:t,shape:n,dtype:s}=e;return this.makeTensorFromDataId(t,n,s)}));if(s){const e=this.getTensorsForGradient(t,a,o);n=this.saveTensorsForBackwardMode(e)}return o}}else{const{forwardFunc:t}=e,a=e=>{s&&(n=e.map((e=>this.keep(this.clone(e)))))};i=()=>{const e=this.backend.numDataIds();l=this.tidy((()=>t(this.backend,a)));const n=Array.isArray(l)?l:[l];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(c,e,n),n}}const{inputs:h,attrs:p}=e,d=m(e)?null:e.backwardsFunc;let f;return this.scopedRun((()=>this.state.kernelDepth++),(()=>this.state.kernelDepth--),(()=>{this.ENV.getBool("DEBUG")||this.state.profiling?(f=this.profiler.profileKernel(c,h,(()=>i())),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(f),t=f.outputs):t=i()})),s&&this.addTapeNode(c,h,t,d,n,p),this.state.profiling&&this.state.activeProfile.kernels.push({name:c,bytesAdded:this.state.numBytes-a,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-r,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(h).map((e=>null!=h[e]?h[e].shape:null)),outputShapes:t.map((e=>e.shape)),kernelTimeMs:f.timeMs,extraInfo:f.extraInfo}),Array.isArray(l)?t:t[0]}saveTensorsForBackwardMode(e){return e.map((e=>this.keep(this.clone(e))))}getTensorsForGradient(e,t,n){const s=(0,o.uk)(e);if(null!=s){const e=s.inputsToSave||[],a=s.outputsToSave||[];let r;s.saveAllInputs?(u.hu(Array.isArray(t),(()=>"saveAllInputs is true, expected inputs to be an array.")),r=Object.keys(t).map((e=>t[e]))):r=e.map((e=>t[e]));const i=n.filter(((e,t)=>a[t]));return r.concat(i)}return[]}makeTensor(e,t,n,s){if(null==e)throw new Error("Values passed to engine.makeTensor() are null");n=n||"float32",s=s||this.backend;let a=e;"string"===n&&u.HD(e[0])&&(a=e.map((e=>l.encodeString(e))));const r=s.write(a,t,n),i=new d.es(t,n,r,this.nextTensorId());if(this.trackTensor(i,s),"string"===n){const e=this.state.tensorInfo.get(r),t=(0,u.Ub)(a);this.state.numBytes+=t-e.bytes,e.bytes=t}return i}makeTensorFromDataId(e,t,n,s){n=n||"float32";const a=new d.es(t,n,e,this.nextTensorId());return this.trackTensor(a,s),a}makeVariable(e,t=!0,n,s){n=n||this.nextVariableId().toString(),null!=s&&s!==e.dtype&&(e=e.cast(s));const a=new d._w(e,t,n,this.nextTensorId());if(null!=this.state.registeredVariables[a.name])throw new Error(`Variable with name ${a.name} was already registered`);return this.state.registeredVariables[a.name]=a,this.incRef(a,this.backend),a}trackTensor(e,t){this.state.numTensors++,"string"===e.dtype&&this.state.numStringTensors++;let n=0;"complex64"!==e.dtype&&"string"!==e.dtype&&(n=e.size*u.bT(e.dtype)),this.state.numBytes+=n,this.state.tensorInfo.has(e.dataId)||(this.state.numDataBuffers++,this.state.tensorInfo.set(e.dataId,{backend:t||this.backend,dtype:e.dtype,shape:e.shape,bytes:n})),e instanceof d._w||this.track(e)}incRef(e,t){this.trackTensor(e,t),this.backend.incRef(e.dataId)}removeDataId(e,t){this.state.tensorInfo.has(e)&&this.state.tensorInfo.get(e).backend===t&&(this.state.tensorInfo.delete(e),this.state.numDataBuffers--)}disposeTensor(e){if(!this.state.tensorInfo.has(e.dataId))return;const t=this.state.tensorInfo.get(e.dataId);if(this.state.numTensors--,"string"===e.dtype&&(this.state.numStringTensors--,this.state.numBytes-=t.bytes),"complex64"!==e.dtype&&"string"!==e.dtype){const t=e.size*u.bT(e.dtype);this.state.numBytes-=t}t.backend.disposeData(e.dataId)&&this.removeDataId(e.dataId,t.backend)}disposeVariables(){for(const e in this.state.registeredVariables){const t=this.state.registeredVariables[e];this.disposeVariable(t)}}disposeVariable(e){this.disposeTensor(e),null!=this.state.registeredVariables[e.name]&&delete this.state.registeredVariables[e.name]}memory(){const e=this.backend.memory();return e.numTensors=this.state.numTensors,e.numDataBuffers=this.state.numDataBuffers,e.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(e.unreliable=!0,null==e.reasons&&(e.reasons=[]),e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),e}async profile(e){this.state.profiling=!0;const t=this.state.numBytes,n=this.state.numTensors;this.state.activeProfile.kernels=[],this.state.activeProfile.result=await e(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map((e=>e.totalBytesSnapshot))),this.state.activeProfile.newBytes=this.state.numBytes-t,this.state.activeProfile.newTensors=this.state.numTensors-n;for(const e of this.state.activeProfile.kernels)e.kernelTimeMs=await e.kernelTimeMs,e.extraInfo=await e.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(e,t,n,s,a,r){const i={id:this.state.nextTapeNodeId++,kernelName:e,inputs:t,outputs:n,saved:a},l=(0,o.uk)(e);null!=l&&(s=l.gradFunc),null!=s&&(i.gradient=e=>(e=e.map(((e,t)=>{if(null==e){const e=n[t],s=u.wT(e.size,e.dtype);return this.makeTensor(s,e.shape,e.dtype)}return e})),s(e.length>1?e:e[0],a,r))),this.state.activeTape.push(i)}keep(e){return e.kept=!0,e}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(e){const t={track:[],name:"unnamed scope",id:this.state.nextScopeId++};e&&(t.name=e),this.state.scopeStack.push(t),this.state.activeScope=t}endScope(e){const t=(0,f.getTensorsInContainer)(e),n=new Set(t.map((e=>e.id)));for(let e=0;e<this.state.activeScope.track.length;e++){const t=this.state.activeScope.track[e];t.kept||n.has(t.id)||t.dispose()}const s=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],t.forEach((e=>{e.kept||e.scopeId!==s.id||this.track(e)}))}gradients(e,t,n,s=!1){if(u.hu(t.length>0,(()=>"gradients() received an empty list of xs.")),null!=n&&"float32"!==n.dtype)throw new Error(`dy must have 'float32' dtype, but has '${n.dtype}'`);const a=this.scopedRun((()=>this.startTape()),(()=>this.endTape()),(()=>this.tidy("forward",e)));u.hu(a instanceof d.es,(()=>"The result y returned by f() must be a tensor."));const r=function(e,t,n){const s={},a={};for(let e=0;e<t.length;e++)s[t[e].id]=!0;for(let n=0;n<e.length;n++){const r=e[n],i=r.inputs;for(const e in i){const n=i[e];let o=!1;for(let e=0;e<t.length;e++)if(s[n.id]){r.outputs.forEach((e=>s[e.id]=!0)),o=!0,a[r.id]=!0;break}if(o)break}}const r={};r[n.id]=!0;const i={};for(let t=e.length-1;t>=0;t--){const n=e[t],s=n.inputs;for(let e=0;e<n.outputs.length;e++)if(r[n.outputs[e].id]){for(const e in s)r[s[e].id]=!0,i[n.id]=!0;break}}const o=[];for(let t=0;t<e.length;t++){const n=e[t];if(a[n.id]&&i[n.id]){const e={};for(const t in n.inputs){const a=n.inputs[t];s[a.id]&&(e[t]=a)}const t=Object.assign({},n);t.inputs=e,t.outputs=n.outputs,o.push(t)}}return o}(this.state.activeTape,t,a);if(!s&&0===r.length&&t.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",(()=>{const e={};e[a.id]=null==n?function(e){const t=(0,u.p8)((0,u.NA)(e),"float32");return x.makeTensor(t,e,"float32")}(a.shape):n,function(e,t,n,s){for(let a=t.length-1;a>=0;a--){const r=t[a],i=[];if(r.outputs.forEach((t=>{const n=e[t.id];null!=n?i.push(n):i.push(null)})),null==r.gradient)throw new Error(`Cannot compute gradient: gradient function not found for ${r.kernelName}.`);const o=r.gradient(i);for(const t in r.inputs){if(!(t in o))throw new Error(`Cannot backprop through input ${t}. Available gradients found: ${Object.keys(o)}.`);const a=n((()=>o[t]()));if("float32"!==a.dtype)throw new Error(`Error in gradient for op ${r.kernelName}. The gradient of input ${t} must have 'float32' dtype, but has '${a.dtype}'`);const i=r.inputs[t];if(!u.cO(a.shape,i.shape))throw new Error(`Error in gradient for op ${r.kernelName}. The gradient of input '${t}' has shape '${a.shape}', which does not match the shape of the input '${i.shape}'`);if(null==e[i.id])e[i.id]=a;else{const t=e[i.id];e[i.id]=s(t,a),t.dispose()}}}}(e,r,(e=>this.tidy(e)),v);const s=t.map((t=>e[t.id]));return 0===this.state.gradientDepth&&(this.state.activeTape.forEach((e=>{for(const t of e.saved)t.dispose()})),this.state.activeTape=null),{value:a,grads:s}}))}customGrad(e){return u.hu(u.mf(e),(()=>"The f passed in customGrad(f) must be a function.")),(...t)=>{let n;u.hu(t.every((e=>e instanceof d.es)),(()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors"));const s={};return t.forEach(((e,t)=>{s[t]=e})),this.runKernelFunc({forwardFunc:(s,a)=>(n=e(...t,a),u.hu(n.value instanceof d.es,(()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor")),u.hu(u.mf(n.gradFunc),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function.")),n.value),backwardsFunc:(e,s)=>{const a=n.gradFunc(e,s),r=Array.isArray(a)?a:[a];u.hu(r.length===t.length,(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...).")),u.hu(r.every((e=>e instanceof d.es)),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors."));const i={};return r.forEach(((e,t)=>{i[t]=()=>e})),i},inputs:s})}}readSync(e){return this.state.tensorInfo.get(e).backend.readSync(e)}read(e){return this.state.tensorInfo.get(e).backend.read(e)}async time(e){const t=(0,l.now)(),n=await this.backend.time(e);return n.wallMs=(0,l.now)()-t,n}track(e){return null!=this.state.activeScope&&(e.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(e)),e}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new g;for(const e in this.registry)this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}function b(){const e=(0,r.D)();if(null==e._tfengine){const t=new a.qA(e);e._tfengine=new y(t)}return(0,a.iG)(e._tfengine.ENV),(0,d.Vi)((()=>e._tfengine)),e._tfengine}y.nextTensorId=0,y.nextVariableId=0;const x=b();function v(e,t){const n={a:e,b:t};return x.runKernel(i.mm,n)}},2885:(e,t,n)=>{"use strict";n.d(t,{qA:()=>a,OB:()=>r,Vi:()=>i,iG:()=>o});var s=n(569);class a{constructor(e){this.global=e,this.flags={},this.flagRegistry={},this.urlFlags={},this.populateURLFlags()}setPlatform(e,t){null!=this.platform&&console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${t}.`),this.platformName=e,this.platform=t}registerFlag(e,t,n){if(this.flagRegistry[e]={evaluationFn:t,setHook:n},null!=this.urlFlags[e]){const t=this.urlFlags[e];console.warn(`Setting feature override from URL ${e}: ${t}.`),this.set(e,t)}}async getAsync(e){return e in this.flags||(this.flags[e]=await this.evaluateFlag(e)),this.flags[e]}get(e){if(e in this.flags)return this.flags[e];const t=this.evaluateFlag(e);if((0,s.tI)(t))throw new Error(`Flag ${e} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[e]=t,this.flags[e]}getNumber(e){return this.get(e)}getBool(e){return this.get(e)}getFlags(){return this.flags}get features(){return this.flags}set(e,t){if(null==this.flagRegistry[e])throw new Error(`Cannot set flag ${e} as it has not been registered.`);this.flags[e]=t,null!=this.flagRegistry[e].setHook&&this.flagRegistry[e].setHook(t)}evaluateFlag(e){if(null==this.flagRegistry[e])throw new Error(`Cannot evaluate flag '${e}': no evaluation function found.`);return this.flagRegistry[e].evaluationFn()}setFlags(e){this.flags=Object.assign({},e)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(void 0===this.global||void 0===this.global.location||void 0===this.global.location.search)return;const e=function(e){const t={};return e.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,((e,...n)=>(function(e,t,n){e[decodeURIComponent(t)]=decodeURIComponent(n||"")}(t,n[0],n[1]),n.join("=")))),t}(this.global.location.search);"tfjsflags"in e&&e.tfjsflags.split(",").forEach((e=>{const[t,n]=e.split(":");this.urlFlags[t]=function(e,t){if("true"===(t=t.toLowerCase())||"false"===t)return"true"===t;if(""+ +t===t)return+t;throw new Error(`Could not parse value flag value ${t} for flag ${e}.`)}(t,n)}))}}function r(){return i}let i=null;function o(e){i=e}},5938:(e,t,n)=>{"use strict";let s;function a(){if(null==s){let e;if("undefined"!=typeof window)e=window;else if(void 0!==n.g)e=n.g;else if("undefined"!=typeof process)e=process;else{if("undefined"==typeof self)throw new Error("Could not find a global object");e=self}s=e}return s}function r(e,t){const n=function(){const e=a();return null==e._tfGlobals&&(e._tfGlobals=new Map),e._tfGlobals}();if(n.has(e))return n.get(e);{const s=t();return n.set(e,s),n.get(e)}}n.d(t,{D:()=>a,R:()=>r})},4368:(e,t,n)=>{"use strict";n.d(t,{G4:()=>o,R:()=>l,cF:()=>u,MX:()=>c,N8:()=>h,SR:()=>p,sq:()=>d,N5:()=>f,lu:()=>m,B9:()=>g,Cn:()=>y,XV:()=>b,CQ:()=>x,Cd:()=>v,N_:()=>k,cj:()=>w,x3:()=>N,ze:()=>I,jq:()=>S,y3:()=>T,VY:()=>C});var s=n(7097),a=n(2885),r=n(4077),i=n(747);function o(){(0,a.OB)().set("PROD",!0)}function l(){(0,a.OB)().set("DEBUG",!0)}function u(){(0,a.OB)().set("DEPRECATION_WARNINGS_ENABLED",!1),console.warn("TensorFlow.js deprecation warnings have been disabled.")}function c(e){(0,a.OB)().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(e+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")}function h(){s.BV.disposeVariables()}function p(){return s.BV}function d(){return s.BV.memory()}function f(e){return s.BV.profile(e)}function m(e,t){return s.BV.tidy(e,t)}function g(e){(0,i.getTensorsInContainer)(e).forEach((e=>e.dispose()))}function y(e){return s.BV.keep(e)}function b(e){return s.BV.time(e)}function x(e){return s.BV.setBackend(e)}function v(){return s.BV.ready()}function k(){return s.BV.backendName}function w(e){s.BV.removeBackend(e)}function N(e){return s.BV.findBackend(e)}function I(e){return s.BV.findBackendFactory(e)}function S(e,t,n=1){return s.BV.registerBackend(e,t,n)}function T(){return s.BV.backend}function C(e,t){(0,a.OB)().setPlatform(e,t)}(0,r.FZ)(c)},633:(e,t,n)=>{"use strict";n.d(t,{cb:()=>p,pn:()=>h,h7:()=>u,fN:()=>c,UQ:()=>o,ti:()=>l});var s=n(7097),a=n(4077),r=n(3740),i=n(569);function o(e){return i.hu(i.mf(e),(()=>"The f passed in grad(f) must be a function")),(t,n)=>{const a=(0,r._1)(t,"x","tf.grad","string_or_numeric"),o=null!=n?(0,r._1)(n,"dy","tf.grad"):null;return s.BV.tidy((()=>{const{value:t,grads:n}=s.BV.gradients((()=>e(a)),[a],o);return null!=o&&i.k5(t.shape,o.shape,"The shape of dy passed in grad(f)(x, dy) must match the shape returned by f(x)"),d(n),n[0]}))}}function l(e){return i.hu(i.mf(e),(()=>"The f passed in grads(f) must be a function")),(t,n)=>{i.hu(Array.isArray(t),(()=>"The args passed in grads(f)(args) must be an array of `Tensor`s or `TensorLike`s"));const a=(0,r.sI)(t,"args","tf.grads","string_or_numeric"),o=null!=n?(0,r._1)(n,"dy","tf.grads"):null;return s.BV.tidy((()=>{const{value:t,grads:n}=s.BV.gradients((()=>e(...a)),a,o);return null!=o&&i.k5(t.shape,o.shape,"The shape of dy passed in grads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),d(n),n}))}}function u(e){return i.hu(i.mf(e),(()=>"The f passed in valueAndGrad(f) must be a function")),(t,n)=>{i.hu(t instanceof a.es,(()=>"The x passed in valueAndGrad(f)(x) must be a tensor")),i.hu(null==n||n instanceof a.es,(()=>"The dy passed in valueAndGrad(f)(x, dy) must be a tensor"));const{grads:r,value:o}=s.BV.gradients((()=>e(t)),[t],n);return d(r),{grad:r[0],value:o}}}function c(e){return i.hu(i.mf(e),(()=>"The f passed in valueAndGrads(f) must be a function")),(t,n)=>{i.hu(Array.isArray(t)&&t.every((e=>e instanceof a.es)),(()=>"The args passed in valueAndGrads(f)(args) must be array of tensors")),i.hu(null==n||n instanceof a.es,(()=>"The dy passed in valueAndGrads(f)(args, dy) must be a tensor"));const r=s.BV.gradients((()=>e(...t)),t,n);return null!=n&&i.k5(r.value.shape,n.shape,"The shape of dy passed in valueAndGrads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),d(r.grads),r}}function h(e,t){i.hu(i.mf(e),(()=>"The f passed in variableGrads(f) must be a function")),i.hu(null==t||Array.isArray(t)&&t.every((e=>e instanceof a._w)),(()=>"The varList passed in variableGrads(f, varList) must be an array of variables"));const n=null!=t;if(!n){t=[];for(const e in s.BV.registeredVariables)t.push(s.BV.registeredVariables[e])}const r=n?t.filter((e=>!e.trainable)):null,o=t.length;t=t.filter((e=>e.trainable)),i.hu(t.length>0,(()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${o} variables is trainable.`));const{value:l,grads:u}=s.BV.gradients(e,t,null,!0);i.hu(u.some((e=>null!=e)),(()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize().")),i.hu(0===l.rank,(()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${l.rank} tensor`));const c={};return t.forEach(((e,t)=>{null!=u[t]&&(c[e.name]=u[t])})),null!=r&&r.forEach((e=>c[e.name]=null)),{value:l,grads:c}}function p(e){return s.BV.customGrad(e)}function d(e){if(e.filter((e=>null==e)).length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that\n    the f you passed encloses all operations that lead from x to y.")}},5998:(e,t,n)=>{"use strict";n.r(t),n.d(t,{Abs:()=>Ve.SY,Acos:()=>Ve.VG,Acosh:()=>Ve.Sp,AdadeltaOptimizer:()=>St,AdagradOptimizer:()=>Ct,AdamOptimizer:()=>Et,AdamaxOptimizer:()=>Ft,Add:()=>Ve.mm,AddN:()=>Ve.Xz,All:()=>Ve.oT,Any:()=>Ve.IK,ArgMax:()=>Ve.sJ,ArgMin:()=>Ve.aJ,Asin:()=>Ve.M2,Asinh:()=>Ve.qw,Atan:()=>Ve.jM,Atan2:()=>Ve.QC,Atanh:()=>Ve.Oy,AvgPool:()=>Ve.Jh,AvgPool3D:()=>Ve._k,AvgPool3DGrad:()=>Ve.IM,AvgPoolGrad:()=>Ve.RO,BatchMatMul:()=>Ve.XL,BatchToSpaceND:()=>Ve.zw,Bincount:()=>Ve.zv,BroadcastTo:()=>Ve.Ly,Cast:()=>Ve.RF,Ceil:()=>Ve.gJ,ClipByValue:()=>Ve.xn,Complex:()=>Ve.Zz,ComplexAbs:()=>Ve.yj,Concat:()=>Ve.Eh,Conv2D:()=>Ve.mh,Conv2DBackpropFilter:()=>Ve.wU,Conv2DBackpropInput:()=>Ve.wm,Conv3D:()=>Ve.x1,Conv3DBackpropFilterV2:()=>Ve.o2,Conv3DBackpropInputV2:()=>Ve.ik,Cos:()=>Ve.mc,Cosh:()=>Ve.TR,CropAndResize:()=>Ve.Vc,Cumsum:()=>Ve.iH,DataStorage:()=>En.JL,DenseBincount:()=>Ve.QR,DepthToSpace:()=>Ve.T0,DepthwiseConv2dNative:()=>Ve.ci,DepthwiseConv2dNativeBackpropFilter:()=>Ve.sL,DepthwiseConv2dNativeBackpropInput:()=>Ve.y7,Diag:()=>Ve.$w,Dilation2D:()=>Ve.p4,Dilation2DBackpropFilter:()=>Ve.Vn,Dilation2DBackpropInput:()=>Ve.ek,ENV:()=>g.Vi,Elu:()=>Ve.SX,EluGrad:()=>Ve.HE,Environment:()=>g.qA,Equal:()=>Ve.hd,Erf:()=>Ve.Om,Exp:()=>Ve.NE,ExpandDims:()=>Ve.YF,Expm1:()=>Ve.Y0,FFT:()=>Ve.vw,Fill:()=>Ve.de,FlipLeftRight:()=>Ve.Uy,Floor:()=>Ve.OR,FloorDiv:()=>Ve.je,FromPixels:()=>Ve.eB,FusedBatchNorm:()=>Ve.sH,FusedConv2D:()=>Ve._V,FusedDepthwiseConv2D:()=>Ve.lu,GatherNd:()=>Ve.q1,GatherV2:()=>Ve.qi,Greater:()=>Ve.iZ,GreaterEqual:()=>Ve.Ac,IFFT:()=>Ve.Qg,Identity:()=>Ve.iJ,Imag:()=>Ve.J_,IsFinite:()=>Ve.av,IsInf:()=>Ve.iW,IsNan:()=>Ve.r7,KernelBackend:()=>En.Zu,LRN:()=>Ve.eZ,LRNGrad:()=>Ve.Hh,LeakyRelu:()=>Ve.J$,Less:()=>Ve.vt,LessEqual:()=>Ve.CA,LinSpace:()=>Ve.e7,Log:()=>Ve.Zb,Log1p:()=>Ve.kU,LogSoftmax:()=>Ve.qC,LogicalAnd:()=>Ve.PY,LogicalNot:()=>Ve.Vf,LogicalOr:()=>Ve.MZ,Max:()=>Ve.Yo,MaxPool:()=>Ve.mT,MaxPool3D:()=>Ve.OA,MaxPool3DGrad:()=>Ve.OU,MaxPoolGrad:()=>Ve.OV,MaxPoolWithArgmax:()=>Ve.vF,Maximum:()=>Ve.BM,Mean:()=>Ve.q2,Min:()=>Ve.c1,Minimum:()=>Ve.q8,MirrorPad:()=>Ve.jQ,Mod:()=>Ve.Vb,MomentumOptimizer:()=>Ot,Multinomial:()=>Ve.NZ,Multiply:()=>Ve.wY,Neg:()=>Ve.ku,NonMaxSuppressionV3:()=>Ve.uv,NonMaxSuppressionV4:()=>Ve.cy,NonMaxSuppressionV5:()=>Ve.W0,NotEqual:()=>Ve.yQ,OP_SCOPE_SUFFIX:()=>Lt.zvA,OneHot:()=>Ve.we,OnesLike:()=>Ve.qW,Optimizer:()=>It,Pack:()=>Ve.Qi,PadV2:()=>Ve.ly,Pool:()=>Ve.Kg,Pow:()=>Ve.pe,Prelu:()=>Ve.o0,Prod:()=>Ve.Dl,RMSPropOptimizer:()=>Mt,Range:()=>Ve.e6,Rank:()=>zt.yw,Real:()=>Ve.xJ,RealDiv:()=>Ve.oH,Reciprocal:()=>Ve.$H,Reduction:()=>Bt.I,Relu:()=>Ve.qk,Relu6:()=>Ve.Sb,Reshape:()=>Ve.HZ,ResizeBilinear:()=>Ve._Y,ResizeBilinearGrad:()=>Ve.zb,ResizeNearestNeighbor:()=>Ve.dp,ResizeNearestNeighborGrad:()=>Ve.Hm,Reverse:()=>Ve.mK,RotateWithOffset:()=>Ve.b9,Round:()=>Ve.e0,Rsqrt:()=>Ve.bV,SGDOptimizer:()=>Dt,ScatterNd:()=>Ve.xQ,Select:()=>Ve.Ph,Selu:()=>Ve.oF,Sigmoid:()=>Ve.a5,Sign:()=>Ve.i5,Sin:()=>Ve.RQ,Sinh:()=>Ve.w3,Slice:()=>Ve.p2,Softmax:()=>Ve.Gc,Softplus:()=>Ve.MR,SpaceToBatchND:()=>Ve.TQ,SparseToDense:()=>Ve.D2,SplitV:()=>Ve.L8,Sqrt:()=>Ve.FK,Square:()=>Ve.bK,SquaredDifference:()=>Ve._t,Step:()=>Ve.h8,StridedSlice:()=>Ve.m2,Sub:()=>Ve.Tr,Sum:()=>Ve.GB,Tan:()=>Ve.sE,Tanh:()=>Ve.MI,Tensor:()=>ge.es,TensorBuffer:()=>ge.YD,Tile:()=>Ve.n9,TopK:()=>Ve.cW,Transform:()=>Ve.wx,Transpose:()=>Ve.G3,Unique:()=>Ve.kp,Unpack:()=>Ve.To,UnsortedSegmentSum:()=>Ve.Qv,Variable:()=>ge._w,ZerosLike:()=>Ve.Ru,_FusedMatMul:()=>Ve.us,abs:()=>Lt.WnP,acos:()=>Lt.Khb,acosh:()=>Lt.__u,add:()=>Lt.IHx,addN:()=>Lt.QBD,all:()=>Lt.$6P,any:()=>Lt.YjB,argMax:()=>Lt.NqF,argMin:()=>Lt.vHJ,asin:()=>Lt.ZRM,asinh:()=>Lt.VfV,atan:()=>Lt.z4N,atan2:()=>Lt.fvJ,atanh:()=>Lt.C80,avgPool:()=>Lt.wS1,avgPool3d:()=>Lt.uR5,backend:()=>mt.y3,backend_util:()=>h,basicLSTMCell:()=>Lt.zEQ,batchNorm:()=>Lt.tgs,batchNorm2d:()=>Lt.Dxk,batchNorm3d:()=>Lt.JY5,batchNorm4d:()=>Lt.p3b,batchToSpaceND:()=>Lt.E4h,bincount:()=>Lt.yE8,booleanMaskAsync:()=>Lt.anm,broadcastTo:()=>Lt.UFq,browser:()=>i,buffer:()=>Lt.f3b,cast:()=>Lt.pju,ceil:()=>Lt.mDi,clipByValue:()=>Lt.iUl,clone:()=>Lt.d9v,complex:()=>Lt.PYB,concat:()=>Lt.zoF,concat1d:()=>Lt.gME,concat2d:()=>Lt.Izb,concat3d:()=>Lt.MNy,concat4d:()=>Lt.ZaL,conv1d:()=>Lt.PAt,conv2d:()=>Lt.Tek,conv2dTranspose:()=>Lt.bc,conv3d:()=>Lt.pdZ,conv3dTranspose:()=>Lt.$QV,copyRegisteredKernels:()=>We.T3,cos:()=>Lt.mCk,cosh:()=>Lt.f9Y,cosineWindow:()=>Lt.mew,cumsum:()=>Lt.zbp,customGrad:()=>wt.cb,denseBincount:()=>Lt.ppE,deprecationWarn:()=>mt.MX,depthToSpace:()=>Lt.nTT,depthwiseConv2d:()=>Lt.B10,device_util:()=>s,diag:()=>Lt.Ka3,dilation2d:()=>Lt.WmZ,disableDeprecationWarnings:()=>mt.cF,dispose:()=>mt.B9,disposeVariables:()=>mt.N8,div:()=>Lt.hiC,divNoNan:()=>Lt.NTj,dot:()=>Lt.AKD,dropout:()=>Lt.rvX,elu:()=>Lt.pyx,enableDebugMode:()=>mt.R,enableProdMode:()=>mt.G4,enclosingPowerOfTwo:()=>Lt.GRh,engine:()=>mt.SR,env:()=>g.OB,equal:()=>Lt.DgJ,erf:()=>Lt.qNN,exp:()=>Lt.Qqt,expandDims:()=>Lt.dt4,expm1:()=>Lt.t$B,eye:()=>Lt.iyy,fft:()=>Lt.kp_,fill:()=>Lt.hlL,findBackend:()=>mt.x3,findBackendFactory:()=>mt.ze,floor:()=>Lt.GWj,floorDiv:()=>Lt.qPi,fused:()=>Lt.imm,gather:()=>Lt.Iqj,gatherND:()=>Lt.dbB,gather_util:()=>o,getBackend:()=>mt.N_,getGradient:()=>We.uk,getKernel:()=>We.pI,getKernelsForBackend:()=>We.tr,grad:()=>wt.UQ,grads:()=>wt.ti,greater:()=>Lt.pjt,greaterEqual:()=>Lt.brS,ifft:()=>Lt.Sxn,imag:()=>Lt.asL,image:()=>Lt.BHj,inTopKAsync:()=>Lt.V3u,io:()=>a,irfft:()=>Lt.wx0,isFinite:()=>Lt.xVT,isInf:()=>Lt.UWc,isNaN:()=>Lt.i2d,keep:()=>mt.Cn,kernel_impls:()=>p,leakyRelu:()=>Lt.hi7,less:()=>Lt.d9m,lessEqual:()=>Lt.zN1,linalg:()=>Lt.$r2,linspace:()=>Lt.SX3,localResponseNormalization:()=>Lt.G9k,log:()=>Lt.cM7,log1p:()=>Lt.Krr,logSigmoid:()=>Lt.e_t,logSoftmax:()=>Lt.CmS,logSumExp:()=>Lt.l_t,logicalAnd:()=>Lt.HvI,logicalNot:()=>Lt.hJK,logicalOr:()=>Lt.K5V,logicalXor:()=>Lt.egP,losses:()=>Lt.MB5,matMul:()=>Lt.OI3,math:()=>r,max:()=>Lt.Fp7,maxPool:()=>Lt._sB,maxPool3d:()=>Lt.YQQ,maxPoolWithArgmax:()=>Lt.Ip$,maximum:()=>Lt.gWQ,mean:()=>Lt.J69,memory:()=>mt.sq,min:()=>Lt.VV$,minimum:()=>Lt.LTh,mirrorPad:()=>Lt.VdP,mod:()=>Lt.wQq,moments:()=>Lt.Gi7,movingAverage:()=>Lt.p_,mul:()=>Lt.dC7,multiRNNCell:()=>Lt.rq4,multinomial:()=>Lt.SJ_,neg:()=>Lt.W76,nextFrame:()=>Ut,norm:()=>Lt.KOy,notEqual:()=>Lt.Quu,oneHot:()=>Lt.lfX,ones:()=>Lt.iUs,onesLike:()=>Lt.JpU,op:()=>Lt.op,outerProduct:()=>Lt.N2O,pad:()=>Lt.vku,pad1d:()=>Lt.pNR,pad2d:()=>Lt.koy,pad3d:()=>Lt.t1L,pad4d:()=>Lt.lGY,pool:()=>Lt.d_R,pow:()=>Lt.sQ3,prelu:()=>Lt.AL3,print:()=>Lt.S0v,prod:()=>Lt.WVs,profile:()=>mt.N5,rand:()=>Lt.TN_,randomGamma:()=>Lt.wzB,randomNormal:()=>Lt.nGf,randomUniform:()=>Lt.LGj,range:()=>Lt.w6H,ready:()=>mt.Cd,real:()=>Lt.kwC,reciprocal:()=>Lt.M25,registerBackend:()=>mt.jq,registerGradient:()=>We.Li,registerKernel:()=>We.wC,relu:()=>Lt.UYe,relu6:()=>Lt.btT,removeBackend:()=>mt.cj,reshape:()=>Lt.XLQ,reverse:()=>Lt.GYS,reverse1d:()=>Lt.SDf,reverse2d:()=>Lt.diP,reverse3d:()=>Lt.sx7,reverse4d:()=>Lt.mG2,rfft:()=>Lt.QEs,round:()=>Lt.NMM,rsqrt:()=>Lt.bp0,scalar:()=>Lt.iD$,scatterND:()=>Lt.snQ,scatter_util:()=>Ye,selu:()=>Lt.U8D,separableConv2d:()=>Lt.U_I,serialization:()=>l,setBackend:()=>mt.CQ,setPlatform:()=>mt.VY,setdiff1dAsync:()=>Lt.ODp,sigmoid:()=>Lt.XD2,sign:()=>Lt.Xxe,signal:()=>Lt.tdS,sin:()=>Lt.O$l,sinh:()=>Lt.R_K,slice:()=>Lt.tPi,slice1d:()=>Lt.jZU,slice2d:()=>Lt.SmN,slice3d:()=>Lt.CnO,slice4d:()=>Lt.p0P,slice_util:()=>Qe,softmax:()=>Lt.XAC,softplus:()=>Lt.Wvh,spaceToBatchND:()=>Lt.fBT,sparseToDense:()=>Lt.ers,spectral:()=>Lt.uN7,split:()=>Lt.Vl2,sqrt:()=>Lt._b3,square:()=>Lt.h62,squaredDifference:()=>Lt.$i,squeeze:()=>Lt.L9e,stack:()=>Lt.knu,step:()=>Lt.Nbs,stridedSlice:()=>Lt.NXj,sub:()=>Lt.luU,sum:()=>Lt.Smz,sumOutType:()=>zt.z4,tan:()=>Lt.ORZ,tanh:()=>Lt.AEp,tensor:()=>Lt.XeE,tensor1d:()=>Lt.RRF,tensor2d:()=>Lt.odF,tensor3d:()=>Lt.wOQ,tensor4d:()=>Lt.yXz,tensor5d:()=>Lt.Bfx,tensor6d:()=>Lt.xZs,tensor_util:()=>tt,test_util:()=>u,tidy:()=>mt.lu,tile:()=>Lt.Gg6,time:()=>mt.XV,topk:()=>Lt.hg7,train:()=>Vt,transpose:()=>Lt.p4s,truncatedNormal:()=>Lt.Xu6,unique:()=>Lt.Two,unregisterGradient:()=>We.bt,unregisterKernel:()=>We.nE,unsortedSegmentSum:()=>Lt.pUJ,unstack:()=>Lt.HHK,upcastType:()=>zt.x8,util:()=>nt,valueAndGrad:()=>wt.h7,valueAndGrads:()=>wt.fN,variable:()=>Lt.VD$,variableGrads:()=>wt.pn,version_core:()=>ft,where:()=>Lt.arb,whereAsync:()=>Lt.itS,zeros:()=>Lt.lls,zerosLike:()=>Lt.P84});var s={};n.r(s),n.d(s,{isBrowser:()=>m,isMobile:()=>f});var a={};n.r(a),n.d(a,{browserFiles:()=>ke,browserHTTPRequest:()=>Ee,concatenateArrayBuffers:()=>C,copyModel:()=>le,decodeWeights:()=>N,encodeWeights:()=>w,fromMemory:()=>Fe,getLoadHandlers:()=>O,getModelArtifactsInfoForJSON:()=>A,getSaveHandlers:()=>D,http:()=>Ae,isHTTPScheme:()=>Ce,listModels:()=>ie,loadWeights:()=>Ie,moveModel:()=>ue,registerLoadRouter:()=>F,registerSaveRouter:()=>R,removeModel:()=>oe,weightsLoaderFactory:()=>Se,withSaveHandler:()=>De});var r={};n.r(r),n.d(r,{confusionMatrix:()=>Pe});var i={};n.r(i),n.d(i,{fromPixels:()=>qe,fromPixelsAsync:()=>je,toPixels:()=>Xe});var o={};n.r(o),n.d(o,{prepareAndValidate:()=>Ke});var l={};n.r(l),n.d(l,{Serializable:()=>Je,SerializationMap:()=>Ze,registerClass:()=>et});var u={};n.r(u),n.d(u,{TEST_EPSILON_FLOAT16:()=>st,encodeStrings:()=>dt,expectArrayBuffersEqual:()=>pt,expectArraysClose:()=>at,expectArraysEqual:()=>lt,expectNumbersClose:()=>ut,expectPromiseToFail:()=>ot,expectValuesInRange:()=>ht,testEpsilon:()=>rt});var c={};n.r(c),n.d(c,{collectGatherOpShapeInfo:()=>Sn,computeOutShape:()=>In,segOpComputeOptimalWindowSize:()=>Nn});var h={};n.r(h),n.d(h,{ERF_A1:()=>on,ERF_A2:()=>ln,ERF_A3:()=>un,ERF_A4:()=>cn,ERF_A5:()=>hn,ERF_P:()=>rn,PARALLELIZE_THRESHOLD:()=>Yt,SELU_SCALE:()=>an.$,SELU_SCALEALPHA:()=>an.y,applyActivation:()=>Kt.QH,assertAndGetBroadcastShape:()=>Ht.$N,assertAxesAreInnerMostDims:()=>Gt.lB,assertParamsConsistent:()=>jt,assignToTypedArray:()=>xn,axesAreInnerMostDims:()=>Gt.YB,calculateShapes:()=>Ye.calculateShapes,combineLocations:()=>Gt.Vh,complexWithEvenIndex:()=>gn,complexWithOddIndex:()=>yn,computeConv2DInfo:()=>qt.Ix,computeConv3DInfo:()=>qt.jw,computeDefaultPad:()=>qt.aO,computeDilation2DInfo:()=>qt.Rf,computeOptimalWindowSize:()=>Qt,computeOutAndReduceShapes:()=>Gt.kz,computeOutShape:()=>Xt,computePool2DInfo:()=>qt.Xw,computePool3DInfo:()=>qt.pl,convertConv2DDataFormat:()=>qt.sl,eitherStridesOrDilationsAreOne:()=>qt.jT,expandShapeToKeepDim:()=>Gt.rv,exponent:()=>kn,exponents:()=>vn,fromStringArrayToUint8:()=>Cn,fromUint8ToStringArray:()=>Tn,getAxesPermutation:()=>Gt.Q3,getBroadcastDims:()=>Ht.XF,getComplexWithIndex:()=>bn,getFusedBiasGradient:()=>Kt.pf,getFusedDyActivation:()=>Kt.Fr,getImageCenter:()=>Jt,getInnerMostAxes:()=>Gt.sY,getPermuted:()=>en,getReductionAxes:()=>Ht.RR,getReshaped:()=>Zt,getReshapedPermuted:()=>tn,getSliceBeginCoords:()=>nn,getSliceSize:()=>sn,getUndoAxesPermutation:()=>Gt.LJ,log:()=>dn,mergeRealAndImagArrays:()=>fn,prepareAndValidate:()=>Ke,prepareSplitSize:()=>wn,segment_util:()=>c,shouldFuse:()=>Kt.uy,slice_util:()=>Qe,splitRealAndImagArrays:()=>mn,tupleValuesAreOne:()=>qt.I0,upcastType:()=>zt.x8,validateInput:()=>Ye.validateInput,validateUpdateShape:()=>Ye.validateUpdateShape,warn:()=>pn});var p={};n.r(p),n.d(p,{nonMaxSuppressionV3Impl:()=>$n.GP,nonMaxSuppressionV4Impl:()=>$n.qP,nonMaxSuppressionV5Impl:()=>$n.pA,whereImpl:()=>An.Z});var d=n(7097);function f(){if("undefined"!=typeof navigator&&null!=navigator){const e=navigator.userAgent||navigator.vendor||window.opera;return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(e)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(e.substr(0,4))}return!1}function m(){return"undefined"!=typeof window&&null!=window.document||"undefined"!=typeof WorkerGlobalScope}var g=n(2885);const y=(0,g.OB)();y.registerFlag("DEBUG",(()=>!1),(e=>{e&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")})),y.registerFlag("IS_BROWSER",(()=>m())),y.registerFlag("IS_NODE",(()=>"undefined"!=typeof process&&void 0!==process.versions&&void 0!==process.versions.node)),y.registerFlag("IS_CHROME",(()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor))),y.registerFlag("PROD",(()=>!1)),y.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",(()=>y.getBool("DEBUG"))),y.registerFlag("DEPRECATION_WARNINGS_ENABLED",(()=>!0)),y.registerFlag("IS_TEST",(()=>!1)),y.registerFlag("CHECK_COMPUTATION_FOR_ERRORS",(()=>!0)),y.registerFlag("WRAP_TO_IMAGEBITMAP",(()=>!1));var b=n(1661),x=n(701),v=n(569);const k={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8};async function w(e,t){const n=[],s=[],a=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);for(let r=0;r<a.length;++r){const i=a[r],o=Array.isArray(e)?e[r].tensor:e[i];if("float32"!==o.dtype&&"int32"!==o.dtype&&"bool"!==o.dtype&&"string"!==o.dtype&&"complex64"!==o.dtype)throw new Error(`Unsupported dtype in weight '${i}': ${o.dtype}`);const l={name:i,shape:o.shape,dtype:o.dtype};if("string"===o.dtype){const e=new Promise((async e=>{const t=await o.bytes(),n=t.reduce(((e,t)=>e+t.length),0)+4*t.length,s=new Uint8Array(n);let a=0;for(let e=0;e<t.length;e++){const n=t[e],r=new Uint8Array(new Uint32Array([n.length]).buffer);s.set(r,a),a+=4,s.set(n,a),a+=n.length}e(s)}));s.push(e)}else s.push(o.data());null!=t&&(l.group=t),n.push(l)}return{data:I(await Promise.all(s)),specs:n}}function N(e,t){const n={};let s,a=0;for(const r of t){const t=r.name,i=r.dtype,o=r.shape,l=(0,v.NA)(o);let u;if("quantization"in r){const n=r.quantization;if("uint8"===n.dtype||"uint16"===n.dtype){if(!("min"in n)||!("scale"in n))throw new Error(`Weight ${r.name} with quantization ${n.dtype} doesn't have corresponding metadata min and scale.`)}else{if("float16"!==n.dtype)throw new Error(`Weight ${r.name} has unknown quantization dtype ${n.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);if("float32"!==i)throw new Error(`Weight ${r.name} is quantized with ${n.dtype} which only supports weights of type float32 not ${i}.`)}const o=k[n.dtype],c=e.slice(a,a+l*o),h="uint8"===n.dtype?new Uint8Array(c):new Uint16Array(c);if("float32"===i)if("uint8"===n.dtype||"uint16"===n.dtype){u=new Float32Array(h.length);for(let e=0;e<h.length;e++){const t=h[e];u[e]=t*n.scale+n.min}}else{if("float16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type float32.`);void 0===s&&(s=E()),u=s(h)}else{if("int32"!==i)throw new Error(`Unsupported dtype in weight '${t}': ${i}`);if("uint8"!==n.dtype&&"uint16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type int32.`);u=new Int32Array(h.length);for(let e=0;e<h.length;e++){const t=h[e];u[e]=Math.round(t*n.scale+n.min)}}a+=l*o}else if("string"===i){const t=(0,v.NA)(r.shape);u=[];for(let n=0;n<t;n++){const t=new Uint32Array(e.slice(a,a+4))[0];a+=4;const n=new Uint8Array(e.slice(a,a+t));u.push(n),a+=t}}else{const s=k[i],r=e.slice(a,a+l*s);if("float32"===i)u=new Float32Array(r);else if("int32"===i)u=new Int32Array(r);else if("bool"===i)u=new Uint8Array(r);else{if("complex64"!==i)throw new Error(`Unsupported dtype in weight '${t}': ${i}`);{u=new Float32Array(r);const e=new Float32Array(u.length/2),s=new Float32Array(u.length/2);for(let t=0;t<e.length;t++)e[t]=u[2*t],s[t]=u[2*t+1];const a=(0,x.X)(e,o,"float32"),i=(0,x.X)(s,o,"float32");n[t]=(0,b.P)(a,i),a.dispose(),i.dispose()}}a+=l*s}"complex64"!==i&&(n[t]=(0,x.X)(u,o,i))}return n}function I(e){if(null===e)throw new Error(`Invalid input value: ${JSON.stringify(e)}`);let t=0;const n=[];e.forEach((e=>{if(t+=e.byteLength,n.push(e.byteLength===e.buffer.byteLength?e:new e.constructor(e)),!(e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array))throw new Error(`Unsupported TypedArray subtype: ${e.constructor.name}`)}));const s=new Uint8Array(t);let a=0;return n.forEach((e=>{s.set(new Uint8Array(e.buffer),a),a+=e.byteLength})),s.buffer}const S="undefined"!=typeof Buffer&&("undefined"==typeof Blob||"undefined"==typeof atob||"undefined"==typeof btoa);function T(e){return S?Buffer.byteLength(e):new Blob([e]).size}function C(e){if(1===e.length)return e[0];let t=0;e.forEach((e=>{t+=e.byteLength}));const n=new Uint8Array(t);let s=0;return e.forEach((e=>{n.set(new Uint8Array(e),s),s+=e.byteLength})),n.buffer}function $(e){for(e=e.trim();e.endsWith("/");)e=e.slice(0,e.length-1);const t=e.split("/");return t[t.length-1]}function A(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==e.modelTopology?0:T(JSON.stringify(e.modelTopology)),weightSpecsBytes:null==e.weightSpecs?0:T(JSON.stringify(e.weightSpecs)),weightDataBytes:null==e.weightData?0:e.weightData.byteLength}}function E(){const e=function(){const e=e=>{let t=e<<13,n=0;for(;0==(8388608&t);)n-=8388608,t<<=1;return t&=-8388609,n+=947912704,t|n},t=new Uint32Array(2048);t[0]=0;for(let n=1;n<1024;n++)t[n]=e(n);for(let e=1024;e<2048;e++)t[e]=939524096+(e-1024<<13);return t}(),t=function(){const e=new Uint32Array(64);e[0]=0,e[31]=1199570944,e[32]=2147483648,e[63]=3347054592;for(let t=1;t<31;t++)e[t]=t<<23;for(let t=33;t<63;t++)e[t]=2147483648+(t-32<<23);return e}(),n=function(){const e=new Uint32Array(64);for(let t=0;t<64;t++)e[t]=1024;return e[0]=e[32]=0,e}();return s=>{const a=new ArrayBuffer(4*s.length),r=new Uint32Array(a);for(let a=0;a<s.length;a++){const i=s[a],o=e[n[i>>10]+(1023&i)]+t[i>>10];r[a]=o}return new Float32Array(a)}}class _{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==_.instance&&(_.instance=new _),_.instance}static registerSaveRouter(e){_.getInstance().saveRouters.push(e)}static registerLoadRouter(e){_.getInstance().loadRouters.push(e)}static getSaveHandlers(e){return _.getHandlers(e,"save")}static getLoadHandlers(e,t){return _.getHandlers(e,"load",t)}static getHandlers(e,t,n){const s=[];return("load"===t?_.getInstance().loadRouters:_.getInstance().saveRouters).forEach((t=>{const a=t(e,n);null!==a&&s.push(a)})),s}}const R=e=>_.registerSaveRouter(e),F=e=>_.registerLoadRouter(e),D=e=>_.getSaveHandlers(e),O=(e,t)=>_.getLoadHandlers(e,t),M="tensorflowjs",z="models_store",L="model_info_store";function B(){if(!(0,g.OB)().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const e="undefined"==typeof window?self:window,t=e.indexedDB||e.mozIndexedDB||e.webkitIndexedDB||e.msIndexedDB||e.shimIndexedDB;if(null==t)throw new Error("The current browser does not appear to support IndexedDB.");return t}function P(e){const t=e.result;t.createObjectStore(z,{keyPath:"modelPath"}),t.createObjectStore(L,{keyPath:"modelPath"})}class V{constructor(e){if(this.indexedDB=B(),null==e||!e)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=e}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,e)}async load(){return this.databaseAction(this.modelPath)}databaseAction(e,t){return new Promise(((e,n)=>{const s=this.indexedDB.open(M,1);s.onupgradeneeded=()=>P(s),s.onsuccess=()=>{const a=s.result;if(null==t){const t=a.transaction(z,"readonly"),s=t.objectStore(z).get(this.modelPath);s.onsuccess=()=>{if(null==s.result)return a.close(),n(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));e(s.result.modelArtifacts)},s.onerror=e=>(a.close(),n(s.error)),t.oncomplete=()=>a.close()}else{const s=A(t),r=a.transaction(L,"readwrite");let i=r.objectStore(L);const o=i.put({modelPath:this.modelPath,modelArtifactsInfo:s});let l;o.onsuccess=()=>{l=a.transaction(z,"readwrite");const o=l.objectStore(z).put({modelPath:this.modelPath,modelArtifacts:t,modelArtifactsInfo:s});o.onsuccess=()=>e({modelArtifactsInfo:s}),o.onerror=e=>{i=r.objectStore(L);const t=i.delete(this.modelPath);t.onsuccess=()=>(a.close(),n(o.error)),t.onerror=e=>(a.close(),n(o.error))}},o.onerror=e=>(a.close(),n(o.error)),r.oncomplete=()=>{null==l?a.close():l.oncomplete=()=>a.close()}}},s.onerror=e=>n(s.error)}))}}V.URL_SCHEME="indexeddb://";const W=e=>{return(0,g.OB)().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(V.URL_SCHEME)?(t=e.slice(V.URL_SCHEME.length),new V(t)):null;var t};_.registerSaveRouter(W),_.registerLoadRouter(W);class U{constructor(){this.indexedDB=B()}async listModels(){return new Promise(((e,t)=>{const n=this.indexedDB.open(M,1);n.onupgradeneeded=()=>P(n),n.onsuccess=()=>{const s=n.result,a=s.transaction(L,"readonly"),r=a.objectStore(L).getAll();r.onsuccess=()=>{const t={};for(const e of r.result)t[e.modelPath]=e.modelArtifactsInfo;e(t)},r.onerror=e=>(s.close(),t(r.error)),a.oncomplete=()=>s.close()},n.onerror=e=>t(n.error)}))}async removeModel(e){var t;return e=(t=e).startsWith(V.URL_SCHEME)?t.slice(V.URL_SCHEME.length):t,new Promise(((t,n)=>{const s=this.indexedDB.open(M,1);s.onupgradeneeded=()=>P(s),s.onsuccess=()=>{const a=s.result,r=a.transaction(L,"readwrite"),i=r.objectStore(L),o=i.get(e);let l;o.onsuccess=()=>{if(null==o.result)return a.close(),n(new Error(`Cannot find model with path '${e}' in IndexedDB.`));{const s=i.delete(e),r=()=>{l=a.transaction(z,"readwrite");const s=l.objectStore(z).delete(e);s.onsuccess=()=>t(o.result.modelArtifactsInfo),s.onerror=e=>n(o.error)};s.onsuccess=r,s.onerror=e=>(r(),a.close(),n(o.error))}},o.onerror=e=>(a.close(),n(o.error)),r.oncomplete=()=>{null==l?a.close():l.oncomplete=()=>a.close()}},s.onerror=e=>n(s.error)}))}}const G="/",H="tensorflowjs_models",j="info",X="model_topology",q="weight_specs",K="weight_data",Y="model_metadata";function Q(e){return{info:[H,e,j].join(G),topology:[H,e,X].join(G),weightSpecs:[H,e,q].join(G),weightData:[H,e,K].join(G),modelMetadata:[H,e,Y].join(G)}}function J(e){const t=e.split(G);if(t.length<3)throw new Error(`Invalid key format: ${e}`);return t.slice(1,t.length-1).join(G)}class Z{constructor(e){if(!(0,g.OB)().getBool("IS_BROWSER")||"undefined"==typeof window||void 0===window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==e||!e)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=e,this.keys=Q(this.modelPath)}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const t=JSON.stringify(e.modelTopology),n=JSON.stringify(e.weightSpecs),s=A(e);try{this.LS.setItem(this.keys.info,JSON.stringify(s)),this.LS.setItem(this.keys.topology,t),this.LS.setItem(this.keys.weightSpecs,n),this.LS.setItem(this.keys.weightData,function(e){if(S)return Buffer.from(e).toString("base64");const t=new Uint8Array(e);let n="";for(let e=0,s=t.length;e<s;e++)n+=String.fromCharCode(t[e]);return btoa(n)}(e.weightData));const a={format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy};return null!=e.signature&&(a.signature=e.signature),null!=e.userDefinedMetadata&&(a.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(a.modelInitializer=e.modelInitializer),this.LS.setItem(this.keys.modelMetadata,JSON.stringify(a)),{modelArtifactsInfo:s}}catch(e){throw this.LS.removeItem(this.keys.info),this.LS.removeItem(this.keys.topology),this.LS.removeItem(this.keys.weightSpecs),this.LS.removeItem(this.keys.weightData),this.LS.removeItem(this.keys.modelMetadata),new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${s.modelTopologyBytes}, weightSpecsBytes=${s.weightSpecsBytes}, weightDataBytes=${s.weightDataBytes}.`)}}}async load(){const e=JSON.parse(this.LS.getItem(this.keys.info));if(null==e)throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);if("JSON"!==e.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const t={},n=JSON.parse(this.LS.getItem(this.keys.topology));if(null==n)throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);t.modelTopology=n;const s=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(null==s)throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);t.weightSpecs=s;const a=this.LS.getItem(this.keys.modelMetadata);if(null!=a){const e=JSON.parse(a);t.format=e.format,t.generatedBy=e.generatedBy,t.convertedBy=e.convertedBy,null!=e.signature&&(t.signature=e.signature),null!=e.userDefinedMetadata&&(t.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(t.modelInitializer=e.modelInitializer)}const r=this.LS.getItem(this.keys.weightData);if(null==r)throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return t.weightData=function(e){if(S){const t=Buffer.from(e,"base64");return t.buffer.slice(t.byteOffset,t.byteOffset+t.byteLength)}const t=atob(e),n=new Uint8Array(t.length);for(let e=0;e<t.length;++e)n.set([t.charCodeAt(e)],e);return n.buffer}(r),t}}Z.URL_SCHEME="localstorage://";const ee=e=>{return(0,g.OB)().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(Z.URL_SCHEME)?(t=e.slice(Z.URL_SCHEME.length),new Z(t)):null;var t};_.registerSaveRouter(ee),_.registerLoadRouter(ee);class te{constructor(){(0,v.hu)((0,g.OB)().getBool("IS_BROWSER"),(()=>"Current environment is not a web browser")),(0,v.hu)("undefined"==typeof window||void 0!==window.localStorage,(()=>"Current browser does not appear to support localStorage")),this.LS=window.localStorage}async listModels(){const e={},t=H+G,n=G+j;for(let s=0;s<this.LS.length;++s){const a=this.LS.key(s);a.startsWith(t)&&a.endsWith(n)&&(e[J(a)]=JSON.parse(this.LS.getItem(a)))}return e}async removeModel(e){var t;const n=Q(e=(t=e).startsWith(Z.URL_SCHEME)?t.slice(Z.URL_SCHEME.length):t);if(null==this.LS.getItem(n.info))throw new Error(`Cannot find model at path '${e}'`);const s=JSON.parse(this.LS.getItem(n.info));return this.LS.removeItem(n.info),this.LS.removeItem(n.topology),this.LS.removeItem(n.weightSpecs),this.LS.removeItem(n.weightData),s}}const ne="://";class se{constructor(){this.managers={}}static getInstance(){return null==se.instance&&(se.instance=new se),se.instance}static registerManager(e,t){(0,v.hu)(null!=e,(()=>"scheme must not be undefined or null.")),e.endsWith(ne)&&(e=e.slice(0,e.indexOf(ne))),(0,v.hu)(e.length>0,(()=>"scheme must not be an empty string."));const n=se.getInstance();(0,v.hu)(null==n.managers[e],(()=>`A model store manager is already registered for scheme '${e}'.`)),n.managers[e]=t}static getManager(e){const t=this.getInstance().managers[e];if(null==t)throw new Error(`Cannot find model manager for scheme '${e}'`);return t}static getSchemes(){return Object.keys(this.getInstance().managers)}}function ae(e){if(-1===e.indexOf(ne))throw new Error(`The url string provided does not contain a scheme. Supported schemes are: ${se.getSchemes().join(",")}`);return{scheme:e.split(ne)[0],path:e.split(ne)[1]}}async function re(e,t,n=!1){(0,v.hu)(e!==t,(()=>`Old path and new path are the same: '${e}'`));const s=_.getLoadHandlers(e);(0,v.hu)(s.length>0,(()=>`Copying failed because no load handler is found for source URL ${e}.`)),(0,v.hu)(s.length<2,(()=>`Copying failed because more than one (${s.length}) load handlers for source URL ${e}.`));const a=s[0],r=_.getSaveHandlers(t);(0,v.hu)(r.length>0,(()=>`Copying failed because no save handler is found for destination URL ${t}.`)),(0,v.hu)(r.length<2,(()=>`Copying failed because more than one (${s.length}) save handlers for destination URL ${t}.`));const i=r[0],o=ae(e).scheme,l=ae(e).path,u=o===ae(e).scheme,c=await a.load();n&&u&&await se.getManager(o).removeModel(l);const h=await i.save(c);return n&&!u&&await se.getManager(o).removeModel(l),h.modelArtifactsInfo}async function ie(){const e=se.getSchemes(),t={};for(const n of e){const e=await se.getManager(n).listModels();for(const s in e)t[n+ne+s]=e[s]}return t}async function oe(e){const t=ae(e);return se.getManager(t.scheme).removeModel(t.path)}async function le(e,t){return re(e,t,!1)}async function ue(e,t){return re(e,t,!0)}class ce{fetch(e,t){return fetch(e,t)}now(){return performance.now()}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Browser's encoder only supports utf-8, but got ${t}`);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(e)}decode(e,t){return new TextDecoder(t).decode(e)}}if((0,g.OB)().get("IS_BROWSER")){(0,g.OB)().setPlatform("browser",new ce);try{se.registerManager(Z.URL_SCHEME,new te)}catch(e){}try{se.registerManager(V.URL_SCHEME,new U)}catch(e){}}let he;(0,g.OB)().get("IS_NODE")&&(0,g.OB)().setPlatform("node",new class{constructor(){this.util=n(8628),this.textEncoder=new this.util.TextEncoder}fetch(e,t){return null!=(0,g.OB)().global.fetch?(0,g.OB)().global.fetch(e,t):(null==he&&(he=n(5410)),he(e,t))}now(){const e=process.hrtime();return 1e3*e[0]+e[1]/1e6}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Node built-in encoder only supports utf-8, but got ${t}`);return this.textEncoder.encode(e)}decode(e,t){return 0===e.length?"":new this.util.TextDecoder(t).decode(e)}});var pe=n(2657),de=n(2271),fe=n(8723),me=n(9798),ge=n(4077);(0,d.wv)();const ye={buffer:pe.f,cast:de.p,clone:fe.d,print:me.S};function be(e){return new Promise((e=>setTimeout(e))).then(e)}(0,ge.Vp)(ye);class xe{constructor(e){if(!(0,g.OB)().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");e.startsWith(xe.URL_SCHEME)&&(e=e.slice(xe.URL_SCHEME.length)),null!=e&&0!==e.length||(e="model"),this.modelTopologyFileName=e+".json",this.weightDataFileName=e+".weights.bin"}async save(e){if("undefined"==typeof document)throw new Error("Browser downloads are not supported in this environment since `document` is not present");const t=window.URL.createObjectURL(new Blob([e.weightData],{type:"application/octet-stream"}));if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{const n=[{paths:["./"+this.weightDataFileName],weights:e.weightSpecs}],s={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,weightsManifest:n};null!=e.signature&&(s.signature=e.signature),null!=e.userDefinedMetadata&&(s.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(s.modelInitializer=e.modelInitializer);const a=window.URL.createObjectURL(new Blob([JSON.stringify(s)],{type:"application/json"})),r=null==this.jsonAnchor?document.createElement("a"):this.jsonAnchor;if(r.download=this.modelTopologyFileName,r.href=a,await be((()=>r.dispatchEvent(new MouseEvent("click")))),null!=e.weightData){const e=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor;e.download=this.weightDataFileName,e.href=t,await be((()=>e.dispatchEvent(new MouseEvent("click"))))}return{modelArtifactsInfo:A(e)}}}}xe.URL_SCHEME="downloads://";class ve{constructor(e){if(null==e||e.length<1)throw new Error(`When calling browserFiles, at least 1 file is required, but received ${e}`);this.files=e}async load(){const e=this.files[0],t=this.files.slice(1);return new Promise(((n,s)=>{const a=new FileReader;a.onload=a=>{const r=JSON.parse(a.target.result),i=r.modelTopology;if(null==i)return void s(new Error(`modelTopology field is missing from file ${e.name}`));0===t.length&&n({modelTopology:i});const o=r.weightsManifest;if(null==o)return void s(new Error(`weightManifest field is missing from file ${e.name}`));let l;try{l=this.checkManifestAndWeightFiles(o,t)}catch(e){return void s(e)}const u=[],c=[],h=[];o.forEach((e=>{e.paths.forEach((e=>{c.push(e),h.push(null)})),u.push(...e.weights)})),o.forEach((e=>{e.paths.forEach((e=>{const t=new FileReader;t.onload=t=>{const s=t.target.result,a=c.indexOf(e);if(h[a]=s,-1===h.indexOf(null)){const e={modelTopology:i,weightSpecs:u,weightData:C(h),format:r.format,generatedBy:r.generatedBy,convertedBy:r.convertedBy};null!=r.signature&&(e.signature=r.signature),null!=r.userDefinedMetadata&&(e.userDefinedMetadata=r.userDefinedMetadata),null!=r.modelInitializer&&(e.modelInitializer=r.modelInitializer),n(e)}},t.onerror=t=>s(`Failed to weights data from file of path '${e}'.`),t.readAsArrayBuffer(l[e])}))}))},a.onerror=t=>s(`Failed to read model topology and weights manifest JSON from file '${e.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`),a.readAsText(e)}))}checkManifestAndWeightFiles(e,t){const n=[],s=t.map((e=>$(e.name))),a={};for(const r of e)r.paths.forEach((e=>{const r=$(e);if(-1!==n.indexOf(r))throw new Error(`Duplicate file basename found in weights manifest: '${r}'`);if(n.push(r),-1===s.indexOf(r))throw new Error(`Weight file with basename '${r}' is not provided.`);a[e]=t[s.indexOf(r)]}));if(n.length!==t.length)throw new Error(`Mismatch in the number of files in weights manifest (${n.length}) and the number of weight files provided (${t.length}).`);return a}}function ke(e){return new ve(e)}function we(e,t,n,s){!function(e){(0,v.hu)(null!=e&&Array.isArray(e)&&e.length>0,(()=>"promises must be a none empty array"))}(e),function(e,t){(0,v.hu)(e>=0&&e<=1,(()=>`Progress fraction must be in range [0, 1], but got startFraction ${e}`)),(0,v.hu)(t>=0&&t<=1,(()=>`Progress fraction must be in range [0, 1], but got endFraction ${t}`)),(0,v.hu)(t>=e,(()=>`startFraction must be no more than endFraction, but got startFraction ${e} and endFraction ${t}`))}(n=null==n?0:n,s=null==s?1:s);let a=0;return Promise.all(e.map((r=>(r.then((r=>{const i=n+ ++a/e.length*(s-n);return t(i),r})),r))))}async function Ne(e,t){null==t&&(t={});const n=null==t.fetchFunc?(0,g.OB)().platform.fetch:t.fetchFunc,s=e.map((e=>n(e,t.requestInit,{isBinary:!0}))),a=(null==t.onProgress?await Promise.all(s):await we(s,t.onProgress,0,.5)).map((e=>e.arrayBuffer()));return null==t.onProgress?await Promise.all(a):await we(a,t.onProgress,.5,1)}async function Ie(e,t="",n,s){return Se((e=>Ne(e,{requestInit:s})))(e,t,n)}function Se(e){return async(t,n="",s)=>{const a=t.map((()=>!1)),r={},i=null!=s?s.map((()=>!1)):[],o=[];if(t.forEach(((e,t)=>{let n=0;e.weights.forEach((e=>{const l="quantization"in e?e.quantization.dtype:e.dtype,u=k[l]*v.NA(e.shape),c=()=>{a[t]=!0,null==r[t]&&(r[t]=[]),r[t].push({manifestEntry:e,groupOffset:n,sizeBytes:u})};null!=s?s.forEach(((t,n)=>{t===e.name&&(c(),i[n]=!0)})):c(),o.push(e.name),n+=u}))})),!i.every((e=>e))){const e=s.filter(((e,t)=>!i[t]));throw new Error(`Could not find weights in manifest with names: ${e.join(", ")}. \nManifest JSON has weights with names: ${o.join(", ")}.`)}const l=a.reduce(((e,t,n)=>(t&&e.push(n),e)),[]),u=[];l.forEach((e=>{t[e].paths.forEach((e=>{const t=n+(n.endsWith("/")?"":"/")+e;u.push(t)}))}));const c=await e(u),h={};let p=0;return l.forEach((e=>{const n=t[e].paths.length;let s=0;for(let e=0;e<n;e++)s+=c[p+e].byteLength;const a=new ArrayBuffer(s),i=new Uint8Array(a);let o=0;for(let e=0;e<n;e++){const t=new Uint8Array(c[p+e]);i.set(t,o),o+=t.byteLength}r[e].forEach((e=>{const t=N(a.slice(e.groupOffset,e.groupOffset+e.sizeBytes),[e.manifestEntry]);for(const e in t)h[e]=t[e]})),p+=n})),h}}_.registerSaveRouter((e=>(0,g.OB)().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(xe.URL_SCHEME)?function(e="model"){return new xe(e)}(e.slice(xe.URL_SCHEME.length)):null));class Te{constructor(e,t){if(this.DEFAULT_METHOD="POST",null==t&&(t={}),this.weightPathPrefix=t.weightPathPrefix,this.onProgress=t.onProgress,this.weightUrlConverter=t.weightUrlConverter,null!=t.fetchFunc?((0,v.hu)("function"==typeof t.fetchFunc,(()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)")),this.fetch=t.fetchFunc):this.fetch=(0,g.OB)().platform.fetch,(0,v.hu)(null!=e&&e.length>0,(()=>"URL path for http must not be null, undefined or empty.")),Array.isArray(e)&&(0,v.hu)(2===e.length,(()=>`URL paths for http must have a length of 2, (actual length is ${e.length}).`)),this.path=e,null!=t.requestInit&&null!=t.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=t.requestInit||{}}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");const t=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);t.body=new FormData;const n=[{paths:["./model.weights.bin"],weights:e.weightSpecs}],s={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,weightsManifest:n};null!=e.signature&&(s.signature=e.signature),null!=e.userDefinedMetadata&&(s.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(s.modelInitializer=e.modelInitializer),t.body.append("model.json",new Blob([JSON.stringify(s)],{type:"application/json"}),"model.json"),null!=e.weightData&&t.body.append("model.weights.bin",new Blob([e.weightData],{type:"application/octet-stream"}),"model.weights.bin");const a=await this.fetch(this.path,t);if(a.ok)return{modelArtifactsInfo:A(e),responses:[a]};throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${a.status}.`)}async load(){const e=await this.fetch(this.path,this.requestInit);if(!e.ok)throw new Error(`Request to ${this.path} failed with status code ${e.status}. Please verify this URL points to the model JSON of the model to load.`);let t;try{t=await e.json()}catch(e){let t=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?t+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":t+=" Please make sure the server is serving valid JSON for this request.",new Error(t)}const n=t.modelTopology,s=t.weightsManifest,a=t.generatedBy,r=t.convertedBy,i=t.format,o=t.signature,l=t.userDefinedMetadata;if(null==n&&null==s)throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);let u,c;if(null!=s){const e=await this.loadWeights(s);[u,c]=e}const h={modelTopology:n,weightSpecs:u,weightData:c,generatedBy:a,convertedBy:r,format:i};null!=o&&(h.signature=o),null!=l&&(h.userDefinedMetadata=l);const p=t.modelInitializer;return p&&(h.modelInitializer=p),h}async loadWeights(e){const t=Array.isArray(this.path)?this.path[1]:this.path,[n,s]=function(e){const t=e.lastIndexOf("/"),n=e.lastIndexOf("?");return[e.substring(0,t)+"/",n>t?e.substring(n):""]}(t),a=this.weightPathPrefix||n,r=[];for(const t of e)r.push(...t.weights);const i=[],o=[];for(const t of e)for(const e of t.paths)null!=this.weightUrlConverter?o.push(this.weightUrlConverter(e)):i.push(a+e+s);return this.weightUrlConverter&&i.push(...await Promise.all(o)),[r,C(await Ne(i,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress}))]}}function Ce(e){return null!=e.match(Te.URL_SCHEME_REGEX)}Te.URL_SCHEME_REGEX=/^https?:\/\//;const $e=(e,t)=>{if("undefined"==typeof fetch&&(null==t||null==t.fetchFunc))return null;{let n=!0;if(n=Array.isArray(e)?e.every((e=>Ce(e))):Ce(e),n)return Ae(e,t)}return null};function Ae(e,t){return new Te(e,t)}function Ee(e,t){return Ae(e,t)}_.registerSaveRouter($e),_.registerLoadRouter($e);class _e{constructor(e){this.modelArtifacts=e}async load(){return this.modelArtifacts}}class Re{constructor(e){this.saveHandler=e}async save(e){return this.saveHandler(e)}}function Fe(e,t,n,s){return 1===arguments.length?null!=e.modelTopology||null!=e.weightSpecs?new _e(e):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new _e({modelTopology:e})):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new _e({modelTopology:e,weightSpecs:t,weightData:n,trainingConfig:s}))}function De(e){return new Re(e)}var Oe=n(3740),Me=n(8687),ze=n(6708),Le=n(2668),Be=n(9065);const Pe=(0,Le.op)({confusionMatrix_:function(e,t,n){const s=(0,Oe._1)(e,"labels","confusionMatrix"),a=(0,Oe._1)(t,"predictions","confusionMatrix");v.hu(null==n||n>0&&Number.isInteger(n),(()=>`If provided, numClasses must be a positive integer, but got ${n}`)),v.hu(1===s.rank,(()=>`Expected the rank of labels to be 1, but got ${s.rank}`)),v.hu(1===a.rank,(()=>`Expected the rank of predictions to be 1, but got ${a.rank}`)),v.hu(s.shape[0]===a.shape[0],(()=>`Mismatch in the number of examples: ${s.shape[0]} vs. ${a.shape[0]}. Labels and predictions should have the same number of elements.`)),v.hu(n>0&&Number.isInteger(n),(()=>`numClasses is required to be a positive integer, but got ${n}`));const r=(0,ze.l)((0,de.p)(s,"int32"),n),i=(0,ze.l)((0,de.p)(a,"int32"),n),o=(0,Be.p)(r),l=(0,Me.O)(o,i);return(0,de.p)(l,"int32")}});var Ve=n(9121),We=n(6151),Ue=n(9906);let Ge;function He(e,t=3){if(t>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");if(null==e)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");let n=!1,s=!1,a=!1,r=!1,i=!1,o=!1;if(e.data instanceof Uint8Array)n=!0;else if("undefined"!=typeof ImageData&&e instanceof ImageData)s=!0;else if("undefined"!=typeof HTMLVideoElement&&e instanceof HTMLVideoElement)a=!0;else if("undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement)r=!0;else if(null!=e.getContext)i=!0;else{if(!("undefined"!=typeof ImageBitmap&&e instanceof ImageBitmap))throw new Error(`pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was ${e.constructor.name}`);o=!0}if(a){const t=2;if(a&&e.readyState<t)throw new Error("The video element has not loaded data yet. Please wait for `loadeddata` event on the <video> element.")}if(null!=(0,We.pI)(Ve.eB,d.BV.backendName)){const n={pixels:e},s={numChannels:t};return d.BV.runKernel(Ve.eB,n,s)}const[l,u]=a?[e.videoWidth,e.videoHeight]:[e.width,e.height];let c,h;if(i?c=e.getContext("2d").getImageData(0,0,l,u).data:s||n?c=e.data:(r||a||o)&&(null==Ge&&(Ge=document.createElement("canvas").getContext("2d")),Ge.canvas.width=l,Ge.canvas.height=u,Ge.drawImage(e,0,0,l,u),c=Ge.getImageData(0,0,l,u).data),4===t)h=new Int32Array(c);else{const e=l*u;h=new Int32Array(e*t);for(let n=0;n<e;n++)for(let e=0;e<t;++e)h[n*t+e]=c[4*n+e]}const p=[u,l,t];return(0,Ue.w)(h,p,"int32")}async function je(e,t=3){let n=null;if((0,g.OB)().getBool("WRAP_TO_IMAGEBITMAP")&&function(e){return"undefined"!=typeof window&&"undefined"!=typeof ImageBitmap&&window.hasOwnProperty("createImageBitmap")&&!(e instanceof ImageBitmap)&&function(e){return null!=e&&0!==e.width&&0!==e.height}(e)&&!function(e){return null!=e&&e.data instanceof Uint8Array}(e)}(e)){let t;try{t=await createImageBitmap(e,{premultiplyAlpha:"none"})}catch(e){t=null}n=null!=t&&t.width===e.width&&t.height===e.height?t:e}else n=e;return He(n,t)}async function Xe(e,t){let n=(0,Oe._1)(e,"img","toPixels");if(!(e instanceof ge.es)){const e=n;n=(0,de.p)(e,"int32"),e.dispose()}if(2!==n.rank&&3!==n.rank)throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${n.rank}.`);const[s,a]=n.shape.slice(0,2),r=2===n.rank?1:n.shape[2];if(r>4||2===r)throw new Error(`toPixels only supports depth of size 1, 3 or 4 but got ${r}`);if("float32"!==n.dtype&&"int32"!==n.dtype)throw new Error(`Unsupported type for toPixels: ${n.dtype}. Please use float32 or int32 tensors.`);const i=await n.data(),o="float32"===n.dtype?255:1,l=new Uint8ClampedArray(a*s*4);for(let e=0;e<s*a;++e){const t=[0,0,0,255];for(let s=0;s<r;s++){const a=i[e*r+s];if("float32"===n.dtype){if(a<0||a>1)throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${a}.`)}else if("int32"===n.dtype&&(a<0||a>255))throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${a}.`);1===r?(t[0]=a*o,t[1]=a*o,t[2]=a*o):t[s]=a*o}const s=4*e;l[s+0]=Math.round(t[0]),l[s+1]=Math.round(t[1]),l[s+2]=Math.round(t[2]),l[s+3]=Math.round(t[3])}if(null!=t){t.width=a,t.height=s;const e=t.getContext("2d"),n=new ImageData(l,a,s);e.putImageData(n,0,0)}return n!==e&&n.dispose(),l}const qe=(0,Le.op)({fromPixels_:He});function Ke(e,t){const n=e.shape.length,s=t.shape.length;if(n<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${n}.`);if(s<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${s}.`);if("int32"!==t.dtype)throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);if(t.shape[s-1]>n)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${t.shape[s-1]} vs. ${n}`);if(0===(0,v.NA)(e.shape))throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${e.shape}.`);const a=t.shape,r=a[a.length-1];let i=1;for(let e=0;e<a.length-1;++e)i*=a[e];const o=e.shape,l=a.slice();l.pop();let u=1;for(let e=r;e<n;++e)u*=o[e],l.push(o[e]);const c=[...(0,v.e3)(e.shape).map((e=>e/u)),1].slice(0,r);return[l,i,u,c]}var Ye=n(3028),Qe=n(7650);class Je{getClassName(){return this.constructor.className}static fromConfig(e,t){return new e(t)}}class Ze{constructor(){this.classNameMap={}}static getMap(){return null==Ze.instance&&(Ze.instance=new Ze),Ze.instance}static register(e){Ze.getMap().classNameMap[e.className]=[e,e.fromConfig]}}function et(e){(0,v.hu)(null!=e.className,(()=>"Class being registered does not have the static className property defined.")),(0,v.hu)("string"==typeof e.className,(()=>"className is required to be a string, but got type "+typeof e.className)),(0,v.hu)(e.className.length>0,(()=>"Class being registered has an empty-string as its className, which is disallowed.")),Ze.register(e)}var tt=n(747),nt=n(9155);const st=.1;function at(e,t,n){return null==n&&(n=rt()),it(e,t,((e,t)=>ct(e,t,n)))}function rt(){return 32===d.BV.backend.floatPrecision()?.001:st}function it(e,t,n){let s=!0;if(((0,v.fU)(e)||(0,v.fU)(t))&&(s=!1),(0,v.fU)(e)&&(0,v.fU)(t)&&(s=!0),s){const n=e.constructor.name,s=t.constructor.name;if(n!==s)throw new Error(`Arrays are of different type. Actual: ${n}. Expected: ${s}`)}if(Array.isArray(e)&&Array.isArray(t)){const n=(0,Oe.C)(e),s=(0,Oe.C)(t);if(!(0,v.cO)(n,s))throw new Error(`Arrays have different shapes. Actual: [${n}]. Expected: [${s}]`)}const a=(0,v.fU)(e)?e:(0,v.xH)(e),r=(0,v.fU)(t)?t:(0,v.xH)(t);if(a.length!==r.length)throw new Error(`Arrays have different lengths actual: ${a.length} vs expected: ${r.length}.\nActual:   ${a}.\nExpected: ${r}.`);for(let e=0;e<r.length;++e){const t=a[e],s=r[e];if(!n(t,s))throw new Error(`Arrays differ: actual[${e}] = ${t}, expected[${e}] = ${s}.\nActual:   ${a}.\nExpected: ${r}.`)}}function ot(e,t){e().then((()=>t.fail()),(()=>t()))}function lt(e,t){const n="string"==typeof t||"number"==typeof t||"boolean"==typeof t?[t]:t;return(0,v.HD)(e)||(0,v.HD)(e[0])||(0,v.HD)(t)||(0,v.HD)(t[0])?it(e,n,((e,t)=>e==t)):it(e,t,((e,t)=>ct(e,t,0)))}function ut(e,t,n){if(null==n&&(n=rt()),!ct(e,t,n))throw new Error(`Numbers differ: actual === ${e}, expected === ${t}`)}function ct(e,t,n){return!isFinite(e)&&!isFinite(t)||!(isNaN(e)||isNaN(t)||Math.abs(e-t)>n)}function ht(e,t,n){for(let s=0;s<e.length;s++)if(e[s]<t||e[s]>n)throw new Error(`Value out of range:${e[s]} low: ${t}, high: ${n}`)}function pt(e,t){expect(new Float32Array(e)).toEqual(new Float32Array(t))}function dt(e){for(let t=0;t<e.length;t++){const n=e[t];Array.isArray(n)?dt(n):e[t]=(0,nt.encodeString)(n)}return e}const ft="3.3.0";var mt=n(4368),gt=n(6407),yt=n(1274),bt=n(4841),xt=n(3261),vt=n(248),kt=n(6577),wt=n(633),Nt=n(9494);class It extends Je{minimize(e,t=!1,n){const{value:s,grads:a}=this.computeGradients(e,n);if(null!=n){const e=n.map((e=>({name:e.name,tensor:a[e.name]})));this.applyGradients(e)}else this.applyGradients(a);return(0,mt.B9)(a),t?s:(s.dispose(),null)}get iterations(){return null==this.iterations_&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(e,t){return(0,wt.pn)(e,t)}dispose(){null!=this.iterations_&&(0,mt.B9)(this.iterations_)}async saveIterations(){return null==this.iterations_&&(this.iterations_=0),{name:"iter",tensor:(0,Nt.i)(this.iterations_,"int32")}}async getWeights(){throw new Error("getWeights() is not implemented for this optimizer yet.")}async setWeights(e){throw new Error(`setWeights() is not implemented for this optimizer class ${this.getClassName()}`)}async extractIterations(e){return this.iterations_=(await e[0].tensor.data())[0],e.slice(1)}}Object.defineProperty(It,Symbol.hasInstance,{value:e=>null!=e.minimize&&null!=e.computeGradients&&null!=e.applyGradients});class St extends It{constructor(e,t,n=null){super(),this.learningRate=e,this.rho=t,this.epsilon=n,this.accumulatedGrads=[],this.accumulatedUpdates=[],null==n&&(this.epsilon=d.BV.backend.epsilon())}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=d.BV.registeredVariables[t];null==this.accumulatedGrads[n]&&(this.accumulatedGrads[n]={originalName:`${t}/accum_grad`,variable:(0,mt.lu)((()=>(0,kt.P)(s).variable(!1)))}),null==this.accumulatedUpdates[n]&&(this.accumulatedUpdates[n]={originalName:`${t}/accum_var`,variable:(0,mt.lu)((()=>(0,kt.P)(s).variable(!1)))});const a=Array.isArray(e)?e[n].tensor:e[t];if(null==a)return;const r=this.accumulatedGrads[n].variable,i=this.accumulatedUpdates[n].variable;(0,mt.lu)((()=>{const e=(0,gt.I)((0,bt.d)(r,this.rho),(0,bt.d)((0,vt.h)(a),1-this.rho)),t=(0,bt.d)((0,yt.h)((0,xt._)((0,gt.I)(i,this.epsilon)),(0,xt._)((0,gt.I)(r,this.epsilon))),a),n=(0,gt.I)((0,bt.d)(i,this.rho),(0,bt.d)((0,vt.h)(t),1-this.rho));r.assign(e),i.assign(n);const o=(0,gt.I)((0,bt.d)(t,-this.learningRate),s);s.assign(o)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedUpdates&&((0,mt.B9)(this.accumulatedGrads.map((e=>e.variable))),(0,mt.B9)(this.accumulatedUpdates.map((e=>e.variable))))}async getWeights(){const e=[...this.accumulatedGrads,...this.accumulatedUpdates];return[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){const t=(e=await this.extractIterations(e)).length/2;this.accumulatedGrads=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(!1)}))),this.accumulatedUpdates=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(!1)})))}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.rho,t.epsilon)}}St.className="Adadelta",et(St);var Tt=n(4006);class Ct extends It{constructor(e,t=.1){super(),this.learningRate=e,this.initialAccumulatorValue=t,this.accumulatedGrads=[]}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=d.BV.registeredVariables[t];if(null==this.accumulatedGrads[n]){const e=!1;this.accumulatedGrads[n]={originalName:`${t}/accumulator`,variable:(0,mt.lu)((()=>(0,Tt.h)(s.shape,this.initialAccumulatorValue).variable(e)))}}const a=Array.isArray(e)?e[n].tensor:e[t];if(null==a)return;const r=this.accumulatedGrads[n].variable;(0,mt.lu)((()=>{const e=(0,gt.I)(r,(0,vt.h)(a));r.assign(e);const t=(0,gt.I)((0,bt.d)((0,yt.h)(a,(0,xt._)((0,gt.I)(e,d.BV.backend.epsilon()))),-this.learningRate),s);s.assign(t)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedGrads&&(0,mt.B9)(this.accumulatedGrads.map((e=>e.variable)))}async getWeights(){return[await this.saveIterations()].concat(this.accumulatedGrads.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e),this.accumulatedGrads=e.map((e=>({originalName:e.name,variable:e.tensor.variable(!1)})))}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(e,t){return new e(t.learningRate,t.initialAccumulatorValue)}}Ct.className="Adagrad",et(Ct);var $t=n(3453),At=n(827);class Et extends It{constructor(e,t,n,s=null){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=s,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],(0,mt.lu)((()=>{this.accBeta1=(0,Nt.i)(t).variable(),this.accBeta2=(0,Nt.i)(n).variable()})),null==s&&(this.epsilon=d.BV.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);(0,mt.lu)((()=>{const n=(0,At.l)(1,this.accBeta1),s=(0,At.l)(1,this.accBeta2);t.forEach(((t,a)=>{const r=d.BV.registeredVariables[t];null==this.accumulatedFirstMoment[a]&&(this.accumulatedFirstMoment[a]={originalName:`${t}/m`,variable:(0,mt.lu)((()=>(0,kt.P)(r).variable(!1)))}),null==this.accumulatedSecondMoment[a]&&(this.accumulatedSecondMoment[a]={originalName:`${t}/v`,variable:(0,mt.lu)((()=>(0,kt.P)(r).variable(!1)))});const i=Array.isArray(e)?e[a].tensor:e[t];if(null==i)return;const o=this.accumulatedFirstMoment[a].variable,l=this.accumulatedSecondMoment[a].variable,u=(0,gt.I)((0,bt.d)(o,this.beta1),(0,bt.d)(i,1-this.beta1)),c=(0,gt.I)((0,bt.d)(l,this.beta2),(0,bt.d)((0,vt.h)(i),1-this.beta2)),h=(0,yt.h)(u,n),p=(0,yt.h)(c,s);o.assign(u),l.assign(c);const f=(0,gt.I)((0,bt.d)((0,yt.h)(h,(0,gt.I)((0,xt._)(p),this.epsilon)),-this.learningRate),r);r.assign(f)})),this.accBeta1.assign((0,bt.d)(this.accBeta1,this.beta1)),this.accBeta2.assign((0,bt.d)(this.accBeta2,this.beta2))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&(0,mt.B9)(this.accumulatedFirstMoment.map((e=>e.variable))),null!=this.accumulatedSecondMoment&&(0,mt.B9)(this.accumulatedSecondMoment.map((e=>e.variable)))}async getWeights(){const e=[...this.accumulatedFirstMoment,...this.accumulatedSecondMoment];return[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e),(0,mt.lu)((()=>{this.accBeta1.assign((0,$t.s)(this.beta1,this.iterations_+1)),this.accBeta2.assign((0,$t.s)(this.beta2,this.iterations_+1))}));const t=e.length/2;this.accumulatedFirstMoment=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(!1)}))),this.accumulatedSecondMoment=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(!1)})))}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon)}}Et.className="Adam",et(Et);var _t=n(6235),Rt=n(632);class Ft extends It{constructor(e,t,n,s=null,a=0){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=s,this.decay=a,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],(0,mt.lu)((()=>{this.iteration=(0,Nt.i)(0).variable(),this.accBeta1=(0,Nt.i)(t).variable()})),null==s&&(this.epsilon=d.BV.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);(0,mt.lu)((()=>{const n=(0,At.l)(1,this.accBeta1),s=(0,yt.h)(-this.learningRate,(0,gt.I)((0,bt.d)(this.iteration,this.decay),1));t.forEach(((t,a)=>{const r=d.BV.registeredVariables[t];null==this.accumulatedFirstMoment[a]&&(this.accumulatedFirstMoment[a]={originalName:`${t}/m`,variable:(0,kt.P)(r).variable(!1)}),null==this.accumulatedWeightedInfNorm[a]&&(this.accumulatedWeightedInfNorm[a]={originalName:`${t}/v`,variable:(0,kt.P)(r).variable(!1)});const i=Array.isArray(e)?e[a].tensor:e[t];if(null==i)return;const o=this.accumulatedFirstMoment[a].variable,l=this.accumulatedWeightedInfNorm[a].variable,u=(0,gt.I)((0,bt.d)(o,this.beta1),(0,bt.d)(i,1-this.beta1)),c=(0,bt.d)(l,this.beta2),h=(0,_t.W)(i),p=(0,Rt.g)(c,h);o.assign(u),l.assign(p);const f=(0,gt.I)((0,bt.d)((0,yt.h)(s,n),(0,yt.h)(u,(0,gt.I)(p,this.epsilon))),r);r.assign(f)})),this.iteration.assign((0,gt.I)(this.iteration,1)),this.accBeta1.assign((0,bt.d)(this.accBeta1,this.beta1))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&(0,mt.B9)(this.accumulatedFirstMoment.map((e=>e.variable))),null!=this.accumulatedWeightedInfNorm&&(0,mt.B9)(this.accumulatedWeightedInfNorm.map((e=>e.variable)))}async getWeights(){throw new Error("getWeights() is not implemented for Adamax yet.")}async setWeights(e){throw new Error("setWeights() is not implemented for Adamax yet.")}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon,t.decay)}}Ft.className="Adamax",et(Ft);class Dt extends It{constructor(e){super(),this.learningRate=e,this.setLearningRate(e)}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=Array.isArray(e)?e[n].tensor:e[t];if(null==s)return;const a=d.BV.registeredVariables[t];(0,mt.lu)((()=>{const e=(0,gt.I)((0,bt.d)(this.c,s),a);a.assign(e)}))})),this.incrementIterations()}setLearningRate(e){this.learningRate=e,null!=this.c&&this.c.dispose(),this.c=(0,mt.Cn)((0,Nt.i)(-e))}dispose(){this.c.dispose()}async getWeights(){return[await this.saveIterations()]}async setWeights(e){if(0!==(e=await this.extractIterations(e)).length)throw new Error("SGD optimizer does not have settable weights.")}getConfig(){return{learningRate:this.learningRate}}static fromConfig(e,t){return new e(t.learningRate)}}Dt.className="SGD",et(Dt);class Ot extends Dt{constructor(e,t,n=!1){super(e),this.learningRate=e,this.momentum=t,this.useNesterov=n,this.accumulations=[],this.m=(0,Nt.i)(this.momentum)}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=d.BV.registeredVariables[t];if(null==this.accumulations[n]){const e=!1;this.accumulations[n]={originalName:`${t}/momentum`,variable:(0,mt.lu)((()=>(0,kt.P)(s).variable(e)))}}const a=this.accumulations[n].variable,r=Array.isArray(e)?e[n].tensor:e[t];null!=r&&(0,mt.lu)((()=>{let e;const t=(0,gt.I)((0,bt.d)(this.m,a),r);e=this.useNesterov?(0,gt.I)((0,bt.d)(this.c,(0,gt.I)(r,(0,bt.d)(t,this.m))),s):(0,gt.I)((0,bt.d)(this.c,t),s),a.assign(t),s.assign(e)}))})),this.incrementIterations()}dispose(){this.m.dispose(),null!=this.accumulations&&(0,mt.B9)(this.accumulations.map((e=>e.variable)))}setMomentum(e){this.momentum=e}async getWeights(){return[await this.saveIterations()].concat(this.accumulations.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e),this.accumulations=e.map((e=>({originalName:e.name,variable:e.tensor.variable(!1)})))}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(e,t){return new e(t.learningRate,t.momentum,t.useNesterov)}}Ot.className="Momentum",et(Ot);class Mt extends It{constructor(e,t=.9,n=0,s=null,a=!1){if(super(),this.learningRate=e,this.decay=t,this.momentum=n,this.epsilon=s,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=a,null==s&&(this.epsilon=d.BV.backend.epsilon()),null==e)throw new Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=d.BV.registeredVariables[t],a=!1;null==this.accumulatedMeanSquares[n]&&(this.accumulatedMeanSquares[n]={originalName:`${t}/rms`,variable:(0,mt.lu)((()=>(0,kt.P)(s).variable(a)))}),null==this.accumulatedMoments[n]&&(this.accumulatedMoments[n]={originalName:`${t}/momentum`,variable:(0,mt.lu)((()=>(0,kt.P)(s).variable(a)))}),null==this.accumulatedMeanGrads[n]&&this.centered&&(this.accumulatedMeanGrads[n]={originalName:`${t}/mg`,variable:(0,mt.lu)((()=>(0,kt.P)(s).variable(a)))});const r=Array.isArray(e)?e[n].tensor:e[t];if(null==r)return;const i=this.accumulatedMeanSquares[n].variable,o=this.accumulatedMoments[n].variable;(0,mt.lu)((()=>{const e=(0,gt.I)((0,bt.d)(i,this.decay),(0,bt.d)((0,vt.h)(r),1-this.decay));if(this.centered){const t=this.accumulatedMeanGrads[n].variable,a=(0,gt.I)((0,bt.d)(t,this.decay),(0,bt.d)(r,1-this.decay)),l=(0,yt.h)((0,bt.d)(r,this.learningRate),(0,xt._)((0,At.l)(e,(0,gt.I)((0,vt.h)(a),this.epsilon)))),u=(0,gt.I)((0,bt.d)(o,this.momentum),l);i.assign(e),t.assign(a),o.assign(u);const c=(0,At.l)(s,u);s.assign(c)}else{const e=(0,gt.I)((0,bt.d)(i,this.decay),(0,bt.d)((0,vt.h)(r),1-this.decay)),t=(0,gt.I)((0,bt.d)(o,this.momentum),(0,yt.h)((0,bt.d)(r,this.learningRate),(0,xt._)((0,gt.I)(e,this.epsilon))));i.assign(e),o.assign(t);const n=(0,At.l)(s,t);s.assign(n)}}))})),this.incrementIterations()}dispose(){null!=this.accumulatedMeanSquares&&(0,mt.B9)(this.accumulatedMeanSquares.map((e=>e.variable))),null!=this.accumulatedMeanGrads&&this.centered&&(0,mt.B9)(this.accumulatedMeanGrads.map((e=>e.variable))),null!=this.accumulatedMoments&&(0,mt.B9)(this.accumulatedMoments.map((e=>e.variable)))}async getWeights(){const e=[...this.accumulatedMeanSquares,...this.accumulatedMoments];return this.centered&&e.push(...this.accumulatedMeanGrads),[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e);const t=this.centered?e.length/3:e.length/2,n=!1;this.accumulatedMeanSquares=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))),this.accumulatedMoments=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))),this.centered&&(this.accumulatedMeanGrads=e.slice(2*t,3*t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))))}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(e,t){return new e(t.learningRate,t.decay,t.momentum,t.epsilon,t.centered)}}Mt.className="RMSProp",et(Mt);var zt=n(1221),Lt=n(6499),Bt=n(9876);class Pt{static sgd(e){return new Dt(e)}static momentum(e,t,n=!1){return new Ot(e,t,n)}static rmsprop(e,t=.9,n=0,s=null,a=!1){return new Mt(e,t,n,s,a)}static adam(e=.001,t=.9,n=.999,s=null){return new Et(e,t,n,s)}static adadelta(e=.001,t=.95,n=null){return new St(e,t,n)}static adamax(e=.002,t=.9,n=.999,s=null,a=0){return new Ft(e,t,n,s,a)}static adagrad(e,t=.1){return new Ct(e,t)}}const Vt={sgd:Pt.sgd,momentum:Pt.momentum,adadelta:Pt.adadelta,adagrad:Pt.adagrad,rmsprop:Pt.rmsprop,adamax:Pt.adamax,adam:Pt.adam},Wt="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:"undefined"!=typeof setImmediate?setImmediate:e=>e();function Ut(){return new Promise((e=>Wt((()=>e()))))}var Gt=n(3591),Ht=n(2200);function jt(e,t){const n=e[0].length;e.forEach(((e,t)=>{v.hu(e.length===n,(()=>`Error in concat${n}D: rank of tensors[${t}] must be the same as the rank of the rest (${n})`))})),v.hu(t>=0&&t<n,(()=>`Error in concat${n}D: axis must be between 0 and ${n-1}.`));const s=e[0];e.forEach(((e,a)=>{for(let r=0;r<n;r++)v.hu(r===t||e[r]===s[r],(()=>`Error in concat${n}D: Shape of tensors[${a}] (${e}) does not match the shape of the rest (${s}) along the non-concatenated axis ${a}.`))}))}function Xt(e,t){const n=e[0].slice();for(let s=1;s<e.length;s++)n[t]+=e[s][t];return n}var qt=n(2582),Kt=n(9323);const Yt=30;function Qt(e){return e<=Yt?e:(0,v.jP)(e,Math.floor(Math.sqrt(e)))}function Jt(e,t,n){return[n*("number"==typeof e?e:e[0]),t*("number"==typeof e?e:e[1])]}function Zt(e,t,n,s=!0){let a=[];if(s)a=a.concat(t.slice(0)),a.push(e[0]/n),a=a.concat(e.slice(1));else{a=a.concat(e[0]);const n=t.length;for(let s=0;s<n;++s)a=a.concat([e[s+1]/t[s],t[s]]);a=a.concat(e.slice(n+1))}return a}function en(e,t,n=!0){const s=[];if(n){s.push(t);for(let n=t+1;n<e;++n)n<=2*t?(s.push(n),s.push(n-(t+1))):s.push(n)}else{const n=[],a=[];for(let s=1;s<e;++s)s>=2*t+1||s%2==1?a.push(s):n.push(s);s.push(...n),s.push(0),s.push(...a)}return s}function tn(e,t,n,s=!0){const a=[];s?a.push(e[0]/n):a.push(e[0]*n);for(let n=1;n<e.length;++n)n<=t.length?s?a.push(t[n-1]*e[n]):a.push(e[n]/t[n-1]):a.push(e[n]);return a}function nn(e,t){const n=[0];for(let s=0;s<t;++s)n.push(e[s][0]);return n}function sn(e,t,n){const s=e.slice(0,1);for(let a=0;a<n;++a)s.push(e[a+1]-t[a][0]-t[a][1]);return s}var an=n(3179);const rn=.3275911,on=.254829592,ln=-.284496736,un=1.421413741,cn=-1.453152027,hn=1.061405429;function pn(...e){(0,g.OB)().getBool("IS_TEST")||console.warn(...e)}function dn(...e){(0,g.OB)().getBool("IS_TEST")||console.log(...e)}function fn(e,t){if(e.length!==t.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${e.length}, imag: ${t.length}.`);const n=new Float32Array(2*e.length);for(let s=0;s<n.length;s+=2)n[s]=e[s/2],n[s+1]=t[s/2];return n}function mn(e){const t=new Float32Array(e.length/2),n=new Float32Array(e.length/2);for(let s=0;s<e.length;s+=2)t[s/2]=e[s],n[s/2]=e[s+1];return{real:t,imag:n}}function gn(e){const t=Math.ceil(e.length/4),n=new Float32Array(t),s=new Float32Array(t);for(let t=0;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],s[Math.floor(t/4)]=e[t+1];return{real:n,imag:s}}function yn(e){const t=Math.floor(e.length/4),n=new Float32Array(t),s=new Float32Array(t);for(let t=2;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],s[Math.floor(t/4)]=e[t+1];return{real:n,imag:s}}function bn(e,t){return{real:e[2*t],imag:e[2*t+1]}}function xn(e,t,n,s){e[2*s]=t,e[2*s+1]=n}function vn(e,t){const n=new Float32Array(e/2),s=new Float32Array(e/2);for(let a=0;a<Math.ceil(e/2);a++){const r=(t?2:-2)*Math.PI*(a/e);n[a]=Math.cos(r),s[a]=Math.sin(r)}return{real:n,imag:s}}function kn(e,t,n){const s=(n?2:-2)*Math.PI*(e/t);return{real:Math.cos(s),imag:Math.sin(s)}}function wn(e,t,n=0){let s=[];if("number"==typeof t)(0,v.hu)(e.shape[n]%t==0,(()=>"Number of splits must evenly divide the axis.")),s=new Array(t).fill(e.shape[n]/t);else{const a=t.reduce(((e,t)=>(-1===t&&(e+=1),e)),0);(0,v.hu)(a<=1,(()=>"There should be only one negative value in split array."));const r=t.indexOf(-1);if(-1!==r){const s=t.reduce(((e,t)=>t>0?e+t:e));t[r]=e.shape[n]-s}(0,v.hu)(e.shape[n]===t.reduce(((e,t)=>e+t)),(()=>"The sum of sizes must match the size of the axis dimension.")),s=t}return s}function Nn(e,t){let n,s=!1;for(e<=Yt?(n=e,s=!0):n=(0,v.jP)(e,Math.floor(Math.sqrt(e)));!s;)n>t||n===e?s=!0:n=(0,v.jP)(e,n+1);return n}function In(e,t,n){const s=[],a=e.length;for(let r=0;r<a;r++)r!==t?s.push(e[r]):s.push(n);return s}function Sn(e,t,n,s){const a=t.shape.length,r=e.shape.length;if(0!==s&&(s<-a||s>a))throw new Error(`Expect batchDims in the range of [-${a}, ${a}], but got ${s}`);if(s<0&&(s+=a),s>r)throw new Error(`batchDims (${s}) must be less than rank(x) (\n    ${r}).`);if(n<s)throw new Error(`batchDims (${s}) must be less than or equal to axis (${n}).`);for(let n=0;n<s;++n)if(e.shape[n]!==t.shape[n])throw new Error(`x.shape[${n}]: ${e.shape[n]} should be equal to indices.shape[${n}]: ${t.shape[n]}.`);const i=e.shape[n],o=[];let l=1,u=1,c=1;for(let t=0;t<s;++t)o.push(e.shape[t]),l*=e.shape[t];for(let t=s;t<n;t++)o.push(e.shape[t]),u*=e.shape[t];for(let e=s;e<a;e++)o.push(t.shape[e]);for(let t=n+1;t<r;t++)o.push(e.shape[t]),c*=e.shape[t];return{batchSize:l,sliceSize:c,outerSize:u,dimSize:i,outputShape:o}}function Tn(e){try{return e.map((e=>(0,nt.decodeString)(e)))}catch(e){throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${e}`)}}function Cn(e){return e.map((e=>(0,nt.encodeString)(e)))}var $n=n(3337),An=n(8333),En=n(8713)},9121:(e,t,n)=>{"use strict";n.d(t,{SY:()=>s,VG:()=>a,Sp:()=>r,mm:()=>i,Xz:()=>o,oT:()=>l,IK:()=>u,sJ:()=>c,aJ:()=>h,M2:()=>p,qw:()=>d,jM:()=>f,Oy:()=>m,QC:()=>g,Jh:()=>y,RO:()=>b,_k:()=>x,IM:()=>v,XL:()=>k,zw:()=>w,zv:()=>N,Ly:()=>I,RF:()=>S,gJ:()=>T,xn:()=>C,Zz:()=>$,yj:()=>A,Eh:()=>E,mh:()=>_,wU:()=>R,wm:()=>F,x1:()=>D,o2:()=>O,ik:()=>M,mc:()=>z,TR:()=>L,iH:()=>B,Vc:()=>P,QR:()=>V,T0:()=>W,ci:()=>U,sL:()=>G,y7:()=>H,$w:()=>j,p4:()=>X,ek:()=>q,Vn:()=>K,oH:()=>Y,SX:()=>Q,HE:()=>J,Om:()=>Z,hd:()=>ee,NE:()=>te,YF:()=>ne,Y0:()=>se,vw:()=>ae,de:()=>re,Uy:()=>ie,OR:()=>oe,je:()=>le,sH:()=>ue,qi:()=>ce,q1:()=>he,iZ:()=>pe,Ac:()=>de,iJ:()=>fe,Qg:()=>me,J_:()=>ge,av:()=>ye,iW:()=>be,r7:()=>xe,J$:()=>ve,vt:()=>ke,CA:()=>we,e7:()=>Ne,Zb:()=>Ie,kU:()=>Se,PY:()=>Te,Vf:()=>Ce,MZ:()=>$e,qC:()=>Ae,eZ:()=>Ee,Hh:()=>_e,Yo:()=>Re,BM:()=>Fe,mT:()=>De,OV:()=>Oe,OA:()=>Me,OU:()=>ze,vF:()=>Le,q2:()=>Be,c1:()=>Pe,q8:()=>Ve,jQ:()=>We,Vb:()=>Ue,NZ:()=>Ge,wY:()=>He,ku:()=>je,yQ:()=>Xe,uv:()=>qe,cy:()=>Ke,W0:()=>Ye,qW:()=>Qe,we:()=>Je,Qi:()=>Ze,ly:()=>et,Kg:()=>tt,pe:()=>nt,o0:()=>st,Dl:()=>at,e6:()=>rt,xJ:()=>it,$H:()=>ot,qk:()=>lt,HZ:()=>ut,dp:()=>ct,Hm:()=>ht,_Y:()=>pt,zb:()=>dt,Sb:()=>ft,mK:()=>mt,e0:()=>gt,bV:()=>yt,xQ:()=>bt,Ph:()=>xt,oF:()=>vt,p2:()=>kt,RQ:()=>wt,w3:()=>Nt,i5:()=>It,a5:()=>St,MR:()=>Tt,FK:()=>Ct,GB:()=>$t,TQ:()=>At,L8:()=>Et,Gc:()=>_t,_t:()=>Rt,bK:()=>Ft,Tr:()=>Dt,D2:()=>Ot,m2:()=>Mt,sE:()=>zt,MI:()=>Lt,n9:()=>Bt,cW:()=>Pt,wx:()=>Vt,G3:()=>Wt,kp:()=>Ut,To:()=>Gt,Qv:()=>Ht,Ru:()=>jt,h8:()=>Xt,eB:()=>qt,b9:()=>Kt,us:()=>Yt,_V:()=>Qt,lu:()=>Jt});const s="Abs",a="Acos",r="Acosh",i="Add",o="AddN",l="All",u="Any",c="ArgMax",h="ArgMin",p="Asin",d="Asinh",f="Atan",m="Atanh",g="Atan2",y="AvgPool",b="AvgPoolGrad",x="AvgPool3D",v="AvgPool3DGrad",k="BatchMatMul",w="BatchToSpaceND",N="Bincount",I="BroadcastTo",S="Cast",T="Ceil",C="ClipByValue",$="Complex",A="ComplexAbs",E="Concat",_="Conv2D",R="Conv2DBackpropFilter",F="Conv2DBackpropInput",D="Conv3D",O="Conv3DBackpropFilterV2",M="Conv3DBackpropInputV2",z="Cos",L="Cosh",B="Cumsum",P="CropAndResize",V="DenseBincount",W="DepthToSpace",U="DepthwiseConv2dNative",G="DepthwiseConv2dNativeBackpropFilter",H="DepthwiseConv2dNativeBackpropInput",j="Diag",X="Dilation2D",q="Dilation2DBackpropInput",K="Dilation2DBackpropFilter",Y="RealDiv",Q="Elu",J="EluGrad",Z="Erf",ee="Equal",te="Exp",ne="ExpandDims",se="Expm1",ae="FFT",re="Fill",ie="FlipLeftRight",oe="Floor",le="FloorDiv",ue="FusedBatchNorm",ce="GatherV2",he="GatherNd",pe="Greater",de="GreaterEqual",fe="Identity",me="IFFT",ge="Imag",ye="IsFinite",be="IsInf",xe="IsNan",ve="LeakyRelu",ke="Less",we="LessEqual",Ne="LinSpace",Ie="Log",Se="Log1p",Te="LogicalAnd",Ce="LogicalNot",$e="LogicalOr",Ae="LogSoftmax",Ee="LRN",_e="LRNGrad",Re="Max",Fe="Maximum",De="MaxPool",Oe="MaxPoolGrad",Me="MaxPool3D",ze="MaxPool3DGrad",Le="MaxPoolWithArgmax",Be="Mean",Pe="Min",Ve="Minimum",We="MirrorPad",Ue="Mod",Ge="Multinomial",He="Multiply",je="Neg",Xe="NotEqual",qe="NonMaxSuppressionV3",Ke="NonMaxSuppressionV4",Ye="NonMaxSuppressionV5",Qe="OnesLike",Je="OneHot",Ze="Pack",et="PadV2",tt="Pool",nt="Pow",st="Prelu",at="Prod",rt="Range",it="Real",ot="Reciprocal",lt="Relu",ut="Reshape",ct="ResizeNearestNeighbor",ht="ResizeNearestNeighborGrad",pt="ResizeBilinear",dt="ResizeBilinearGrad",ft="Relu6",mt="Reverse",gt="Round",yt="Rsqrt",bt="ScatterNd",xt="Select",vt="Selu",kt="Slice",wt="Sin",Nt="Sinh",It="Sign",St="Sigmoid",Tt="Softplus",Ct="Sqrt",$t="Sum",At="SpaceToBatchND",Et="SplitV",_t="Softmax",Rt="SquaredDifference",Ft="Square",Dt="Sub",Ot="SparseToDense",Mt="StridedSlice",zt="Tan",Lt="Tanh",Bt="Tile",Pt="TopK",Vt="Transform",Wt="Transpose",Ut="Unique",Gt="Unpack",Ht="UnsortedSegmentSum",jt="ZerosLike",Xt="Step",qt="FromPixels",Kt="RotateWithOffset",Yt="_FusedMatMul",Qt="FusedConv2D",Jt="FusedDepthwiseConv2D"},6151:(e,t,n)=>{"use strict";n.d(t,{pI:()=>o,uk:()=>l,tr:()=>u,wC:()=>c,Li:()=>h,nE:()=>p,bt:()=>d,T3:()=>f});var s=n(2885),a=n(5938);const r=(0,a.R)("kernelRegistry",(()=>new Map)),i=(0,a.R)("gradRegistry",(()=>new Map));function o(e,t){const n=m(e,t);return r.get(n)}function l(e){return i.get(e)}function u(e){const t=r.entries(),n=[];for(;;){const{done:s,value:a}=t.next();if(s)break;const[r,i]=a,[o]=r.split("_");o===e&&n.push(i)}return n}function c(e){const{kernelName:t,backendName:n}=e,s=m(t,n);r.has(s)&&console.warn(`The kernel '${t}' for backend '${n}' is already registered`),r.set(s,e)}function h(e){const{kernelName:t}=e;i.has(t)&&(0,s.OB)().getBool("DEBUG")&&console.warn(`Overriding the gradient for '${t}'`),i.set(t,e)}function p(e,t){const n=m(e,t);if(!r.has(n))throw new Error(`The kernel '${e}' for backend '${t}' is not registered`);r.delete(n)}function d(e){if(!i.has(e))throw new Error(`The gradient '${e}' for backend is not registered`);i.delete(e)}function f(e,t){u(e).forEach((e=>{c(Object.assign({},e,{backendName:t}))}))}function m(e,t){return`${t}_${e}`}},6235:(e,t,n)=>{"use strict";n.d(t,{W:()=>i});var s=n(7097),a=n(9121),r=n(3740);const i=(0,n(2668).op)({abs_:function(e){const t=(0,r._1)(e,"x","abs");if("complex64"===t.dtype){const e={x:t};return s.BV.runKernel(a.yj,e)}{const e={x:t};return s.BV.runKernel(a.SY,e)}}})},7839:(e,t,n)=>{"use strict";n.d(t,{K:()=>i});var s=n(7097),a=n(9121),r=n(3740);const i=(0,n(2668).op)({acos_:function(e){const t={x:(0,r._1)(e,"x","acos")};return s.BV.runKernel(a.VG,t)}})},1470:(e,t,n)=>{"use strict";n.d(t,{_:()=>i});var s=n(7097),a=n(9121),r=n(3740);const i=(0,n(2668).op)({acosh_:function(e){const t={x:(0,r._1)(e,"x","acosh")};return s.BV.runKernel(a.Sp,t)}})},6407:(e,t,n)=>{"use strict";n.d(t,{I:()=>o});var s=n(7097),a=n(9121),r=n(747),i=n(3740);const o=(0,n(2668).op)({add_:function(e,t){let n=(0,i._1)(e,"a","add"),o=(0,i._1)(t,"b","add");[n,o]=(0,r.makeTypesMatch)(n,o);const l={a:n,b:o};return s.BV.runKernel(a.mm,l)}})},3135:(e,t,n)=>{"use strict";n.d(t,{Q:()=>o});var s=n(7097),a=n(9121),r=n(3740),i=n(569);const o=(0,n(2668).op)({addN_:function(e){i.hu(Array.isArray(e),(()=>"The argument passed to tf.addN() must be a list of tensors")),i.hu(e.length>=1,(()=>`Must pass at least one tensor to tf.addN(), but got ${e.length}`));const t=e.map(((e,t)=>(0,r._1)(e,`tensors${t}`,"addN"))),n=t[0];t.forEach((e=>{if(e.dtype!==n.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")})),t.forEach((e=>{if(!i.cO(e.shape,n.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")}));const o=t;return s.BV.runKernel(a.Xz,o)}})},781:(e,t,n)=>{"use strict";n.d(t,{$:()=>i});var s=n(7097),a=n(9121),r=n(3740);const i=(0,n(2668).op)({all_:function(e,t=null,n=!1){const i={x:(0,r._1)(e,"x","all","bool")},o={axis:t,keepDims:n};return s.BV.runKernel(a.oT,i,o)}})},2998:(e,t,n)=>{"use strict";n.d(t,{Y:()=>i});var s=n(7097),a=n(9121),r=n(3740);const i=(0,n(2668).op)({any_:function(e,t=null,n=!1){const i={x:(0,r._1)(e,"x","any","bool")},o={axis:t,keepDims:n};return s.BV.runKernel(a.IK,i,o)}})},47:(e,t,n)=>{"use strict";n.d(t,{N:()=>i});var s=n(7097),a=n(9121),r=n(3740);const i=(0,n(2668).op)({argMax_:function(e,t=0){const n={x:(0,r._1)(e,"x","argMax")},i={axis:t};return s.BV.runKernel(a.sJ,n,i)}})},7394:(e,t,n)=>{"use strict";n.d(t,{v:()=>i});var s=n(7097),a=n(9121),r=n(3740);const i=(0,n(2668).op)({argMin_:function(e,t=0){const n={x:(0,r._1)(e,"x","argMin")},i={axis:t};return s.BV.runKernel(a.aJ,n,i)}})},2421:(e,t,n)=>{"use strict";n.d(t,{Z:()=>i});var s=n(7097),a=n(9121),r=n(3740);const i=(0,n(2668).op)({asin_:function(e){const t={x:(0,r._1)(e,"x","asin")};return s.BV.runKernel(a.M2,t)}})},1891:(e,t,n)=>{"use strict";n.d(t,{V:()=>i});var s=n(7097),a=n(9121),r=n(3740);const i=(0,n(2668).op)({asinh_:function(e){const t={x:(0,r._1)(e,"x","asinh")};return s.BV.runKernel(a.qw,t)}})},7037:(e,t,n)=>{"use strict";n.d(t,{z:()=>i});var s=n(7097),a=n(9121),r=n(3740);const i=(0,n(2668).op)({atan_:function(e){const t={x:(0,r._1)(e,"x","atan")};return s.BV.runKernel(a.jM,t)}})},9812:(e,t,n)=>{"use strict";n.d(t,{f:()=>o});var s=n(7097),a=n(9121),r=n(747),i=n(3740);const o=(0,n(2668).op)({atan2_:function(e,t){let n=(0,i._1)(e,"a","atan2"),o=(0,i._1)(t,"b","atan2");[n,o]=(0,r.makeTypesMatch)(n,o);const l={a:n,b:o};return s.BV.runKernel(a.QC,l)}})},369:(e,t,n)=>{"use strict";n.d(t,{C:()=>i});var s=n(7097),a=n(9121),r=n(3740);const i=(0,n(2668).op)({atanh_:function(e){const t={x:(0,r._1)(e,"x","atanh")};return s.BV.runKernel(a.Oy,t)}})},5176:(e,t,n)=>{"use strict";n.d(t,{w:()=>h});var s=n(7097),a=n(9121),r=n(3740),i=n(569),o=n(2271),l=n(2582),u=n(2668),c=n(4968);const h=(0,u.op)({avgPool_:function(e,t,n,u,h){const p=(0,r._1)(e,"x","avgPool","float32");i.hu(l.jT(n,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`));let d=p,f=!1;3===p.rank&&(f=!0,d=(0,c.X)(p,[1,p.shape[0],p.shape[1],p.shape[2]])),i.hu(4===d.rank,(()=>`Error in avgPool: x must be rank 4 but got rank ${d.rank}.`)),null!=h&&i.hu(i.GN(u),(()=>`Error in avgPool: pad must be an integer when using, dimRoundingMode ${h} but got pad ${u}.`));const m={x:d},g={filterSize:t,strides:n,pad:u,dimRoundingMode:h};let y=s.BV.runKernel(a.Jh,m,g);return y=(0,o.p)(y,p.dtype),f?(0,c.X)(y,[y.shape[1],y.shape[2],y.shape[3]]):y}})},1749:(e,t,n)=>{"use strict";n.d(t,{u:()=>c});var s=n(7097),a=n(9121),r=n(3740),i=n(569),o=n(2271),l=n(2668),u=n(4968);const c=(0,l.op)({avgPool3d_:function(e,t,n,l,c,h="NDHWC"){const p=(0,r._1)(e,"x","avgPool3d","float32");let d=p,f=!1;4===p.rank&&(f=!0,d=(0,u.X)(p,[1,p.shape[0],p.shape[1],p.shape[2],p.shape[3]])),i.hu(5===d.rank,(()=>`Error in avgPool3d: x must be rank 5 but got rank ${d.rank}.`)),i.hu("NDHWC"===h,(()=>`Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${h}`)),null!=c&&i.hu(i.GN(l),(()=>`Error in avgPool3d: pad must be an integer when using, dimRoundingMode ${c} but got pad ${l}.`));const m={x:d},g={filterSize:t,strides:n,pad:l,dimRoundingMode:c,dataFormat:h};let y=s.BV.runKernel(a._k,m,g);return y=(0,o.p)(y,d.dtype),f?(0,u.X)(y,[y.shape[1],y.shape[2],y.shape[3],y.shape[4]]):y}})},3591:(e,t,n)=>{"use strict";n.d(t,{YB:()=>a,Vh:()=>r,kz:()=>i,rv:()=>o,lB:()=>l,Q3:()=>u,LJ:()=>c,sY:()=>h});var s=n(569);function a(e,t){for(let n=0;n<e.length;++n)if(e[e.length-n-1]!==t-1-n)return!1;return!0}function r(e,t,n){const s=e.length+t.length,a=[];let r=0,i=0;for(let o=0;o<s;o++)-1===n.indexOf(o)?a.push(e[r++]):a.push(t[i++]);return a}function i(e,t){const n=[],s=e.length;for(let a=0;a<s;a++)-1===t.indexOf(a)&&n.push(e[a]);return[n,t.map((t=>e[t]))]}function o(e,t){return r(e,t.map((e=>1)),t)}function l(e,t,n){s.hu(a(t,n),(()=>`${e} supports only inner-most axes for now. Got axes ${t} and rank-${n} input.`))}function u(e,t){if(a(e,t))return null;const n=[];for(let s=0;s<t;++s)-1===e.indexOf(s)&&n.push(s);return e.forEach((e=>n.push(e))),n}function c(e){return e.map(((e,t)=>[t,e])).sort(((e,t)=>e[1]-t[1])).map((e=>e[0]))}function h(e,t){const n=[];for(let s=t-e;s<t;++s)n.push(s);return n}},8441:(e,t,n)=>{"use strict";n.d(t,{E:()=>o});var s=n(7097),a=n(9121),r=n(3740),i=n(569);const o=(0,n(2668).op)({batchToSpaceND_:function(e,t,n){const o=(0,r._1)(e,"x","batchToSpaceND"),l=t.reduce(((e,t)=>e*t));i.hu(o.rank>=1+t.length,(()=>`input rank is ${o.rank} but should be > than blockShape.length ${t.length}`)),i.hu(n.length===t.length,(()=>`crops.length is ${n.length} but should be equal to blockShape.length  ${t.length}`)),i.hu(o.shape[0]%l==0,(()=>`input tensor batch is ${o.shape[0]} but is not divisible by the product of the elements of blockShape ${t.join(" * ")} === ${l}`));const u={x:o},c={blockShape:t,crops:n};return s.BV.runKernel(a.zw,u,c)}})},7505:(e,t,n)=>{"use strict";n.d(t,{t:()=>l});var s=n(7097),a=n(9121),r=n(3740),i=n(569),o=n(4968);const l=(0,n(2668).op)({batchNorm_:function(e,t,n,l,u,c){null==c&&(c=.001);const h=(0,r._1)(e,"x","batchNorm"),p=(0,r._1)(t,"mean","batchNorm"),d=(0,r._1)(n,"variance","batchNorm");let f,m;null!=u&&(f=(0,r._1)(u,"scale","batchNorm")),null!=l&&(m=(0,r._1)(l,"offset","batchNorm")),i.hu(p.rank===d.rank,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),i.hu(null==m||p.rank===m.rank,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),i.hu(null==f||p.rank===f.rank,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));const g={x:function(e){let t;return t=0===e.rank||1===e.rank?(0,o.X)(e,[1,1,1,e.size]):2===e.rank?(0,o.X)(e,[1,1,e.shape[0],e.shape[1]]):3===e.rank?(0,o.X)(e,[1,e.shape[0],e.shape[1],e.shape[2]]):e,t}(h),scale:f,offset:m,mean:p,variance:d},y={varianceEpsilon:c},b=s.BV.runKernel(a.sH,g,y);return(0,o.X)(b,h.shape)}})},3865:(e,t,n)=>{"use strict";n.d(t,{y:()=>o});var s=n(7097),a=n(9121),r=n(3740),i=n(569);const o=(0,n(2668).op)({bincount_:function(e,t,n){const o=(0,r._1)(e,"x","bincount"),l=(0,r._1)(t,"weights","bincount");i.hu("int32"===o.dtype,(()=>`Error in bincount: input dtype must be int32, but got ${o.dtype}`)),i.hu(n>=0,(()=>`size must be non-negative, but got ${n}.`)),i.hu(l.size===o.size||0===l.size,(()=>`Error in bincount: weights must have the same size as input or0-length, but got input shape: ${o.shape}, weights shape: ${l.shape}.`));const u={x:o,weights:l},c={size:n};return s.BV.runKernel(a.zv,u,c)}})},8247:(e,t,n)=>{"use strict";n.d(t,{U:()=>u});var s=n(7097),a=n(9121),r=n(3740),i=n(8723),o=n(2668),l=n(4968);const u=(0,o.op)({broadcastTo_:function(e,t){let n=(0,r._1)(e,"broadcastTo","x");const o=n.shape;if(t.some((e=>!(e>0)||e%1!=0)))throw new Error(`broadcastTo(): Invalid broadcast shape [${t}].`);if(t.length<n.rank)throw new Error(`broadcastTo(): shape.length=${t.length} < input.rank=${n.rank}.`);if(t.length>n.rank){const e=n.shape.slice();for(;e.length<t.length;)e.unshift(1);n=(0,l.X)(n,e)}const u=n.shape,c=Array.from(t);for(let e=t.length-1;e>=0;e--)if(u[e]===t[e])c[e]=1;else if(1!==n.shape[e])throw new Error(`broadcastTo(): [${o}] cannot be broadcast to [${t}].`);if(0===c.map(((e,t)=>e>1?t:-1)).filter((e=>e>=0)).length)return(0,i.d)(n);const h={x:n},p={reps:c};return s.BV.runKernel(a.n9,h,p)}})},2200:(e,t,n)=>{"use strict";function s(e,t){const n=e.length,s=[];for(let a=0;a<n;a++){const r=n-1-a,i=e[r]||1;(t[t.length-1-a]||1)>1&&1===i&&s.unshift(r)}return s}function a(e,t){const n=[];for(let s=0;s<t.length;s++){const a=e[e.length-s-1],r=t.length-s-1,i=t[r];(null==a||1===a&&i>1)&&n.unshift(r)}return n}function r(e,t){const n=[],s=Math.max(e.length,t.length);for(let a=0;a<s;a++){let s=e[e.length-a-1];null==s&&(s=1);let r=t[t.length-a-1];if(null==r&&(r=1),1===s)n.unshift(r);else if(1===r)n.unshift(s);else{if(s!==r)throw Error(`Operands could not be broadcast together with shapes ${e} and ${t}.`);n.unshift(s)}}return n}n.d(t,{XF:()=>s,RR:()=>a,$N:()=>r})},2657:(e,t,n)=>{"use strict";n.d(t,{f:()=>r});var s=n(4077),a=n(569);function r(e,t="float32",n){return t=t||"float32",a.Mu(e),new s.YD(e,t,n)}},2271:(e,t,n)=>{"use strict";n.d(t,{p:()=>o});var s=n(7097),a=n(9121),r=n(3740),i=n(569);const o=(0,n(2668).op)({cast_:function(e,t){const n=(0,r._1)(e,"x","cast");if(!i.LP(t))throw new Error(`Failed to cast to unknown dtype ${t}`);if("string"===t&&"string"!==n.dtype||"string"!==t&&"string"===n.dtype)throw new Error("Only strings can be casted to strings");const o={x:n},l={dtype:t};return s.BV.runKernel(a.RF,o,l)}})},6825:(e,t,n)=>{"use strict";n.d(t,{m:()=>i});var s=n(7097),a=n(9121),r=n(3740);const i=(0,n(2668).op)({ceil_:function(e){const t={x:(0,r._1)(e,"x","ceil")};return s.BV.runKernel(a.gJ,t)}})},2279:(e,t,n)=>{"use strict";n.d(t,{i:()=>o});var s=n(7097),a=n(9121),r=n(3740),i=n(569);const o=(0,n(2668).op)({clipByValue_:function(e,t,n){const o=(0,r._1)(e,"x","clipByValue");i.hu(t<=n,(()=>`Error in clip: min (${t}) must be less than or equal to max (${n}).`));const l={x:o},u={clipValueMin:t,clipValueMax:n};return s.BV.runKernel(a.xn,l,u)}})},8723:(e,t,n)=>{"use strict";n.d(t,{d:()=>i});var s=n(7097),a=n(9121),r=n(3740);const i=(0,n(2668).op)({clone_:function(e){const t={x:(0,r._1)(e,"x","clone","string_or_numeric")};return s.BV.runKernel(a.iJ,t)}})},1661:(e,t,n)=>{"use strict";n.d(t,{P:()=>o});var s=n(7097),a=n(9121),r=n(3740),i=n(569);const o=(0,n(2668).op)({complex_:function(e,t){const n=(0,r._1)(e,"real","complex"),o=(0,r._1)(t,"imag","complex");i.k5(n.shape,o.shape,`real and imag shapes, ${n.shape} and ${o.shape}, must match in call to tf.complex().`);const l={real:n,imag:o};return s.BV.runKernel(a.Zz,l)}})},6884:(e,t,n)=>{"use strict";n.d(t,{z:()=>l});var s=n(7097),a=n(9121),r=n(3740),i=n(569),o=n(8723);const l=(0,n(2668).op)({concat_:function(e,t=0){(0,i.hu)(e.length>=1,(()=>"Pass at least one tensor to concat"));const n=(0,r.sI)(e,"tensors","concat","string_or_numeric");if("complex64"===n[0].dtype&&n.forEach((e=>{if("complex64"!==e.dtype)throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${e.dtype}. `)})),1===n.length)return(0,o.d)(n[0]);const l=n,u={axis:t};return s.BV.runKernel(a.Eh,l,u)}})},1355:(e,t,n)=>{"use strict";n.d(t,{P:()=>u});var s=n(3740),a=n(569),r=n(4794),i=n(2582),o=n(2668),l=n(4968);const u=(0,o.op)({conv1d_:function(e,t,n,o,u="NWC",c=1,h){const p=(0,s._1)(e,"x","conv1d"),d=(0,s._1)(t,"filter","conv1d");let f=p,m=!1;2===p.rank&&(m=!0,f=(0,l.X)(p,[1,p.shape[0],p.shape[1]])),a.hu(3===f.rank,(()=>`Error in conv1d: input must be rank 3, but got rank ${f.rank}.`)),a.hu(3===d.rank,(()=>`Error in conv1d: filter must be rank 3, but got rank ${d.rank}.`)),null!=h&&a.hu(a.GN(o),(()=>`Error in conv1d: pad must be an integer when using, dimRoundingMode ${h} but got pad ${o}.`)),a.hu(f.shape[2]===d.shape[1],(()=>`Error in conv1d: depth of input (${f.shape[2]}) must match input depth for filter ${d.shape[1]}.`)),a.hu(i.jT(n,c),(()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${n} and dilation '${c}'`)),a.hu("NWC"===u,(()=>`Error in conv1d: got dataFormat of ${u} but only NWC is currently supported.`));const g=(0,l.X)(d,[1,d.shape[0],d.shape[1],d.shape[2]]),y=(0,l.X)(f,[f.shape[0],1,f.shape[1],f.shape[2]]),b=[1,n],x=[1,c],v=(0,r.T)(y,g,b,o,"NHWC",x,h);return m?(0,l.X)(v,[v.shape[2],v.shape[3]]):(0,l.X)(v,[v.shape[0],v.shape[2],v.shape[3]])}})},4794:(e,t,n)=>{"use strict";n.d(t,{T:()=>c});var s=n(7097),a=n(9121),r=n(3740),i=n(569),o=n(2582),l=n(2668),u=n(4968);const c=(0,l.op)({conv2d_:function(e,t,n,l,c="NHWC",h=[1,1],p){const d=(0,r._1)(e,"x","conv2d"),f=(0,r._1)(t,"filter","conv2d");let m=d,g=!1;3===d.rank&&(g=!0,m=(0,u.X)(d,[1,d.shape[0],d.shape[1],d.shape[2]])),i.hu(4===m.rank,(()=>`Error in conv2d: input must be rank 4, but got rank ${m.rank}.`)),i.hu(4===f.rank,(()=>`Error in conv2d: filter must be rank 4, but got rank ${f.rank}.`)),null!=p&&i.hu(i.GN(l),(()=>`Error in conv2d: pad must be an integer when using, dimRoundingMode ${p} but got pad ${l}.`));const y="NHWC"===c?m.shape[3]:m.shape[1];i.hu(y===f.shape[2],(()=>`Error in conv2d: depth of input (${y}) must match input depth for filter ${f.shape[2]}.`)),i.hu(o.jT(n,h),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${h}'`));const b={x:m,filter:f},x={strides:n,pad:l,dataFormat:c,dilations:h,dimRoundingMode:p},v=s.BV.runKernel(a.mh,b,x);return g?(0,u.X)(v,[v.shape[1],v.shape[2],v.shape[3]]):v}})},6013:(e,t,n)=>{"use strict";n.d(t,{p:()=>l});var s=n(7097),a=n(9121),r=n(569),i=n(2668),o=n(4968);const l=(0,i.op)({conv2DBackpropFilter_:function(e,t,n,i,l,u="NHWC",c){let h=e;3===e.rank&&(h=(0,o.X)(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let p=t;3===p.rank&&(p=(0,o.X)(t,[1,t.shape[0],t.shape[1],t.shape[2]])),r.hu(4===h.rank,(()=>`Error in conv2dDerFilter: input must be rank 4, but got shape ${h.shape}.`)),r.hu(4===p.rank,(()=>`Error in conv2dDerFilter: dy must be rank 4, but got shape ${p.shape}.`)),r.hu(4===n.length,(()=>`Error in conv2dDerFilter: filterShape must be length 4, but got ${n}.`));const d="NHWC"===u?h.shape[3]:h.shape[1],f="NHWC"===u?p.shape[3]:p.shape[1];r.hu(d===n[2],(()=>`Error in conv2dDerFilter: depth of input ${d}) must match input depth in filter (${n[2]}.`)),r.hu(f===n[3],(()=>`Error in conv2dDerFilter: depth of dy (${f}) must match output depth for filter (${n[3]}).`)),null!=c&&r.hu(r.GN(l),(()=>`Error in conv2dDerFilter: pad must be an integer when using, dimRoundingMode ${c} but got pad ${l}.`));const m={x:h,dy:p},g={strides:i,pad:l,dataFormat:u,dimRoundingMode:c,filterShape:n};return s.BV.runKernel(a.wU,m,g)}})},9832:(e,t,n)=>{"use strict";n.d(t,{_:()=>l});var s=n(7097),a=n(9121),r=n(569),i=n(2668),o=n(4968);const l=(0,i.op)({conv2DBackpropInput_:function(e,t,n,i,l,u="NHWC",c){r.hu(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let h=e,p=t,d=!1;3===t.rank&&(d=!0,p=(0,o.X)(t,[1,t.shape[0],t.shape[1],t.shape[2]]),h=[1,e[0],e[1],e[2]]),r.hu(4===h.length,(()=>`Error in conv2dDerInput: inShape must be length 4, but got length ${h.length}.`)),r.hu(4===p.rank,(()=>`Error in conv2dDerInput: dy must be rank 4, but got rank ${p.rank}`)),r.hu(4===n.rank,(()=>`Error in conv2dDerInput: filter must be rank 4, but got rank ${n.rank}`));const f="NHWC"===u?h[3]:h[1],m="NHWC"===u?p.shape[3]:p.shape[1];r.hu(f===n.shape[2],(()=>`Error in conv2dDerInput: depth of input (${f}) must match input depth for filter ${n.shape[2]}.`)),r.hu(m===n.shape[3],(()=>`Error in conv2dDerInput: depth of output (${m}) must match output depth for filter ${n.shape[3]}.`)),null!=c&&r.hu(r.GN(l),(()=>`Error in conv2dDerInput: pad must be an integer when using, dimRoundingMode ${c} but got pad ${l}.`));const g={dy:p,filter:n},y={strides:i,pad:l,dataFormat:u,dimRoundingMode:c,inputShape:h},b=s.BV.runKernel(a.wm,g,y);return d?(0,o.X)(b,[b.shape[1],b.shape[2],b.shape[3]]):b}})},1405:(e,t,n)=>{"use strict";n.d(t,{b:()=>r});var s=n(3740),a=n(9832);const r=(0,n(2668).op)({conv2dTranspose_:function(e,t,n,r,i,o){const l=(0,s._1)(e,"x","conv2dTranspose"),u=(0,s._1)(t,"filter","conv2dTranspose");return(0,a._)(n,l,u,r,i,"NHWC",o)}})},473:(e,t,n)=>{"use strict";n.d(t,{p:()=>c});var s=n(7097),a=n(9121),r=n(3740),i=n(569),o=n(2582),l=n(2668),u=n(4968);const c=(0,l.op)({conv3d_:function(e,t,n,l,c="NDHWC",h=[1,1,1]){const p=(0,r._1)(e,"x","conv3d"),d=(0,r._1)(t,"filter","conv3d");let f=p,m=!1;4===p.rank&&(m=!0,f=(0,u.X)(p,[1,p.shape[0],p.shape[1],p.shape[2],p.shape[3]])),i.hu(5===f.rank,(()=>`Error in conv3d: input must be rank 5, but got rank ${f.rank}.`)),i.hu(5===d.rank,(()=>`Error in conv3d: filter must be rank 5, but got rank ${d.rank}.`)),i.hu(f.shape[4]===d.shape[3],(()=>`Error in conv3d: depth of input (${f.shape[4]}) must match input depth for filter ${d.shape[3]}.`)),i.hu((0,o.jT)(n,h),(()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${n} and dilations '${h}'`)),i.hu("NDHWC"===c,(()=>`Error in conv3d: got dataFormat of ${c} but only NDHWC is currently supported.`));const g={x:f,filter:d},y={strides:n,pad:l,dataFormat:c,dilations:h},b=s.BV.runKernel(a.x1,g,y);return m?(0,u.X)(b,[b.shape[1],b.shape[2],b.shape[3],b.shape[4]]):b}})},7594:(e,t,n)=>{"use strict";n.d(t,{_:()=>l});var s=n(7097),a=n(9121),r=n(569),i=n(2668),o=n(4968);const l=(0,i.op)({conv3DBackpropInput_:function(e,t,n,i,l){r.hu(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let u=e,c=t,h=!1;4===t.rank&&(h=!0,c=(0,o.X)(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]),u=[1,e[0],e[1],e[2],e[3]]);const p=u[4],d=c.shape[4];r.hu(5===u.length,(()=>`Error in conv3dDerInput: inShape must be length 5, but got length ${u.length}.`)),r.hu(5===c.rank,(()=>`Error in conv3dDerInput: dy must be rank 5, but got rank ${c.rank}`)),r.hu(5===n.rank,(()=>`Error in conv3dDerInput: filter must be rank 5, but got rank ${n.rank}`)),r.hu(p===n.shape[3],(()=>`Error in conv3dDerInput: depth of input (${p}) must match input depth for filter ${n.shape[3]}.`)),r.hu(d===n.shape[4],(()=>`Error in conv3dDerInput: depth of output (${d}) must match output depth for filter ${n.shape[4]}.`));const f={dy:c,filter:n},m={pad:l,strides:i,inputShape:u},g=s.BV.runKernel(a.ik,f,m);return h?(0,o.X)(g,[g.shape[1],g.shape[2],g.shape[3],g.shape[4]]):g}})},2582:(e,t,n)=>{"use strict";function s(e,t,n,s,a="NHWC",r){return i(e,[...t,e[3]],n,r,s,null,null,m(a))}function a(e,t,n,s,a,r,o="channelsLast"){const[l,c]=u(t);let h;if("channelsLast"===o)h=[l,c,e[3],e[3]];else{if("channelsFirst"!==o)throw new Error(`Unknown dataFormat ${o}`);h=[l,c,e[1],e[1]]}return i(e,h,n,s,a,r,!1,o)}function r(e,t,n,s,a,r,i="NDHWC"){const[l,u,h]=c(t);let p,d;if("NDHWC"===i)d="channelsLast",p=[l,u,h,e[4],e[4]];else{if("NCDHW"!==i)throw new Error(`Unknown dataFormat ${i}`);d="channelsFirst",p=[l,u,h,e[1],e[1]]}return o(e,p,n,s,a,!1,d,r)}function i(e,t,n,s,a,r,i=!1,o="channelsLast"){let[c,d,f,m]=[-1,-1,-1,-1];if("channelsLast"===o)[c,d,f,m]=e;else{if("channelsFirst"!==o)throw new Error(`Unknown dataFormat ${o}`);[c,m,d,f]=e}const[g,y,,b]=t,[x,v]=u(n),[k,w]=u(s),N=h(g,k),I=h(y,w),{padInfo:S,outHeight:T,outWidth:C}=function(e,t,n,s,a,r,i,o,u){let c,h,d;if("number"==typeof e){c={top:e,bottom:e,left:e,right:e,type:0===e?"VALID":"NUMBER"};const a=function(e,t,n,s,a){null==s&&(s=l(e,t,n));const r=e[1];return[p((e[0]-t+2*s)/n+1,a),p((r-t+2*s)/n+1,a)]}([t,n],r,s,e,o);h=a[0],d=a[1]}else if("same"===e){h=Math.ceil(t/s),d=Math.ceil(n/a);const e=Math.max(0,(h-1)*s+r-t),o=Math.max(0,(d-1)*a+i-n),l=Math.floor(e/2),u=e-l,p=Math.floor(o/2);c={top:l,bottom:u,left:p,right:o-p,type:"SAME"}}else if("valid"===e)c={top:0,bottom:0,left:0,right:0,type:"VALID"},h=Math.ceil((t-r+1)/s),d=Math.ceil((n-i+1)/a);else{if("object"!=typeof e)throw Error(`Unknown padding parameter: ${e}`);{const l="channelsLast"===u?e[1][0]:e[2][0],f="channelsLast"===u?e[1][1]:e[2][1],m="channelsLast"===u?e[2][0]:e[3][0],g="channelsLast"===u?e[2][1]:e[3][1];c={top:l,bottom:f,left:m,right:g,type:0===l&&0===f&&0===m&&0===g?"VALID":"EXPLICIT"},h=p((t-r+l+f)/s+1,o),d=p((n-i+m+g)/a+1,o)}}return{padInfo:c,outHeight:h,outWidth:d}}(a,d,f,x,v,N,I,r,o),$=i?b*m:b;let A;return"channelsFirst"===o?A=[c,$,T,C]:"channelsLast"===o&&(A=[c,T,C,$]),{batchSize:c,dataFormat:o,inHeight:d,inWidth:f,inChannels:m,outHeight:T,outWidth:C,outChannels:$,padInfo:S,strideHeight:x,strideWidth:v,filterHeight:g,filterWidth:y,effectiveFilterHeight:N,effectiveFilterWidth:I,dilationHeight:k,dilationWidth:w,inShape:e,outShape:A,filterShape:t}}function o(e,t,n,s,a,r=!1,i="channelsLast",o){let[u,d,f,m,g]=[-1,-1,-1,-1,-1];if("channelsLast"===i)[u,d,f,m,g]=e;else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);[u,g,d,f,m]=e}const[y,b,x,,v]=t,[k,w,N]=c(n),[I,S,T]=c(s),C=h(y,I),$=h(b,S),A=h(x,T),{padInfo:E,outDepth:_,outHeight:R,outWidth:F}=function(e,t,n,s,a,r,i,o,u,c,h){let d,f,m,g;if("number"==typeof e){d={top:e,bottom:e,left:e,right:e,front:e,back:e,type:0===e?"VALID":"NUMBER"};const r=function(e,t,n,s,a,r){null==a&&(a=l(e,t,s));const i=e[1],o=e[2];return[p((e[0]-t+2*a)/s+1,r),p((i-t+2*a)/s+1,r),p((o-t+2*a)/s+1,r),1]}([t,n,s,1],o,0,a,e,h);f=r[0],m=r[1],g=r[2]}else if("same"===e){f=Math.ceil(t/a),m=Math.ceil(n/r),g=Math.ceil(s/i);const e=(f-1)*a+o-t,l=(m-1)*r+u-n,h=(g-1)*i+c-s,p=Math.floor(e/2),y=e-p,b=Math.floor(l/2),x=l-b,v=Math.floor(h/2);d={top:b,bottom:x,left:v,right:h-v,front:p,back:y,type:"SAME"}}else{if("valid"!==e)throw Error(`Unknown padding parameter: ${e}`);d={top:0,bottom:0,left:0,right:0,front:0,back:0,type:"VALID"},f=Math.ceil((t-o+1)/a),m=Math.ceil((n-u+1)/r),g=Math.ceil((s-c+1)/i)}return{padInfo:d,outDepth:f,outHeight:m,outWidth:g}}(a,d,f,m,k,w,N,C,$,A,o),D=r?v*g:v;let O;return"channelsFirst"===i?O=[u,D,_,R,F]:"channelsLast"===i&&(O=[u,_,R,F,D]),{batchSize:u,dataFormat:i,inDepth:d,inHeight:f,inWidth:m,inChannels:g,outDepth:_,outHeight:R,outWidth:F,outChannels:D,padInfo:E,strideDepth:k,strideHeight:w,strideWidth:N,filterDepth:y,filterHeight:b,filterWidth:x,effectiveFilterDepth:C,effectiveFilterHeight:$,effectiveFilterWidth:A,dilationDepth:I,dilationHeight:S,dilationWidth:T,inShape:e,outShape:O,filterShape:t}}function l(e,t,n,s=1){const a=h(t,s);return Math.floor((e[0]*(n-1)-n+a)/2)}function u(e){return"number"==typeof e?[e,e,e]:2===e.length?[e[0],e[1],1]:e}function c(e){return"number"==typeof e?[e,e,e]:e}function h(e,t){return t<=1?e:e+(e-1)*(t-1)}function p(e,t){if(!t)return Math.trunc(e);switch(t){case"round":return Math.round(e);case"ceil":return Math.ceil(e);case"floor":return Math.floor(e);default:throw new Error(`Unknown roundingMode ${t}`)}}function d(e){const[t,n,s]=u(e);return 1===t&&1===n&&1===s}function f(e,t){return d(e)||d(t)}function m(e){if("NHWC"===e)return"channelsLast";if("NCHW"===e)return"channelsFirst";throw new Error(`Unknown dataFormat ${e}`)}n.d(t,{Rf:()=>s,Xw:()=>a,pl:()=>r,Ix:()=>i,jw:()=>o,aO:()=>l,I0:()=>d,jT:()=>f,sl:()=>m})},173:(e,t,n)=>{"use strict";n.d(t,{m:()=>i});var s=n(7097),a=n(9121),r=n(3740);const i=(0,n(2668).op)({cos_:function(e){const t={x:(0,r._1)(e,"x","cos")};return s.BV.runKernel(a.mc,t)}})},2699:(e,t,n)=>{"use strict";n.d(t,{f:()=>i});var s=n(7097),a=n(9121),r=n(3740);const i=(0,n(2668).op)({cosh_:function(e){const t={x:(0,r._1)(e,"x","cosh")};return s.BV.runKernel(a.TR,t)}})},7405:(e,t,n)=>{"use strict";n.d(t,{z:()=>i});var s=n(7097),a=n(9121),r=n(3740);const i=(0,n(2668).op)({cumsum_:function(e,t=0,n=!1,i=!1){const o={x:(0,r._1)(e,"x","cumsum")},l={axis:t,exclusive:n,reverse:i};return s.BV.runKernel(a.iH,o,l)}})},5746:(e,t,n)=>{"use strict";n.d(t,{p:()=>o});var s=n(7097),a=n(9121),r=n(3740),i=n(569);const o=(0,n(2668).op)({denseBincount_:function(e,t,n,o=!1){const l=(0,r._1)(e,"x","denseBincount"),u=(0,r._1)(t,"weights","denseBincount");i.hu("int32"===l.dtype,(()=>`Error in denseBincount: input dtype must be int32, but got ${l.dtype}`)),i.hu(l.rank<=2,(()=>`Error in denseBincount: input must be at most rank 2, but got rank ${l.rank}.`)),i.hu(n>=0,(()=>`size must be non-negative, but got ${n}.`)),i.hu(u.size===l.size||0===u.size,(()=>`Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${l.shape}, weights shape: ${u.shape}.`));const c={x:l,weights:u},h={size:n,binaryOutput:o};return s.BV.runKernel(a.QR,c,h)}})},9112:(e,t,n)=>{"use strict";n.d(t,{n:()=>o});var s=n(7097),a=n(9121),r=n(3740),i=n(569);const o=(0,n(2668).op)({depthToSpace_:function(e,t,n="NHWC"){const o=(0,r._1)(e,"x","depthToSpace"),l="NHWC"===n?o.shape[1]:o.shape[2],u="NHWC"===n?o.shape[2]:o.shape[3],c="NHWC"===n?o.shape[3]:o.shape[1];i.hu(l*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${l} and ${t}  for depthToSpace with input shape\n    ${o.shape}`)),i.hu(u*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${u} and ${t} for depthToSpace with input shape\n        ${o.shape}`)),i.hu(c%(t*t)==0,(()=>`Dimension size must be evenly divisible by ${t*t} but is ${c} for depthToSpace with input shape ${o.shape}`));const h={x:o},p={blockSize:t,dataFormat:n};return s.BV.runKernel(a.T0,h,p)}})},4718:(e,t,n)=>{"use strict";n.d(t,{B:()=>u});var s=n(7097),a=n(9121),r=n(3740),i=n(569),o=n(2668),l=n(4968);const u=(0,o.op)({depthwiseConv2d_:function(e,t,n,o,u="NHWC",c=[1,1],h){const p=(0,r._1)(e,"x","depthwiseConv2d"),d=(0,r._1)(t,"filter","depthwiseConv2d");let f=p,m=!1;3===p.rank&&(m=!0,f=(0,l.X)(p,[1,p.shape[0],p.shape[1],p.shape[2]])),i.hu(4===f.rank,(()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${f.rank}.`)),i.hu(4===d.rank,(()=>`Error in depthwiseConv2d: filter must be rank 4, but got rank ${d.rank}.`)),i.hu(f.shape[3]===d.shape[2],(()=>`Error in depthwiseConv2d: number of input channels (${f.shape[3]}) must match the inChannels dimension in filter ${d.shape[2]}.`)),null!=h&&i.hu(i.GN(o),(()=>`Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode ${h} but got pad ${o}.`));const g={x:f,filter:d},y={strides:n,pad:o,dataFormat:u,dilations:c,dimRoundingMode:h},b=s.BV.runKernel(a.ci,g,y);return m?(0,l.X)(b,[b.shape[1],b.shape[2],b.shape[3]]):b}})},8098:(e,t,n)=>{"use strict";n.d(t,{z:()=>o});var s=n(7097),a=n(9121),r=n(2668),i=n(4968);const o=(0,r.op)({depthwiseConv2dNativeBackpropFilter_:function(e,t,n,r,o,l=[1,1],u){let c=e;3===e.rank&&(c=(0,i.X)(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let h=t;3===h.rank&&(h=(0,i.X)(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const p={x:c,dy:h},d={strides:r,pad:o,dimRoundingMode:u,dilations:l,filterShape:n};return s.BV.runKernel(a.sL,p,d)}})},4375:(e,t,n)=>{"use strict";n.d(t,{v:()=>o});var s=n(7097),a=n(9121),r=n(2668),i=n(4968);const o=(0,r.op)({depthwiseConv2dNativeBackpropInput_:function(e,t,n,r,o,l=[1,1],u){let c=t,h=!1;3===t.rank&&(h=!0,c=(0,i.X)(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const p={dy:c,filter:n},d={strides:r,pad:o,dimRoundingMode:u,dilations:l,inputShape:e},f=s.BV.runKernel(a.y7,p,d);return h?(0,i.X)(f,[f.shape[1],f.shape[2],f.shape[3]]):f}})},557:(e,t,n)=>{"use strict";n.d(t,{W:()=>u});var s=n(7097),a=n(9121),r=n(3740),i=n(569),o=n(2668),l=n(4968);const u=(0,o.op)({dilation2d_:function(e,t,n,o,u=[1,1],c="NHWC"){const h=(0,r._1)(e,"x","dilation2d"),p=(0,r._1)(t,"filter","dilation2d");i.hu(3===h.rank||4===h.rank,(()=>`Error in dilation2d: input must be rank 3 or 4, but got rank ${h.rank}.`)),i.hu(3===p.rank,(()=>`Error in dilation2d: filter must be rank 3, but got rank ${p.rank}.`)),i.hu("NHWC"===c,(()=>`Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${c}`));let d=h,f=!1;3===h.rank&&(d=(0,l.X)(h,[1,h.shape[0],h.shape[1],h.shape[2]]),f=!0);const m={x:d,filter:p},g={strides:n,pad:o,dilations:u},y=s.BV.runKernel(a.p4,m,g);return f?(0,l.X)(y,[y.shape[1],y.shape[2],y.shape[3]]):y}})},1274:(e,t,n)=>{"use strict";n.d(t,{h:()=>l});var s=n(7097),a=n(9121),r=n(747),i=n(3740),o=n(9165);const l=(0,n(2668).op)({div_:function(e,t){let n=(0,i._1)(e,"a","div"),l=(0,i._1)(t,"b","div");if([n,l]=(0,r.makeTypesMatch)(n,l),"int32"===n.dtype&&"int32"===l.dtype)return(0,o.q)(n,l);const u={a:n,b:l};return s.BV.runKernel(a.oH,u,{})}})},9322:(e,t,n)=>{"use strict";n.d(t,{N:()=>c});var s=n(747),a=n(3740),r=n(1274),i=n(6477),o=n(2668),l=n(5912),u=n(6577);const c=(0,o.op)({divNoNan_:function(e,t){let n=(0,a._1)(e,"a","div"),o=(0,a._1)(t,"b","div");[n,o]=(0,s.makeTypesMatch)(n,o);const c=(0,r.h)(n,o),h=(0,u.P)(c),p=(0,i.D)(o,h);return(0,l.a)(p,h,c)}})},548:(e,t,n)=>{"use strict";n.d(t,{A:()=>l});var s=n(3740),a=n(569),r=n(8687),i=n(2668),o=n(4968);const l=(0,i.op)({dot_:function(e,t){const n=(0,s._1)(e,"t1","dot"),i=(0,s._1)(t,"t2","dot");a.hu(!(1!==n.rank&&2!==n.rank||1!==i.rank&&2!==i.rank),(()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${n.rank} and ${i.rank}.`));const l=1===n.rank?n.size:n.shape[1],u=1===i.rank?i.size:i.shape[0];if(a.hu(l===u,(()=>`Error in dot: inner dimensions of inputs must match, but got ${l} and ${u}.`)),1===n.rank&&1===i.rank){const e=(0,o.X)(n,[1,-1]),t=(0,o.X)(i,[-1,1]),s=(0,r.O)(e,t);return(0,o.X)(s,[])}if(1===n.rank&&2===i.rank){const e=(0,o.X)(n,[1,-1]),t=(0,o.X)(i,[i.shape[0],i.shape[1]]),s=(0,r.O)(e,t);return(0,o.X)(s,[s.size])}if(2===n.rank&&1===i.rank){const e=(0,o.X)(i,[-1,1]),t=(0,r.O)(n,e);return(0,o.X)(t,[t.size])}{const e=(0,o.X)(i,[i.shape[0],i.shape[1]]);return(0,r.O)(n,e)}}})},3233:(e,t,n)=>{"use strict";n.d(t,{p:()=>i});var s=n(7097),a=n(9121),r=n(3740);const i=(0,n(2668).op)({elu_:function(e){const t={x:(0,r._1)(e,"x","elu")};return s.BV.runKernel(a.SX,t)}})},6477:(e,t,n)=>{"use strict";n.d(t,{D:()=>l});var s=n(7097),a=n(9121),r=n(747),i=n(3740),o=n(2200);const l=(0,n(2668).op)({equal_:function(e,t){let n=(0,i._1)(e,"a","equal"),l=(0,i._1)(t,"b","equal");[n,l]=(0,r.makeTypesMatch)(n,l),(0,o.$N)(n.shape,l.shape);const u={a:n,b:l};return s.BV.runKernel(a.hd,u)}})},4650:(e,t,n)=>{"use strict";n.d(t,{q:()=>l});var s=n(7097),a=n(9121),r=n(3740),i=n(569),o=n(2271);const l=(0,n(2668).op)({erf_:function(e){let t=(0,r._1)(e,"x","erf");i.hu("int32"===t.dtype||"float32"===t.dtype,(()=>"Input dtype must be `int32` or `float32`.")),"int32"===t.dtype&&(t=(0,o.p)(t,"float32"));const n={x:t};return s.BV.runKernel(a.Om,n)}})},4842:(e,t,n)=>{"use strict";n.d(t,{Q:()=>i});var s=n(7097),a=n(9121),r=n(3740);const i=(0,n(2668).op)({exp_:function(e){const t={x:(0,r._1)(e,"x","exp")};return s.BV.runKernel(a.NE,t)}})},1300:(e,t,n)=>{"use strict";n.d(t,{d:()=>o});var s=n(7097),a=n(9121),r=n(3740),i=n(569);const o=(0,n(2668).op)({expandDims_:function(e,t=0){const n=(0,r._1)(e,"x","expandDims","string_or_numeric");i.hu(t<=n.rank,(()=>"Axis must be <= rank of the tensor"));const o={input:n},l={dim:t};return s.BV.runKernel(a.YF,o,l)}})},3426:(e,t,n)=>{"use strict";n.d(t,{t:()=>i});var s=n(7097),a=n(9121),r=n(3740);const i=(0,n(2668).op)({expm1_:function(e){const t={x:(0,r._1)(e,"x","expm1")};return s.BV.runKernel(a.Y0,t)}})},4006:(e,t,n)=>{"use strict";n.d(t,{h:()=>r});var s=n(7097),a=n(9121);function r(e,t,n){const r={shape:e,value:t,dtype:n};return s.BV.runKernel(a.de,{},r)}},6943:(e,t,n)=>{"use strict";n.d(t,{G:()=>i});var s=n(7097),a=n(9121),r=n(3740);const i=(0,n(2668).op)({floor_:function(e){const t={x:(0,r._1)(e,"x","floor")};return s.BV.runKernel(a.OR,t)}})},9165:(e,t,n)=>{"use strict";n.d(t,{q:()=>o});var s=n(7097),a=n(9121),r=n(747),i=n(3740);const o=(0,n(2668).op)({floorDiv_:function(e,t){let n=(0,i._1)(e,"a","floorDiv"),o=(0,i._1)(t,"b","floorDiv");[n,o]=(0,r.makeTypesMatch)(n,o);const l={a:n,b:o};return s.BV.runKernel(a.je,l)}})},4624:(e,t,n)=>{"use strict";n.r(t),n.d(t,{conv2d:()=>b,depthwiseConv2d:()=>w,matMul:()=>I});var s=n(7097),a=n(633),r=n(9121),i=n(747),o=n(3740),l=n(569),u=n(6407),c=n(2200),h=n(4794),p=n(6013),d=n(9832),f=n(2582),m=n(9323),g=n(2668),y=n(4968);const b=(0,g.op)({fusedConv2d_:function({x:e,filter:t,strides:n,pad:g,dataFormat:b="NHWC",dilations:x=[1,1],dimRoundingMode:v,bias:k,activation:w="linear",preluActivationWeights:N,leakyreluAlpha:I}){if(w=w||"linear",!1===(0,m.uy)(s.BV.state.gradientDepth,w)){let s=(0,h.T)(e,t,n,g,b,x,v);return null!=k&&(s=(0,u.I)(s,k)),(0,m.QH)(s,w,N,I)}const S=(0,o._1)(e,"x","conv2d"),T=(0,o._1)(t,"filter","conv2d");let C=S,$=!1;3===S.rank&&($=!0,C=(0,y.X)(S,[1,S.shape[0],S.shape[1],S.shape[2]])),l.hu(4===C.rank,(()=>`Error in fused conv2d: input must be rank 4, but got rank ${C.rank}.`)),l.hu(4===T.rank,(()=>`Error in fused conv2d: filter must be rank 4, but got rank ${T.rank}.`)),null!=v&&l.hu(l.GN(g),(()=>`Error in fused conv2d: pad must be an integer when using, dimRoundingMode ${v} but got pad ${g}.`)),l.hu(C.shape[3]===T.shape[2],(()=>`Error in conv2d: depth of input (${C.shape[3]}) must match input depth for filter ${T.shape[2]}.`)),l.hu(f.jT(n,x),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${x}'`)),l.hu("NHWC"===b,(()=>`Error in conv2d: got dataFormat of ${b} but only NHWC is currently supported.`));const A=f.Ix(C.shape,T.shape,n,x,g,v);let E,_;null!=k&&(E=(0,o._1)(k,"bias","fused conv2d"),[E]=(0,i.makeTypesMatch)(E,S),c.$N(A.outShape,E.shape)),null!=N&&(_=(0,o._1)(N,"prelu weights","fused conv2d"));const R=(e,t)=>{const[s,a,r,i]=t,o=(0,m.Fr)(e,r,w);l.hu(f.I0(x),(()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${x}'`));const u=[(0,d._)(a.shape,o,s,n,g),(0,p.p)(a,o,s.shape,n,g)];if(null!=i){const e=(0,m.pf)(i,o);u.push(e)}return u},F={x:C,filter:T,bias:E,preluActivationWeights:_},D={strides:n,pad:g,dataFormat:b,dilations:x,dimRoundingMode:v,activation:w,leakyreluAlpha:I};return null==k?(0,a.cb)(((e,t,n)=>{let a=s.BV.runKernel(r._V,F,D);return n([t,e,a]),$&&(a=(0,y.X)(a,[a.shape[1],a.shape[2],a.shape[3]])),{value:a,gradFunc:R}}))(C,T):(0,a.cb)(((e,t,n,a)=>{let i=s.BV.runKernel(r._V,F,D);return a([t,e,i,n]),$&&(i=(0,y.X)(i,[i.shape[1],i.shape[2],i.shape[3]])),{value:i,gradFunc:R}}))(C,T,E)}});var x=n(4718),v=n(8098),k=n(4375);const w=(0,g.op)({fusedDepthwiseConv2d_:function({x:e,filter:t,strides:n,pad:h,dataFormat:p="NHWC",dilations:d=[1,1],dimRoundingMode:g,bias:b,activation:w="linear",preluActivationWeights:N,leakyreluAlpha:I}){if(!1===(0,m.uy)(s.BV.state.gradientDepth,w)){let s=(0,x.B)(e,t,n,h,p,d,g);return null!=b&&(s=(0,u.I)(s,b)),(0,m.QH)(s,w,N,I)}const S=(0,o._1)(e,"x","depthwiseConv2d"),T=(0,o._1)(t,"filter","depthwiseConv2d");let C=S,$=!1;3===S.rank&&($=!0,C=(0,y.X)(S,[1,S.shape[0],S.shape[1],S.shape[2]])),l.hu(4===C.rank,(()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${C.rank}.`)),l.hu(4===T.rank,(()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${T.rank}.`)),l.hu(C.shape[3]===T.shape[2],(()=>`Error in fused depthwiseConv2d: number of input channels (${C.shape[3]}) must match the inChannels dimension in filter ${T.shape[2]}.`)),null==d&&(d=[1,1]),l.hu(f.jT(n,d),(()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${n} and dilations '${d}'`)),null!=g&&l.hu(l.GN(h),(()=>`Error in fused depthwiseConv2d: pad must be an integer when using dimRoundingMode ${g} but got pad ${h}.`));const A=f.Ix(C.shape,T.shape,n,d,h,g,!0);let E,_;null!=b&&(E=(0,o._1)(b,"bias","fused conv2d"),[E]=(0,i.makeTypesMatch)(E,S),c.$N(A.outShape,E.shape)),null!=N&&(_=(0,o._1)(N,"prelu weights","fused depthwiseConv2d"));const R=(e,t)=>{l.hu(f.I0(d),(()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${d}'`));const[s,a,r,i]=t,o=(0,m.Fr)(e,r,w),u=(0,k.v)(a.shape,o,s,n,h,d,g),c=(0,v.z)(a,o,s.shape,n,h,d,g);return null!=i?[u,c,(0,m.pf)(E,o)]:[u,c]},F={x:C,filter:T,bias:E,preluActivationWeights:_},D={strides:n,pad:h,dataFormat:p,dilations:d,dimRoundingMode:g,activation:w,leakyreluAlpha:I};return null==b?(0,a.cb)(((e,t,n)=>{let a=s.BV.runKernel(r.lu,F,D);return n([t,e,a]),$&&(a=(0,y.X)(a,[a.shape[1],a.shape[2],a.shape[3]])),{value:a,gradFunc:R}}))(C,T):(0,a.cb)(((e,t,n,a)=>{let i=s.BV.runKernel(r.lu,F,D);return a([t,e,i,n]),$&&(i=(0,y.X)(i,[i.shape[1],i.shape[2],i.shape[3]])),{value:i,gradFunc:R}}))(C,T,E)}});var N=n(8687);const I=(0,g.op)({fusedMatMul_:function({a:e,b:t,transposeA:n=!1,transposeB:h=!1,bias:p,activation:d="linear",preluActivationWeights:f,leakyreluAlpha:g}){if(!1===(0,m.uy)(s.BV.state.gradientDepth,d)){let s=(0,N.O)(e,t,n,h);return null!=p&&(s=(0,u.I)(s,p)),(0,m.QH)(s,d,f,g)}let b=(0,o._1)(e,"a","fused matMul"),x=(0,o._1)(t,"b","fused matMul");[b,x]=(0,i.makeTypesMatch)(b,x);const v=n?b.shape[b.rank-2]:b.shape[b.rank-1],k=h?x.shape[x.rank-1]:x.shape[x.rank-2],w=n?b.shape[b.rank-1]:b.shape[b.rank-2],I=h?x.shape[x.rank-2]:x.shape[x.rank-1],S=b.shape.slice(0,-2),T=x.shape.slice(0,-2),C=l.NA(S),$=l.NA(T);l.hu(b.rank>=2&&x.rank>=2&&b.rank===x.rank,(()=>`Error in fused matMul: inputs must have the same rank of at least 2, got ranks ${b.rank} and ${x.rank}.`)),l.hu(l.cO(S,T),(()=>`Error in fused matMul: outer dimensions (${S}) and (${T}) of Tensors with shapes ${b.shape} and ${x.shape} must match.`)),l.hu(v===k,(()=>`Error in fused matMul: inner shapes (${v}) and (${k}) of Tensors with shapes ${b.shape} and ${x.shape} and transposeA=${n} and transposeB=${h} must match.`));const A=b.shape.slice(0,-2).concat([w,I]),E=n?(0,y.X)(b,[C,v,w]):(0,y.X)(b,[C,w,v]),_=h?(0,y.X)(x,[$,I,k]):(0,y.X)(x,[$,k,I]);let R,F;null!=p&&(R=(0,o._1)(p,"bias","fused matMul"),[R]=(0,i.makeTypesMatch)(R,b),c.$N(A,R.shape)),null!=f&&(F=(0,o._1)(f,"prelu weights","fused matMul"));const D=(e,t)=>{const[s,a,r,i]=t,o=(0,m.Fr)((0,y.X)(e,r.shape),r,d);let l,u;return n||h?!n&&h?(l=(0,N.O)(o,a,!1,!1),u=(0,N.O)(o,s,!0,!1)):n&&!h?(l=(0,N.O)(a,o,!1,!0),u=(0,N.O)(s,o,!1,!1)):(l=(0,N.O)(a,o,!0,!0),u=(0,N.O)(o,s,!0,!0)):(l=(0,N.O)(o,a,!1,!0),u=(0,N.O)(s,o,!0,!1)),null!=p?[l,u,(0,m.pf)(i,o)]:[l,u]},O={a:E,b:_,bias:R,preluActivationWeights:F},M={transposeA:n,transposeB:h,activation:d,leakyreluAlpha:g};return null==p?(0,a.cb)(((e,t,n)=>{const a=s.BV.runKernel(r.us,O,M);return n([e,t,a]),{value:(0,y.X)(a,A),gradFunc:D}}))(E,_):(0,a.cb)(((e,t,n,a)=>{const i=s.BV.runKernel(r.us,O,M);return a([e,t,i,n]),{value:(0,y.X)(i,A),gradFunc:D}}))(E,_,R)}})},9323:(e,t,n)=>{"use strict";n.d(t,{Fr:()=>d,pf:()=>f,QH:()=>m,uy:()=>g});var s=n(2200),a=n(3233),r=n(9133),i=n(4841),o=n(8151),l=n(7409),u=n(3582),c=n(4968),h=n(1901),p=n(5475);function d(e,t,n){if(null==n||"linear"===n)return e;if("relu"===n)return(0,i.d)(e,(0,h.N)(t));throw new Error(`Cannot compute gradient for fused activation ${n}.`)}function f(e,t){let n=t;const a=s.RR(e.shape,t.shape);return a.length>0&&(n=(0,p.S)(n,a)),(0,c.X)(n,e.shape)}function m(e,t,n,s){if("linear"===t)return e;if("relu"===t)return(0,l.U)(e);if("elu"===t)return(0,a.p)(e);if("relu6"===t)return(0,u.b)(e);if("prelu"===t)return(0,o.A)(e,n);if("leakyrelu"===t)return(0,r.h)(e,s);throw new Error(`Unknown fused activation ${t}.`)}const g=(e,t)=>!(e>0)||"linear"===t},4926:(e,t,n)=>{"use strict";n.d(t,{I:()=>i});var s=n(7097),a=n(9121),r=n(3740);const i=(0,n(2668).op)({gather_:function(e,t,n=0,i=0){const o={x:(0,r._1)(e,"x","gather"),indices:(0,r._1)(t,"indices","gather","int32")},l={axis:n,batchDims:i};return s.BV.runKernel(a.qi,o,l)}})},7494:(e,t,n)=>{"use strict";n.d(t,{d:()=>i});var s=n(7097),a=n(9121),r=n(3740);const i=(0,n(2668).op)({gatherND_:function(e,t){const n=(0,r._1)(t,"indices","gatherND","int32"),i={params:(0,r._1)(e,"x","gatherND"),indices:n};return s.BV.runKernel(a.q1,i)}})},636:(e,t,n)=>{"use strict";n.d(t,{p:()=>l});var s=n(7097),a=n(9121),r=n(747),i=n(3740),o=n(2200);const l=(0,n(2668).op)({greater_:function(e,t){let n=(0,i._1)(e,"a","greater"),l=(0,i._1)(t,"b","greater");[n,l]=(0,r.makeTypesMatch)(n,l),(0,o.$N)(n.shape,l.shape);const u={a:n,b:l};return s.BV.runKernel(a.iZ,u)}})},7630:(e,t,n)=>{"use strict";n.d(t,{b:()=>l});var s=n(7097),a=n(9121),r=n(747),i=n(3740),o=n(2200);const l=(0,n(2668).op)({greaterEqual_:function(e,t){let n=(0,i._1)(e,"a","greaterEqual"),l=(0,i._1)(t,"b","greaterEqual");[n,l]=(0,r.makeTypesMatch)(n,l),(0,o.$N)(n.shape,l.shape);const u={a:n,b:l};return s.BV.runKernel(a.Ac,u)}})},4386:(e,t,n)=>{"use strict";n.d(t,{a:()=>i});var s=n(7097),a=n(9121),r=n(3740);const i=(0,n(2668).op)({imag_:function(e){const t={input:(0,r._1)(e,"input","imag")};return s.BV.runKernel(a.J_,t)}})},3305:(e,t,n)=>{"use strict";n.d(t,{I:()=>u});var s=n(7097),a=n(9121),r=n(3740),i=n(569),o=n(2668),l=n(4968);const u=(0,o.op)({resizeBilinear_:function(e,t,n=!1,o=!1){const u=(0,r._1)(e,"images","resizeBilinear");i.hu(3===u.rank||4===u.rank,(()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${u.rank}.`)),i.hu(2===t.length,(()=>`Error in resizeBilinear: new shape must 2D, but got shape ${t}.`)),i.hu(!1===o||!1===n,(()=>"Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false."));let c=u,h=!1;3===u.rank&&(h=!0,c=(0,l.X)(u,[1,u.shape[0],u.shape[1],u.shape[2]]));const[]=t,p={images:c},d={alignCorners:n,halfPixelCenters:o,size:t},f=s.BV.runKernel(a._Y,p,d);return h?(0,l.X)(f,[f.shape[1],f.shape[2],f.shape[3]]):f}})},5098:(e,t,n)=>{"use strict";n.d(t,{j:()=>u});var s=n(7097),a=n(9121),r=n(3740),i=n(569),o=n(2668),l=n(4968);const u=(0,o.op)({resizeNearestNeighbor_:function(e,t,n=!1,o=!1){const u=(0,r._1)(e,"images","resizeNearestNeighbor");i.hu(3===u.rank||4===u.rank,(()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${u.rank}.`)),i.hu(2===t.length,(()=>`Error in resizeNearestNeighbor: new shape must 2D, but got shape ${t}.`)),i.hu("float32"===u.dtype||"int32"===u.dtype,(()=>"`images` must have `int32` or `float32` as dtype")),i.hu(!1===o||!1===n,(()=>"Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false."));let c=u,h=!1;3===u.rank&&(h=!0,c=(0,l.X)(u,[1,u.shape[0],u.shape[1],u.shape[2]]));const[]=t,p={images:c},d={alignCorners:n,halfPixelCenters:o,size:t},f=s.BV.runKernel(a.dp,p,d);return h?(0,l.X)(f,[f.shape[1],f.shape[2],f.shape[3]]):f}})},3963:(e,t,n)=>{"use strict";n.d(t,{x:()=>i});var s=n(7097),a=n(9121),r=n(3740);const i=(0,n(2668).op)({isFinite_:function(e){const t={x:(0,r._1)(e,"x","isFinite")};return s.BV.runKernel(a.av,t)}})},4365:(e,t,n)=>{"use strict";n.d(t,{U:()=>i});var s=n(7097),a=n(9121),r=n(3740);const i=(0,n(2668).op)({isInf_:function(e){const t={x:(0,r._1)(e,"x","isInf")};return s.BV.runKernel(a.iW,t)}})},6230:(e,t,n)=>{"use strict";n.d(t,{i:()=>i});var s=n(7097),a=n(9121),r=n(3740);const i=(0,n(2668).op)({isNaN_:function(e){const t={x:(0,r._1)(e,"x","isNaN")};return s.BV.runKernel(a.r7,t)}})},9133:(e,t,n)=>{"use strict";n.d(t,{h:()=>i});var s=n(7097),a=n(9121),r=n(3740);const i=(0,n(2668).op)({leakyRelu_:function(e,t=.2){const n={x:(0,r._1)(e,"x","leakyRelu")},i={alpha:t};return s.BV.runKernel(a.J$,n,i)}})},6573:(e,t,n)=>{"use strict";n.d(t,{d:()=>l});var s=n(7097),a=n(9121),r=n(747),i=n(3740),o=n(2200);const l=(0,n(2668).op)({less_:function(e,t){let n=(0,i._1)(e,"a","less"),l=(0,i._1)(t,"b","less");[n,l]=(0,r.makeTypesMatch)(n,l),(0,o.$N)(n.shape,l.shape);const u={a:n,b:l};return s.BV.runKernel(a.vt,u)}})},624:(e,t,n)=>{"use strict";n.d(t,{z:()=>l});var s=n(7097),a=n(9121),r=n(747),i=n(3740),o=n(2200);const l=(0,n(2668).op)({lessEqual_:function(e,t){let n=(0,i._1)(e,"a","lessEqual"),l=(0,i._1)(t,"b","lessEqual");[n,l]=(0,r.makeTypesMatch)(n,l),(0,o.$N)(n.shape,l.shape);const u={a:n,b:l};return s.BV.runKernel(a.CA,u)}})},4135:(e,t,n)=>{"use strict";n.d(t,{S:()=>r});var s=n(7097),a=n(9121);function r(e,t,n){if(n<=0)throw new Error("The number of values should be positive.");const r={start:e,stop:t,num:n};return s.BV.runKernel(a.e7,{},r)}},9648:(e,t,n)=>{"use strict";n.d(t,{G:()=>u});var s=n(7097),a=n(9121),r=n(3740),i=n(569),o=n(2668),l=n(4968);const u=(0,o.op)({localResponseNormalization_:function(e,t=5,n=1,o=1,u=.5){const c=(0,r._1)(e,"x","localResponseNormalization");i.hu(4===c.rank||3===c.rank,(()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${c.rank}.`)),i.hu(i.GN(t),(()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${t}.`));let h=c,p=!1;3===c.rank&&(p=!0,h=(0,l.X)(c,[1,c.shape[0],c.shape[1],c.shape[2]]));const d={x:h},f={depthRadius:t,bias:n,alpha:o,beta:u},m=s.BV.runKernel(a.eZ,d,f);return p?(0,l.X)(m,[m.shape[1],m.shape[2],m.shape[3]]):m}})},2597:(e,t,n)=>{"use strict";n.d(t,{c:()=>i});var s=n(7097),a=n(9121),r=n(3740);const i=(0,n(2668).op)({log_:function(e){const t={x:(0,r._1)(e,"x","log")};return s.BV.runKernel(a.Zb,t)}})},7474:(e,t,n)=>{"use strict";n.d(t,{K:()=>i});var s=n(7097),a=n(9121),r=n(3740);const i=(0,n(2668).op)({log1p_:function(e){const t={x:(0,r._1)(e,"x","log1p")};return s.BV.runKernel(a.kU,t)}})},3888:(e,t,n)=>{"use strict";n.d(t,{e:()=>c});var s=n(633),a=n(3740),r=n(4841),i=n(7370),o=n(2668),l=n(625),u=n(3694);const c=(0,o.op)({logSigmoid_:function(e){const t=(0,a._1)(e,"x","logSigmoid");return(0,s.cb)((e=>({value:(0,i.W)((0,u.W)((0,i.W)(e))),gradFunc:t=>(0,r.d)(t,(0,l.X)((0,i.W)(e)))})))(t)}})},1510:(e,t,n)=>{"use strict";n.d(t,{C:()=>d});var s=n(633),a=n(3740),r=n(2271),i=n(4842),o=n(2597),l=n(3307),u=n(4841),c=n(2668),h=n(827),p=n(5475);const d=(0,c.op)({logSoftmax_:function(e,t=-1){const n=(0,a._1)(e,"logits","logSoftmax");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and axis was ${t}`);return(0,s.cb)(((e,n)=>{const s=(0,l.F)(e,t,!0),a=(0,h.l)(e,s),c=(0,h.l)((0,r.p)(a,"float32"),(0,o.c)((0,p.S)((0,i.Q)(a),t,!0)));return n([c]),{value:c,gradFunc:(e,n)=>{const[s]=n,a=(0,i.Q)(s);return(0,h.l)(e,(0,u.d)((0,p.S)(e,t,!0),a))}}}))(n)}})},1391:(e,t,n)=>{"use strict";n.d(t,{l:()=>f});var s=n(3740),a=n(569),r=n(6407),i=n(3591),o=n(4842),l=n(2597),u=n(3307),c=n(2668),h=n(4968),p=n(827),d=n(5475);const f=(0,c.op)({logSumExp_:function(e,t=null,n=!1){const c=(0,s._1)(e,"x","logSumExp"),f=(0,a.EC)(t,c.shape),m=(0,u.F)(c,f,!0),g=(0,p.l)(c,m),y=(0,o.Q)(g),b=(0,d.S)(y,f),x=(0,l.c)(b),v=(0,r.I)((0,h.X)(m,x.shape),x);if(n){const e=(0,i.rv)(v.shape,f);return(0,h.X)(v,e)}return v}})},2856:(e,t,n)=>{"use strict";n.d(t,{H:()=>o});var s=n(7097),a=n(9121),r=n(3740),i=n(2200);const o=(0,n(2668).op)({logicalAnd_:function(e,t){const n=(0,r._1)(e,"a","logicalAnd","bool"),o=(0,r._1)(t,"b","logicalAnd","bool");(0,i.$N)(n.shape,o.shape);const l={a:n,b:o};return s.BV.runKernel(a.PY,l)}})},8651:(e,t,n)=>{"use strict";n.d(t,{h:()=>i});var s=n(7097),a=n(9121),r=n(3740);const i=(0,n(2668).op)({logicalNot_:function(e){const t={x:(0,r._1)(e,"x","logicalNot","bool")};return s.BV.runKernel(a.Vf,t)}})},5750:(e,t,n)=>{"use strict";n.d(t,{K:()=>o});var s=n(7097),a=n(9121),r=n(3740),i=n(2200);const o=(0,n(2668).op)({logicalOr_:function(e,t){const n=(0,r._1)(e,"a","logicalOr","bool"),o=(0,r._1)(t,"b","logicalOr","bool");(0,i.$N)(n.shape,o.shape);const l={a:n,b:o};return s.BV.runKernel(a.MZ,l)}})},596:(e,t,n)=>{"use strict";n.d(t,{e:()=>l});var s=n(3740),a=n(2200),r=n(2856),i=n(8651),o=n(5750);const l=(0,n(2668).op)({logicalXor_:function(e,t){const n=(0,s._1)(e,"a","logicalXor","bool"),l=(0,s._1)(t,"b","logicalXor","bool");return(0,a.$N)(n.shape,l.shape),(0,r.H)((0,o.K)(e,t),(0,i.h)((0,r.H)(e,t)))}})},9876:(e,t,n)=>{"use strict";var s;n.d(t,{I:()=>s}),function(e){e[e.NONE=0]="NONE",e[e.MEAN=1]="MEAN",e[e.SUM=2]="SUM",e[e.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS"}(s||(s={}))},8687:(e,t,n)=>{"use strict";n.d(t,{O:()=>o});var s=n(7097),a=n(9121),r=n(747),i=n(3740);const o=(0,n(2668).op)({matMul_:function(e,t,n=!1,o=!1){let l=(0,i._1)(e,"a","matMul"),u=(0,i._1)(t,"b","matMul");[l,u]=(0,r.makeTypesMatch)(l,u);const c={a:l,b:u},h={transposeA:n,transposeB:o};return s.BV.runKernel(a.XL,c,h)}})},3307:(e,t,n)=>{"use strict";n.d(t,{F:()=>i});var s=n(7097),a=n(9121),r=n(3740);const i=(0,n(2668).op)({max_:function(e,t=null,n=!1){const i={x:(0,r._1)(e,"x","max")},o={reductionIndices:t,keepDims:n};return s.BV.runKernel(a.Yo,i,o)}})},1174:(e,t,n)=>{"use strict";n.d(t,{_:()=>c});var s=n(7097),a=n(9121),r=n(3740),i=n(569),o=n(2582),l=n(2668),u=n(4968);const c=(0,l.op)({maxPool_:function(e,t,n,l,c){const h=(0,r._1)(e,"x","maxPool");let p=h,d=!1;3===h.rank&&(d=!0,p=(0,u.X)(h,[1,h.shape[0],h.shape[1],h.shape[2]])),i.hu(4===p.rank,(()=>`Error in maxPool: input must be rank 4 but got rank ${p.rank}.`)),i.hu(o.jT(n,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`)),null!=c&&i.hu(i.GN(l),(()=>`Error in maxPool: pad must be an integer when using, dimRoundingMode ${c} but got pad ${l}.`));const f={x:p},m={filterSize:t,strides:n,pad:l,dimRoundingMode:c},g=s.BV.runKernel(a.mT,f,m);return d?(0,u.X)(g,[g.shape[1],g.shape[2],g.shape[3]]):g}})},5020:(e,t,n)=>{"use strict";n.d(t,{Y:()=>u});var s=n(7097),a=n(9121),r=n(3740),i=n(569),o=n(2668),l=n(4968);const u=(0,o.op)({maxPool3d_:function(e,t=[1,1,1],n,o,u,c="NDHWC"){const h=(0,r._1)(e,"x","maxPool3d");let p=h,d=!1;4===h.rank&&(d=!0,p=(0,l.X)(h,[1,h.shape[0],h.shape[1],h.shape[2],h.shape[3]])),i.hu(5===p.rank,(()=>`Error in maxPool3d: x must be rank 5 but got rank ${p.rank}.`)),i.hu("NDHWC"===c,(()=>`Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${c}`)),null!=u&&i.hu(i.GN(o),(()=>`Error in maxPool3d: pad must be an integer when using, dimRoundingMode ${u} but got pad ${o}.`));const f={x:p},m={filterSize:t,strides:n,pad:o,dimRoundingMode:u,dataFormat:c},g=s.BV.runKernel(a.OA,f,m);return d?(0,l.X)(g,[g.shape[1],g.shape[2],g.shape[3],g.shape[4]]):g}})},6877:(e,t,n)=>{"use strict";n.d(t,{I:()=>i});var s=n(7097),a=n(9121),r=n(3740);const i=(0,n(2668).op)({maxPoolWithArgmax_:function(e,t,n,i,o=!1){const l={x:(0,r._1)(e,"x","maxPoolWithArgmax")},u={filterSize:t,strides:n,pad:i,includeBatchInIndex:o},c=s.BV.runKernel(a.vF,l,u);return{result:c[0],indexes:c[1]}}})},632:(e,t,n)=>{"use strict";n.d(t,{g:()=>u});var s=n(7097),a=n(9121),r=n(747),i=n(3740),o=n(2200),l=n(2271);const u=(0,n(2668).op)({maximum_:function(e,t){let n=(0,i._1)(e,"a","maximum"),u=(0,i._1)(t,"b","maximum");[n,u]=(0,r.makeTypesMatch)(n,u),"bool"===n.dtype&&(n=(0,l.p)(n,"int32"),u=(0,l.p)(u,"int32")),(0,o.$N)(n.shape,u.shape);const c={a:n,b:u};return s.BV.runKernel(a.BM,c)}})},5130:(e,t,n)=>{"use strict";n.d(t,{J:()=>i});var s=n(7097),a=n(9121),r=n(3740);const i=(0,n(2668).op)({mean_:function(e,t=null,n=!1){const i={x:(0,r._1)(e,"x","mean")},o={axis:t,keepDims:n};return s.BV.runKernel(a.q2,i,o)}})},5735:(e,t,n)=>{"use strict";n.d(t,{V:()=>i});var s=n(7097),a=n(9121),r=n(3740);const i=(0,n(2668).op)({min_:function(e,t=null,n=!1){const i={x:(0,r._1)(e,"x","min")},o={axis:t,keepDims:n};return s.BV.runKernel(a.c1,i,o)}})},4513:(e,t,n)=>{"use strict";n.d(t,{L:()=>u});var s=n(7097),a=n(9121),r=n(747),i=n(3740),o=n(2200),l=n(2271);const u=(0,n(2668).op)({minimum_:function(e,t){let n=(0,i._1)(e,"a","minimum"),u=(0,i._1)(t,"b","minimum");[n,u]=(0,r.makeTypesMatch)(n,u),"bool"===n.dtype&&(n=(0,l.p)(n,"int32"),u=(0,l.p)(u,"int32")),(0,o.$N)(n.shape,u.shape);const c={a:n,b:u};return s.BV.runKernel(a.q8,c)}})},1483:(e,t,n)=>{"use strict";n.d(t,{V:()=>o});var s=n(7097),a=n(9121),r=n(3740),i=n(569);const o=(0,n(2668).op)({mirrorPad_:function(e,t,n){i.hu("reflect"===n||"symmetric"===n,(()=>`Invalid mode. Mode must be either reflect or symmetric. Got ${n}.`));const o=(0,r._1)(e,"x","mirrorPad");if(0===o.rank)throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");i.hu(t.length===o.rank,(()=>`Padding doesn't match input. Must be ${o.rank}. Got ${t.length}.`));const l="reflect"===n?1:0;for(let e=0;e<o.rank;e++)i.hu(2===t[e].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),i.hu(t[e][0]>=0&&t[e][0]<=o.shape[e]-l&&t[e][1]>=0&&t[e][1]<=o.shape[e]-l,(()=>`Padding in dimension ${e} cannot be greater than or equal to ${o.shape[e]-l} or less than 0 for input of shape ${o.shape}`));const u={paddings:t,mode:n},c={x:o};return s.BV.runKernel(a.jQ,c,u)}})},5228:(e,t,n)=>{"use strict";n.d(t,{w:()=>o});var s=n(7097),a=n(9121),r=n(747),i=n(3740);const o=(0,n(2668).op)({mod_:function(e,t){let n=(0,i._1)(e,"a","mod"),o=(0,i._1)(t,"b","mod");[n,o]=(0,r.makeTypesMatch)(n,o);const l={a:n,b:o};return s.BV.runKernel(a.Vb,l)}})},4841:(e,t,n)=>{"use strict";n.d(t,{d:()=>o});var s=n(7097),a=n(9121),r=n(747),i=n(3740);const o=(0,n(2668).op)({mul_:function(e,t){let n=(0,i._1)(e,"a","mul"),o=(0,i._1)(t,"b","mul");[n,o]=(0,r.makeTypesMatch)(n,o);const l={a:n,b:o};return s.BV.runKernel(a.wY,l)}})},686:(e,t,n)=>{"use strict";n.d(t,{S:()=>l});var s=n(7097),a=n(9121),r=n(3740),i=n(2668),o=n(4968);const l=(0,i.op)({multinomial_:function(e,t,n,i=!1){const l=(0,r._1)(e,"logits","multinomial"),u=l.size,c=l.rank;if(u<2)throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ${u}.`);if(c>2)throw new Error(`Rank of probabilities must be 1 or 2, but is ${c}`);n=n||Math.random();const h={logits:1===c?(0,o.X)(l,[1,-1]):l},p={numSamples:t,seed:n,normalized:i},d=s.BV.runKernel(a.NZ,h,p);return 1===c?(0,o.X)(d,[d.size]):d}})},7370:(e,t,n)=>{"use strict";n.d(t,{W:()=>i});var s=n(7097),a=n(9121),r=n(3740);const i=(0,n(2668).op)({neg_:function(e){const t={x:(0,r._1)(e,"x","neg")};return s.BV.runKernel(a.ku,t)}})},3561:(e,t,n)=>{"use strict";n.d(t,{K:()=>y});var s=n(3740),a=n(569),r=n(6235),i=n(3591),o=n(3307),l=n(5735),u=n(2668),c=n(3453),h=n(4968),p=n(9494),d=n(3261),f=n(248),m=n(5475);function g(e,t,n=null){if(0===e.rank)return(0,r.W)(e);if(1!==e.rank&&null===n)return g((0,h.X)(e,[-1]),t,n);if(1===e.rank||"number"==typeof n||Array.isArray(n)&&1===n.length){if(1===t)return(0,m.S)((0,r.W)(e),n);if(t===1/0)return(0,o.F)((0,r.W)(e),n);if(t===-1/0)return(0,l.V)((0,r.W)(e),n);if("euclidean"===t||2===t)return(0,d._)((0,m.S)((0,c.s)((0,r.W)(e),(0,p.i)(2,"int32")),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}if(Array.isArray(n)&&2===n.length){if(1===t)return(0,o.F)((0,m.S)((0,r.W)(e),n[0]),n[1]-1);if(t===1/0)return(0,o.F)((0,m.S)((0,r.W)(e),n[1]),n[0]);if(t===-1/0)return(0,l.V)((0,m.S)((0,r.W)(e),n[1]),n[0]);if("fro"===t||"euclidean"===t)return(0,d._)((0,m.S)((0,f.h)(e),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}throw new Error(`Error in norm: invalid axis: ${n}`)}const y=(0,u.op)({norm_:function(e,t="euclidean",n=null,r=!1){const o=g(e=(0,s._1)(e,"x","norm"),t,n);let l=o.shape;if(r){const t=(0,a.EC)(n,e.shape);l=i.rv(o.shape,t)}return(0,h.X)(o,l)}})},6500:(e,t,n)=>{"use strict";n.d(t,{Q:()=>l});var s=n(7097),a=n(9121),r=n(747),i=n(3740),o=n(2200);const l=(0,n(2668).op)({notEqual_:function(e,t){let n=(0,i._1)(e,"a","notEqual"),l=(0,i._1)(t,"b","notEqual");[n,l]=(0,r.makeTypesMatch)(n,l),(0,o.$N)(n.shape,l.shape);const u={a:n,b:l};return s.BV.runKernel(a.yQ,u)}})},6708:(e,t,n)=>{"use strict";n.d(t,{l:()=>i});var s=n(7097),a=n(9121),r=n(3740);const i=(0,n(2668).op)({oneHot_:function(e,t,n=1,i=0){if(t<2)throw new Error(`Error in oneHot: depth must be >=2, but it is ${t}`);const o={indices:(0,r._1)(e,"indices","oneHot","int32")},l={depth:t,onValue:n,offValue:i};return s.BV.runKernel(a.we,o,l)}})},4917:(e,t,n)=>{"use strict";n.d(t,{i:()=>o});var s=n(7097),a=n(569),r=n(1661),i=n(9640);function o(e,t="float32"){if("complex64"===t){const t=o(e,"float32"),n=(0,i.l)(e,"float32");return(0,r.P)(t,n)}const n=(0,a.p8)((0,a.NA)(e),t);return s.BV.makeTensor(n,e,t)}},7846:(e,t,n)=>{"use strict";n.d(t,{J:()=>i});var s=n(7097),a=n(9121),r=n(3740);const i=(0,n(2668).op)({onesLike_:function(e){const t={x:(0,r._1)(e,"x","onesLike")};return s.BV.runKernel(a.qW,t)}})},2668:(e,t,n)=>{"use strict";n.d(t,{z:()=>r,op:()=>i});var s=n(7097),a=n(569);const r="__op";function i(e){const t=Object.keys(e);if(1!==t.length)throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${t.length} keys.`);let n=t[0];const i=e[n];n.endsWith("_")&&(n=n.substring(0,n.length-1)),n+=r;const o=(...e)=>{s.BV.startScope(n);try{const t=i(...e);return(0,a.tI)(t)&&console.error("Cannot return a Promise inside of tidy."),s.BV.endScope(t),t}catch(e){throw s.BV.endScope(null),e}};return Object.defineProperty(o,"name",{value:n,configurable:!0}),o}},6499:(e,t,n)=>{"use strict";n.d(t,{zvA:()=>N.z,WnP:()=>s.W,Khb:()=>a.K,__u:()=>r._,IHx:()=>i.I,QBD:()=>o.Q,$6P:()=>l.$,YjB:()=>u.Y,NqF:()=>c.N,vHJ:()=>h.v,ZRM:()=>p.Z,VfV:()=>d.V,z4N:()=>f.z,fvJ:()=>m.f,C80:()=>g.C,wS1:()=>y.w,uR5:()=>b.u,zEQ:()=>C,tgs:()=>A.t,Dxk:()=>_,JY5:()=>R,p3b:()=>F,E4h:()=>$.E,yE8:()=>D.y,anm:()=>_n,UFq:()=>O.U,f3b:()=>M.f,pju:()=>z.p,mDi:()=>L.m,iUl:()=>B.i,d9v:()=>P.d,PYB:()=>V.P,zoF:()=>v.z,gME:()=>W,Izb:()=>U,MNy:()=>G,ZaL:()=>H,PAt:()=>j.P,Tek:()=>X.T,bc:()=>q.b,pdZ:()=>K.p,$QV:()=>Q,mCk:()=>J.m,f9Y:()=>Z.f,mew:()=>Wn,zbp:()=>ee.z,ppE:()=>te.p,nTT:()=>ne.n,B10:()=>se.B,Ka3:()=>ie,WmZ:()=>oe.W,hiC:()=>le.h,NTj:()=>ue.N,AKD:()=>ce.A,rvX:()=>Pn,pyx:()=>he.p,GRh:()=>Vn,DgJ:()=>pe.D,qNN:()=>de.q,Qqt:()=>fe.Q,dt4:()=>me.d,t$B:()=>ge.t,iyy:()=>xe,kp_:()=>Zt.k,hlL:()=>ve.h,GWj:()=>ke.G,qPi:()=>we.q,imm:()=>Gn,Iqj:()=>Ne.I,dbB:()=>Ln.d,pjt:()=>Ie.p,brS:()=>Se.b,Sxn:()=>en.S,asL:()=>Te.a,BHj:()=>Is,V3u:()=>Un,wx0:()=>tn.w,xVT:()=>Ce.x,UWc:()=>$e.U,i2d:()=>Ae.i,hi7:()=>Ee.h,d9m:()=>_e.d,zN1:()=>Re.z,$r2:()=>Ss,SX3:()=>Fe.S,G9k:()=>De.G,cM7:()=>Oe.c,Krr:()=>Me.K,e_t:()=>ze.e,CmS:()=>Le.C,l_t:()=>Be.l,HvI:()=>Pe.H,hJK:()=>Ve.h,K5V:()=>We.K,egP:()=>Ue.e,MB5:()=>Ts,OI3:()=>k.O,Fp7:()=>Ge.F,_sB:()=>He._,YQQ:()=>je.Y,Ip$:()=>Xe.I,gWQ:()=>qe.g,J69:()=>Ke.J,VV$:()=>Ye.V,LTh:()=>Qe.L,VdP:()=>Je.V,wQq:()=>Ze.w,Gi7:()=>st,p_:()=>On,dC7:()=>w.d,rq4:()=>at,SJ_:()=>rt.S,W76:()=>it.W,KOy:()=>Fn.K,Quu:()=>ot.Q,lfX:()=>lt.l,iUs:()=>ut.i,JpU:()=>ct.J,op:()=>N.op,N2O:()=>ht,vku:()=>pt.v,pNR:()=>dt,koy:()=>ft,t1L:()=>mt,lGY:()=>gt,d_R:()=>yt.d,sQ3:()=>bt.s,AL3:()=>xt.A,S0v:()=>vt.S,WVs:()=>kt.W,TN_:()=>wt,wzB:()=>It,nGf:()=>St,LGj:()=>Tt.L,w6H:()=>Ct.w,kwC:()=>$t.k,M25:()=>At.M,UYe:()=>Et.U,btT:()=>_t.b,XLQ:()=>ye.X,GYS:()=>Rt.G,SDf:()=>Ft,diP:()=>Dt,sx7:()=>Ot,mG2:()=>Mt,QEs:()=>nn.Q,NMM:()=>zt.N,bp0:()=>Lt.b,iD$:()=>Bt.i,snQ:()=>Mn.s,U8D:()=>Pt.U,U_I:()=>Vt.U,ODp:()=>Wt.O,XD2:()=>I.X,Xxe:()=>Ut.X,tdS:()=>Ns,O$l:()=>Gt.O,R_K:()=>Ht.R,tPi:()=>S.t,jZU:()=>jt,SmN:()=>Xt,CnO:()=>qt,p0P:()=>Kt,XAC:()=>Yt.X,Wvh:()=>Qt.W,fBT:()=>Jt.f,ers:()=>zn.e,uN7:()=>ws,Vl2:()=>sn.V,_b3:()=>an._,h62:()=>tt.h,$i:()=>rn.$,L9e:()=>on.L,knu:()=>ln.k,Nbs:()=>un.N,NXj:()=>cn.N,luU:()=>nt.l,Smz:()=>hn.S,ORZ:()=>pn.O,AEp:()=>T.A,XeE:()=>dn.X,RRF:()=>fn.R,odF:()=>gn,wOQ:()=>yn.w,yXz:()=>bn,Bfx:()=>xn,xZs:()=>vn,Gg6:()=>be.G,hg7:()=>kn.h,p4s:()=>Rn.p,Xu6:()=>wn.X,Two:()=>Nn.T,pUJ:()=>In.p,HHK:()=>Sn.H,VD$:()=>Tn,arb:()=>Cn.a,itS:()=>$n.i,lls:()=>An.l,P84:()=>En.P});var s=n(6235),a=n(7839),r=n(1470),i=n(6407),o=n(3135),l=n(781),u=n(2998),c=n(47),h=n(7394),p=n(2421),d=n(1891),f=n(7037),m=n(9812),g=n(369),y=n(5176),b=n(1749),x=n(3740),v=n(6884),k=n(8687),w=n(4841),N=n(2668),I=n(625),S=n(2676),T=n(1869);const C=(0,N.op)({basicLSTMCell_:function(e,t,n,s,a,r){const o=(0,x._1)(e,"forgetBias","basicLSTMCell"),l=(0,x._1)(t,"lstmKernel","basicLSTMCell"),u=(0,x._1)(n,"lstmBias","basicLSTMCell"),c=(0,x._1)(s,"data","basicLSTMCell"),h=(0,x._1)(a,"c","basicLSTMCell"),p=(0,x._1)(r,"h","basicLSTMCell"),d=(0,v.z)([c,p],1),f=(0,k.O)(d,l),m=(0,i.I)(f,u),g=m.shape[0],y=m.shape[1]/4,b=[g,y],N=(0,S.t)(m,[0,0],b),C=(0,S.t)(m,[0,y],b),$=(0,S.t)(m,[0,2*y],b),A=(0,S.t)(m,[0,3*y],b),E=(0,i.I)((0,w.d)((0,I.X)(N),(0,T.A)(C)),(0,w.d)(h,(0,I.X)((0,i.I)(o,$))));return[E,(0,w.d)((0,T.A)(E),(0,I.X)(A))]}});var $=n(8441),A=n(7505),E=n(569);const _=(0,N.op)({batchNorm2d_:function(e,t,n,s,a,r){const i=(0,x._1)(e,"x","batchNorm"),o=(0,x._1)(t,"mean","batchNorm"),l=(0,x._1)(n,"variance","batchNorm");let u,c;return null!=a&&(u=(0,x._1)(a,"scale","batchNorm")),null!=s&&(c=(0,x._1)(s,"offset","batchNorm")),E.hu(2===i.rank,(()=>`Error in batchNorm2D: x must be rank 2 but got rank ${i.rank}.`)),E.hu(2===o.rank||1===o.rank,(()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${o.rank}.`)),E.hu(2===l.rank||1===l.rank,(()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${l.rank}.`)),null!=u&&E.hu(2===u.rank||1===u.rank,(()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${u.rank}.`)),null!=c&&E.hu(2===c.rank||1===c.rank,(()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${c.rank}.`)),(0,A.t)(i,o,l,c,u,r)}}),R=(0,N.op)({batchNorm3d_:function(e,t,n,s,a,r){const i=(0,x._1)(e,"x","batchNorm"),o=(0,x._1)(t,"mean","batchNorm"),l=(0,x._1)(n,"variance","batchNorm");let u,c;return null!=a&&(u=(0,x._1)(a,"scale","batchNorm")),null!=s&&(c=(0,x._1)(s,"offset","batchNorm")),E.hu(3===i.rank,(()=>`Error in batchNorm3D: x must be rank 3 but got rank ${i.rank}.`)),E.hu(3===o.rank||1===o.rank,(()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${o.rank}.`)),E.hu(3===l.rank||1===l.rank,(()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${l.rank}.`)),null!=u&&E.hu(3===u.rank||1===u.rank,(()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${u.rank}.`)),null!=c&&E.hu(3===c.rank||1===c.rank,(()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${c.rank}.`)),(0,A.t)(i,o,l,c,u,r)}}),F=(0,N.op)({batchNorm4d_:function(e,t,n,s,a,r){const i=(0,x._1)(e,"x","batchNorm"),o=(0,x._1)(t,"mean","batchNorm"),l=(0,x._1)(n,"variance","batchNorm");let u,c;return null!=a&&(u=(0,x._1)(a,"scale","batchNorm")),null!=s&&(c=(0,x._1)(s,"offset","batchNorm")),E.hu(4===i.rank,(()=>`Error in batchNorm4D: x must be rank 4 but got rank ${i.rank}.`)),E.hu(4===o.rank||1===o.rank,(()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${o.rank}.`)),E.hu(4===l.rank||1===l.rank,(()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${l.rank}.`)),null!=u&&E.hu(4===u.rank||1===u.rank,(()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${u.rank}.`)),null!=c&&E.hu(4===c.rank||1===c.rank,(()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${c.rank}.`)),(0,A.t)(i,o,l,c,u,r)}});var D=n(3865),O=n(8247),M=n(2657),z=n(2271),L=n(6825),B=n(2279),P=n(8723),V=n(1661);const W=(0,N.op)({concat1d_:function(e){return(0,v.z)(e,0)}}),U=(0,N.op)({concat2d_:function(e,t){return(0,v.z)(e,t)}}),G=(0,N.op)({concat3d_:function(e,t){return(0,v.z)(e,t)}}),H=(0,N.op)({concat4d_:function(e,t){return(0,v.z)(e,t)}});var j=n(1355),X=n(4794),q=n(1405),K=n(473),Y=n(7594);const Q=(0,N.op)({conv3dTranspose_:function(e,t,n,s,a){const r=(0,x._1)(e,"x","conv3dTranspose"),i=(0,x._1)(t,"filter","conv3dTranspose");return(0,Y._)(n,r,i,s,a)}});var J=n(173),Z=n(2699),ee=n(7405),te=n(5746),ne=n(9112),se=n(4718),ae=n(7097),re=n(9121);const ie=(0,N.op)({diag_:function(e){const t={x:(0,x._1)(e,"x","diag")};return ae.BV.runKernel(re.$w,t)}});var oe=n(557),le=n(1274),ue=n(9322),ce=n(548),he=n(3233),pe=n(6477),de=n(4650),fe=n(4842),me=n(1300),ge=n(3426),ye=n(4968),be=n(7501);const xe=(0,N.op)({eye_:function(e,t,n,s="float32"){null==t&&(t=e);const a=(0,M.f)([e,t],s),r=e<=t?e:t;for(let e=0;e<r;++e)a.set(1,e,e);const i=(0,ye.X)(a.toTensor(),[e,t]);if(null==n)return i;if(1===n.length)return(0,be.G)((0,me.d)(i,0),[n[0],1,1]);if(2===n.length)return(0,be.G)((0,me.d)((0,me.d)(i,0),0),[n[0],n[1],1,1]);if(3===n.length)return(0,be.G)((0,me.d)((0,me.d)((0,me.d)(i,0),0),0),[n[0],n[1],n[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${n.length}D.`)}});var ve=n(4006),ke=n(6943),we=n(9165),Ne=n(4926),Ie=n(636),Se=n(7630),Te=n(4386),Ce=n(3963),$e=n(4365),Ae=n(6230),Ee=n(9133),_e=n(6573),Re=n(624),Fe=n(4135),De=n(9648),Oe=n(2597),Me=n(7474),ze=n(3888),Le=n(1510),Be=n(1391),Pe=n(2856),Ve=n(8651),We=n(5750),Ue=n(596),Ge=n(3307),He=n(1174),je=n(5020),Xe=n(6877),qe=n(632),Ke=n(5130),Ye=n(5735),Qe=n(4513),Je=n(1483),Ze=n(5228),et=n(3591),tt=n(248),nt=n(827);const st=(0,N.op)({moments_:function(e,t=null,n=!1){e=(0,x._1)(e,"x","moments");const s=(0,E.EC)(t,e.shape),a=(0,Ke.J)(e,s,n);let r=a.shape;n||(r=(0,et.rv)(a.shape,s));const i=(0,tt.h)((0,nt.l)((0,z.p)(e,"float32"),(0,ye.X)(a,r)));return{mean:a,variance:(0,Ke.J)(i,s,n)}}}),at=(0,N.op)({multiRNNCell_:function(e,t,n,s){const a=(0,x._1)(t,"data","multiRNNCell"),r=(0,x.sI)(n,"c","multiRNNCell"),i=(0,x.sI)(s,"h","multiRNNCell");let o=a;const l=[];for(let t=0;t<e.length;t++){const n=e[t](o,r[t],i[t]);l.push(n[0]),l.push(n[1]),o=n[1]}const u=[],c=[];for(let e=0;e<l.length;e+=2)u.push(l[e]),c.push(l[e+1]);return[u,c]}});var rt=n(686),it=n(7370),ot=n(6500),lt=n(6708),ut=n(4917),ct=n(7846);const ht=(0,N.op)({outerProduct_:function(e,t){const n=(0,x._1)(e,"v1","outerProduct"),s=(0,x._1)(t,"v2","outerProduct");E.hu(1===n.rank&&1===s.rank,(()=>`Error in outerProduct: inputs must be rank 1, but got ranks ${n.rank} and ${s.rank}.`));const a=(0,ye.X)(n,[-1,1]),r=(0,ye.X)(s,[1,-1]);return(0,k.O)(a,r)}});var pt=n(9682);const dt=(0,N.op)({pad1d_:function(e,t,n=0){return(0,E.hu)(2===t.length,(()=>"Invalid number of paddings. Must be length of 2.")),(0,pt.v)(e,[t],n)}}),ft=(0,N.op)({pad2d_:function(e,t,n=0){return(0,E.hu)(2===t.length&&2===t[0].length&&2===t[1].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),(0,pt.v)(e,t,n)}}),mt=(0,N.op)({pad3d_:function(e,t,n=0){return(0,E.hu)(3===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),(0,pt.v)(e,t,n)}}),gt=(0,N.op)({pad4d_:function(e,t,n=0){return(0,E.hu)(4===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length&&2===t[3].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),(0,pt.v)(e,t,n)}});var yt=n(5860),bt=n(3453),xt=n(8151),vt=n(9798),kt=n(9451);const wt=(0,N.op)({rand_:function(e,t,n){const s=(0,E.NA)(e);let a=null;if(null==n||"float32"===n)a=new Float32Array(s);else if("int32"===n)a=new Int32Array(s);else{if("bool"!==n)throw new Error(`Unknown data type ${n}`);a=new Uint8Array(s)}for(let e=0;e<s;e++)a[e]=t();return ae.BV.makeTensor(a,e,n)}});var Nt=n(6845);const It=(0,N.op)({randomGamma_:function(e,t,n=1,s="float32",a){if(null==n&&(n=1),null==s&&(s="float32"),"float32"!==s&&"int32"!==s)throw new Error(`Unsupported data type ${s}`);const r=new Nt.T9(t,n,s,a),i=(0,M.f)(e,s);for(let e=0;e<i.values.length;e++)i.values[e]=r.nextValue();return i.toTensor()}}),St=(0,N.op)({randomNormal_:function(e,t=0,n=1,s,a){if(null!=s&&"bool"===s)throw new Error(`Unsupported data type ${s}`);const r=new Nt.Yi(t,n,s,!1,a),i=(0,M.f)(e,s);for(let e=0;e<i.values.length;e++)i.values[e]=r.nextValue();return i.toTensor()}});var Tt=n(5002),Ct=n(7245),$t=n(766),At=n(9036),Et=n(7409),_t=n(3582),Rt=n(7486);const Ft=(0,N.op)({reverse1d_:function(e){const t=(0,x._1)(e,"x","reverse");return E.hu(1===t.rank,(()=>`Error in reverse1D: x must be rank 1 but got rank ${t.rank}.`)),(0,Rt.G)(t,0)}}),Dt=(0,N.op)({reverse2d_:function(e,t){const n=(0,x._1)(e,"x","reverse");return E.hu(2===n.rank,(()=>`Error in reverse2D: x must be rank 2 but got rank ${n.rank}.`)),(0,Rt.G)(n,t)}}),Ot=(0,N.op)({reverse3d_:function(e,t){const n=(0,x._1)(e,"x","reverse");return E.hu(3===n.rank,(()=>`Error in reverse3D: x must be rank 3 but got rank ${n.rank}.`)),(0,Rt.G)(n,t)}}),Mt=(0,N.op)({reverse4d_:function(e,t){const n=(0,x._1)(e,"x","reverse");return E.hu(4===n.rank,(()=>`Error in reverse4D: x must be rank 4 but got rank ${n.rank}.`)),(0,Rt.G)(n,t)}});var zt=n(7809),Lt=n(2634),Bt=n(9494),Pt=n(5503),Vt=n(8678),Wt=n(6567),Ut=n(4434),Gt=n(9331),Ht=n(3254);const jt=(0,N.op)({slice1d_:function(e,t,n){const s=(0,x._1)(e,"x","slice1d");return E.hu(1===s.rank,(()=>`slice1d expects a rank-1 tensor, but got a rank-${s.rank} tensor`)),(0,S.t)(s,[t],[n])}}),Xt=(0,N.op)({slice2d_:function(e,t,n){const s=(0,x._1)(e,"x","slice2d");return E.hu(2===s.rank,(()=>`slice2d expects a rank-2 tensor, but got a rank-${s.rank} tensor`)),(0,S.t)(s,t,n)}}),qt=(0,N.op)({slice3d_:function(e,t,n){const s=(0,x._1)(e,"x","slice3d");return E.hu(3===s.rank,(()=>`slice3d expects a rank-3 tensor, but got a rank-${s.rank} tensor`)),(0,S.t)(s,t,n)}}),Kt=(0,N.op)({slice4d_:function(e,t,n){const s=(0,x._1)(e,"x","slice4d");return E.hu(4===s.rank,(()=>`slice4d expects a rank-4 tensor, but got a rank-${s.rank} tensor`)),(0,S.t)(s,t,n)}});var Yt=n(682),Qt=n(3694),Jt=n(7918),Zt=n(7020),en=n(8447),tn=n(4415),nn=n(3710),sn=n(8644),an=n(3261),rn=n(5265),on=n(9590),ln=n(2991),un=n(1901),cn=n(5158),hn=n(5475),pn=n(1173),dn=n(701),fn=n(6092),mn=n(7852);function gn(e,t,n){if((0,E.Cq)(e),null!=t&&2!==t.length)throw new Error("tensor2d() requires shape to have two numbers");const s=(0,x.C)(e,n);if(2!==s.length&&1!==s.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return(0,mn.H)(e,t,s,n)}var yn=n(9906);function bn(e,t,n){if((0,E.Cq)(e),null!=t&&4!==t.length)throw new Error("tensor4d() requires shape to have four numbers");const s=(0,x.C)(e,n);if(4!==s.length&&1!==s.length)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return(0,mn.H)(e,t,s,n)}function xn(e,t,n){if((0,E.Cq)(e),null!=t&&5!==t.length)throw new Error("tensor5d() requires shape to have five numbers");const s=(0,x.C)(e,n);if(5!==s.length&&1!==s.length)throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");return(0,mn.H)(e,t,s,n)}function vn(e,t,n){if((0,E.Cq)(e),null!=t&&6!==t.length)throw new Error("tensor6d() requires shape to have six numbers");const s=(0,x.C)(e,n);if(6!==s.length&&1!==s.length)throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");return t=t||s,(0,mn.H)(e,t,s,n)}var kn=n(3243),wn=n(3596),Nn=n(9608),In=n(8749),Sn=n(4136);function Tn(e,t=!0,n,s){return ae.BV.makeVariable(e,t,n,s)}var Cn=n(5912),$n=n(6380),An=n(9640),En=n(6577);const _n=async function(e,t,n){const s=(0,x._1)(e,"tensor","boolMask"),a=(0,x._1)(t,"mask","boolMask","bool"),r=null==n?0:n,i=a.rank,o=s.shape;E.hu(i>0,(()=>"mask cannot be scalar")),E.k5(o.slice(r,r+i),a.shape,"mask's shape must match the first K dimensions of tensor's shape,");let l=1;for(let e=r;e<r+i;e++)l*=o[e];const u=o.slice(0,r).concat([l],o.slice(r+i)),c=(0,ye.X)(s,u),h=(0,ye.X)(a,[-1]),p=await(0,$n.i)(h),d=(0,on.L)(p,[1]),f=(0,Ne.I)(c,d,r);return e!==s&&s.dispose(),t!==a&&a.dispose(),d.dispose(),c.dispose(),h.dispose(),p.dispose(),f};var Rn=n(9065),Fn=n(3561),Dn=n(747);const On=(0,N.op)({movingAverage_:function(e,t,n,s,a=!0){const r=(0,x._1)(e,"v","movingAverage"),o=(0,x._1)(t,"x","movingAverage"),l=(0,x._1)(n,"decay","movingAverage");(0,Dn.assertTypesMatch)(r,o),E.hu(E.cO(r.shape,o.shape),(()=>"Shape mismatch in v and x"));const u=(0,Bt.i)(1),c=(0,nt.l)(u,l);let h=(0,w.d)((0,nt.l)(o,r),c);if(a){E.hu(null!=s,(()=>"When using zeroDebias: true, step is required."));const e=(0,x._1)(s,"step","movingAverage");h=(0,le.h)(h,(0,nt.l)(u,(0,bt.s)(l,e)))}return(0,i.I)(r,h)}});var Mn=n(3100),zn=n(9758),Ln=n(7494),Bn=n(4077);const Pn=(0,N.op)({dropout_:function(e,t,n,s){const a=(0,x._1)(e,"x","dropout");if(E.hu("float32"===a.dtype,(()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${a.dtype} tensor instead.`)),E.hu(t>=0&&t<1,(()=>`rate must be a float in the range [0, 1), but got ${t}.`)),0===t)return e instanceof Bn.es?a.clone():a;const r=function(e,t){if(null==t)return e.shape.slice();if(E.cO(e.shape,t))return t;if(e.shape.length===t.length){const n=[];for(let s=0;s<e.shape.length;s++)null==t[s]&&null!=e.shape[s]?n.push(e.shape[s]):n.push(t[s]);return n}return t}(a,n),o=1-t,l=(0,le.h)((0,ke.G)((0,i.I)((0,Tt.L)(r,0,1,"float32",s),o)),o);return(0,w.d)(a,l)}});function Vn(e){return Math.floor(Math.pow(2,Math.ceil(Math.log(e)/Math.log(2))))}function Wn(e,t,n){const s=1-e%2,a=new Float32Array(e);for(let r=0;r<e;++r){const i=2*Math.PI*r/(e+s-1);a[r]=t-n*Math.cos(i)}return(0,fn.R)(a,"float32")}const Un=async function(e,t,n=1){const s=(0,x._1)(e,"predictions","inTopK"),a=(0,x._1)(t,"targets","inTopK");(0,E.hu)(s.rank>1,(()=>`inTopK() expects the predictions to be of rank 2 or higher, but got ${s.rank}`)),(0,E.hu)(s.rank-1===a.rank,(()=>`predictions rank should be 1 larger than targets rank, but got predictions rank ${s.rank} and targets rank ${a.rank}`)),(0,E.k5)(s.shape.slice(0,s.shape.length-1),a.shape,"predictions's shape should be align with the targets' shape, except the last dimension.");const r=s.shape[s.shape.length-1];(0,E.hu)(n>0&&n<=r,(()=>`'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${r}), but got ${n}`));const i=await s.data(),o=await a.data(),[l,u]=[i.length/r,r],c=(0,E.WP)("bool",l);for(let e=0;e<l;e++){const t=e*u,s=i.subarray(t,t+u),a=[];for(let e=0;e<s.length;e++)a.push({value:s[e],index:e});a.sort(((e,t)=>t.value-e.value)),c[e]=0;for(let t=0;t<n;t++)if(a[t].index===o[e]){c[e]=1;break}}return e!==s&&s.dispose(),t!==a&&a.dispose(),(0,dn.X)(c,a.shape,"bool")};var Gn=n(4624);const Hn=(0,N.op)({hammingWindow_:function(e){return Wn(e,.54,.46)}}),jn=(0,N.op)({hannWindow_:function(e){return Wn(e,.5,.5)}}),Xn=(0,N.op)({frame_:function(e,t,n,s=!1,a=0){let r=0;const i=[];for(;r+t<=e.size;)i.push((0,S.t)(e,r,t)),r+=n;if(s)for(;r<e.size;){const s=r+t-e.size,o=(0,v.z)([(0,S.t)(e,r,t-s),(0,ve.h)([s],a)]);i.push(o),r+=n}return 0===i.length?gn([],[0,t]):(0,ye.X)((0,v.z)(i),[i.length,t])}}),qn=(0,N.op)({stft_:function(e,t,n,s,a=jn){null==s&&(s=Vn(t));const r=Xn(e,t,n),i=(0,w.d)(r,a(t)),o=[];for(let e=0;e<r.shape[0];e++)o.push((0,nn.Q)((0,S.t)(i,[e,0],[1,t]),s));return(0,v.z)(o)}}),Kn=(0,N.op)({cropAndResize_:function(e,t,n,s,a="bilinear",r=0){const i=(0,x._1)(e,"image","cropAndResize"),o=(0,x._1)(t,"boxes","cropAndResize","float32"),l=(0,x._1)(n,"boxInd","cropAndResize","int32"),u=o.shape[0];E.hu(4===i.rank,(()=>`Error in cropAndResize: image must be rank 4,but got rank ${i.rank}.`)),E.hu(2===o.rank&&4===o.shape[1],(()=>`Error in cropAndResize: boxes must be have size [${u},4] but had shape ${o.shape}.`)),E.hu(1===l.rank&&l.shape[0]===u,(()=>`Error in cropAndResize: boxInd must be have size [${u}] but had shape ${o.shape}.`)),E.hu(2===s.length,(()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${s.length}.`)),E.hu(s[0]>=1&&s[1]>=1,(()=>`cropSize must be atleast [1,1], but was ${s}`)),E.hu("bilinear"===a||"nearest"===a,(()=>`method must be bilinear or nearest, but was ${a}`));const c={image:i,boxes:o,boxInd:l},h={method:a,extrapolationValue:r,cropSize:s};return ae.BV.runKernel(re.Vc,c,h)}}),Yn=(0,N.op)({flipLeftRight_:function(e){const t=(0,x._1)(e,"image","flipLeftRight","float32");E.hu(4===t.rank,(()=>`Error in flipLeftRight: image must be rank 4,but got rank ${t.rank}.`));const n={image:t};return ae.BV.runKernel(re.Uy,n,{})}}),Qn=(0,N.op)({rotateWithOffset_:function(e,t,n=0,s=.5){const a=(0,x._1)(e,"image","rotateWithOffset","float32");E.hu(4===a.rank,(()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${a.rank}.`));const r={image:a},i={radians:t,fillValue:n,center:s};return ae.BV.runKernel(re.b9,r,i)}});function Jn(e,t,n,s,a,r){null==s&&(s=.5),null==a&&(a=Number.NEGATIVE_INFINITY),null==r&&(r=0);const i=e.shape[0];return n=Math.min(n,i),E.hu(0<=s&&s<=1,(()=>`iouThreshold must be in [0, 1], but was '${s}'`)),E.hu(2===e.rank,(()=>`boxes must be a 2D tensor, but was of rank '${e.rank}'`)),E.hu(4===e.shape[1],(()=>`boxes must have 4 columns, but 2nd dimension was ${e.shape[1]}`)),E.hu(1===t.rank,(()=>"scores must be a 1D tensor")),E.hu(t.shape[0]===i,(()=>`scores has incompatible shape with boxes. Expected ${i}, but was ${t.shape[0]}`)),E.hu(0<=r&&r<=1,(()=>`softNmsSigma must be in [0, 1], but was '${r}'`)),{maxOutputSize:n,iouThreshold:s,scoreThreshold:a,softNmsSigma:r}}const Zn=(0,N.op)({nonMaxSuppression_:function(e,t,n,s=.5,a=Number.NEGATIVE_INFINITY){const r=(0,x._1)(e,"boxes","nonMaxSuppression"),i=(0,x._1)(t,"scores","nonMaxSuppression"),o=Jn(r,i,n,s,a),l={maxOutputSize:n=o.maxOutputSize,iouThreshold:s=o.iouThreshold,scoreThreshold:a=o.scoreThreshold};return ae.BV.runKernel(re.uv,{boxes:r,scores:i},l)}});var es=n(3337);const ts=(0,N.op)({nonMaxSuppressionWithScore_:function(e,t,n,s=.5,a=Number.NEGATIVE_INFINITY,r=0){const i=(0,x._1)(e,"boxes","nonMaxSuppression"),o=(0,x._1)(t,"scores","nonMaxSuppression"),l=Jn(i,o,n,s,a,r),u={boxes:i,scores:o},c={maxOutputSize:n=l.maxOutputSize,iouThreshold:s=l.iouThreshold,scoreThreshold:a=l.scoreThreshold,softNmsSigma:r=l.softNmsSigma},h=ae.BV.runKernel(re.W0,u,c);return{selectedIndices:h[0],selectedScores:h[1]}}}),ns=(0,N.op)({nonMaxSuppressionPadded_:function(e,t,n,s=.5,a=Number.NEGATIVE_INFINITY,r=!1){const i=(0,x._1)(e,"boxes","nonMaxSuppression"),o=(0,x._1)(t,"scores","nonMaxSuppression"),l=Jn(i,o,n,s,a,null),u={boxes:i,scores:o},c={maxOutputSize:l.maxOutputSize,iouThreshold:l.iouThreshold,scoreThreshold:l.scoreThreshold,padToMaxOutputSize:r},h=ae.BV.runKernel(re.cy,u,c);return{selectedIndices:h[0],validOutputs:h[1]}}});var ss=n(3305),as=n(5098);const rs=(0,N.op)({transform_:function(e,t,n="nearest",s="constant",a=0,r){const i=(0,x._1)(e,"image","transform","float32"),o=(0,x._1)(t,"transforms","transform","float32");E.hu(4===i.rank,(()=>`Error in transform: image must be rank 4,but got rank ${i.rank}.`)),E.hu(2===o.rank&&(o.shape[0]===i.shape[0]||1===o.shape[0])&&8===o.shape[1],(()=>"Error in transform: Input transform should be batch x 8 or 1 x 8")),E.hu(null==r||2===r.length,(()=>`Error in transform: outputShape must be [height, width] or null, but got ${r}.`));const l={image:i,transforms:o},u={interpolation:n,fillMode:s,fillValue:a,outputShape:r};return ae.BV.runKernel(re.wx,l,u)}}),is=(0,N.op)({bandPart_:function(e,t,n){(0,E.hu)(t%1==0,(()=>`bandPart(): numLower must be an integer, got ${t}.`)),(0,E.hu)(n%1==0,(()=>`bandPart(): numUpper must be an integer, got ${n}.`));const s=(0,x._1)(e,"a","bandPart");(0,E.hu)(s.rank>=2,(()=>`bandPart(): Rank must be at least 2, got ${s.rank}.`));const a=s.shape,[r,i]=s.shape.slice(-2);if(!(t<=r))throw new Error(`bandPart(): numLower (${t}) must not be greater than the number of rows (${r}).`);if(!(n<=i))throw new Error(`bandPart(): numUpper (${n}) must not be greater than the number of columns (${i}).`);t<0&&(t=r),n<0&&(n=i);const o=(0,ye.X)((0,Ct.w)(0,r,1,"int32"),[-1,1]),l=(0,Ct.w)(0,i,1,"int32"),u=(0,nt.l)(o,l),c=(0,Pe.H)((0,Re.z)(u,(0,Bt.i)(+t,"int32")),(0,Se.b)(u,(0,Bt.i)(-n,"int32"))),h=(0,An.l)([r,i],s.dtype);return(0,ye.X)((0,ln.k)((0,Sn.H)((0,ye.X)(s,[-1,r,i])).map((e=>(0,Cn.a)(c,e,h)))),a)}}),os=(0,N.op)({gramSchmidt_:function(e){let t;if(Array.isArray(e)){t=!1,(0,E.hu)(null!=e&&e.length>0,(()=>"Gram-Schmidt process: input must not be null, undefined, or empty"));const n=e[0].shape[0];for(let t=1;t<e.length;++t)(0,E.hu)(e[t].shape[0]===n,(()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${e[t].shape[0]} vs. ${n})`))}else t=!0,e=(0,sn.V)(e,e.shape[0],0).map((e=>(0,on.L)(e,[0])));(0,E.hu)(e.length<=e[0].shape[0],(()=>`Gram-Schmidt: Number of vectors (${e.length}) exceeds number of dimensions (${e[0].shape[0]}).`));const n=[],s=e;for(let t=0;t<e.length;++t)n.push(ae.BV.tidy((()=>{let e=s[t];if(t>0)for(let s=0;s<t;++s){const t=(0,w.d)((0,hn.S)((0,w.d)(n[s],e)),n[s]);e=(0,nt.l)(e,t)}return(0,le.h)(e,(0,Fn.K)(e,"euclidean"))})));return t?(0,ln.k)(n,0):n}});var ls=n(4368);function us(e,t=!1){return ae.BV.tidy((()=>{(0,E.hu)(2===e.shape.length,(()=>`qr2d() requires a 2D Tensor, but got a ${e.shape.length}D Tensor.`));const n=e.shape[0],s=e.shape[1];let a=xe(n),r=(0,P.d)(e);const i=gn([[1]],[1,1]);let o=(0,P.d)(i);const l=n>=s?s:n;for(let e=0;e<l;++e){const t=r,l=o,u=a;[o,r,a]=ae.BV.tidy((()=>{const t=(0,S.t)(r,[e,e],[n-e,1]),l=(0,Fn.K)(t),u=(0,S.t)(r,[e,e],[1,1]),c=(0,Cn.a)((0,Ie.p)(u,0),gn([[-1]]),gn([[1]])),h=(0,nt.l)(u,(0,w.d)(c,l)),p=(0,le.h)(t,h);o=1===p.shape[0]?(0,P.d)(i):(0,v.z)([i,(0,S.t)(p,[1,0],[p.shape[0]-1,p.shape[1]])],0);const d=(0,it.W)((0,le.h)((0,k.O)(c,h),l)),f=(0,S.t)(r,[e,0],[n-e,s]),m=(0,w.d)(d,o),g=(0,Rn.p)(o);if(0===e)r=(0,nt.l)(f,(0,k.O)(m,(0,k.O)(g,f)));else{const t=(0,nt.l)(f,(0,k.O)(m,(0,k.O)(g,f)));r=(0,v.z)([(0,S.t)(r,[0,0],[e,s]),t],0)}const y=(0,Rn.p)(m),b=(0,S.t)(a,[0,e],[n,a.shape[1]-e]);if(0===e)a=(0,nt.l)(b,(0,k.O)((0,k.O)(b,o),y));else{const t=(0,nt.l)(b,(0,k.O)((0,k.O)(b,o),y));a=(0,v.z)([(0,S.t)(a,[0,0],[n,e]),t],1)}return[o,r,a]})),(0,ls.B9)([t,l,u])}return!t&&n>s&&(a=(0,S.t)(a,[0,0],[n,s]),r=(0,S.t)(r,[0,0],[s,s])),[a,r]}))}const cs=(0,N.op)({qr_:function(e,t=!1){if((0,E.hu)(e.rank>=2,(()=>`qr() requires input tensor to have a rank >= 2, but got rank ${e.rank}`)),2===e.rank)return us(e,t);{const n=e.shape.slice(0,e.shape.length-2).reduce(((e,t)=>e*t)),s=(0,Sn.H)((0,ye.X)(e,[n,e.shape[e.shape.length-2],e.shape[e.shape.length-1]]),0),a=[],r=[];return s.forEach((e=>{const[n,s]=us(e,t);a.push(n),r.push(s)})),[(0,ye.X)((0,ln.k)(a,0),e.shape),(0,ye.X)((0,ln.k)(r,0),e.shape)]}}});var hs=n(9876);const ps=(0,N.op)({computeWeightedLoss_:function(e,t,n=hs.I.SUM_BY_NONZERO_WEIGHTS){const s=(0,x._1)(e,"losses","computeWeightedLoss");let a=null;null!=t&&(a=(0,x._1)(t,"weights","computeWeightedLoss"));const r=null==a?s:(0,w.d)(s,a);if(n===hs.I.NONE)return r;if(n===hs.I.SUM)return(0,hn.S)(r);if(n===hs.I.MEAN){if(null==a)return(0,Ke.J)(r);{const e=s.size/a.size,t=(0,le.h)((0,hn.S)(r),(0,hn.S)(a));return e>1?(0,le.h)(t,(0,Bt.i)(e)):t}}if(n===hs.I.SUM_BY_NONZERO_WEIGHTS){if(null==a)return(0,le.h)((0,hn.S)(r),(0,Bt.i)(s.size));{const e=(0,w.d)(a,(0,ut.i)(s.shape)),t=(0,z.p)((0,hn.S)((0,ot.Q)(e,(0,Bt.i)(0))),"float32");return(0,le.h)((0,hn.S)(r),t)}}throw Error(`Unknown reduction: ${n}`)}}),ds=(0,N.op)({absoluteDifference_:function(e,t,n,a=hs.I.SUM_BY_NONZERO_WEIGHTS){const r=(0,x._1)(e,"labels","absoluteDifference"),i=(0,x._1)(t,"predictions","absoluteDifference");let o=null;null!=n&&(o=(0,x._1)(n,"weights","absoluteDifference")),(0,E.k5)(r.shape,i.shape,"Error in absoluteDifference: ");const l=(0,s.W)((0,nt.l)(r,i));return ps(l,o,a)}}),fs=(0,N.op)({cosineDistance_:function(e,t,n,s,a=hs.I.SUM_BY_NONZERO_WEIGHTS){const r=(0,x._1)(e,"labels","cosineDistance"),i=(0,x._1)(t,"predictions","cosineDistance");let o=null;null!=s&&(o=(0,x._1)(s,"weights","cosineDistance")),(0,E.k5)(r.shape,i.shape,"Error in cosineDistance: ");const l=(0,Bt.i)(1),u=(0,nt.l)(l,(0,hn.S)((0,w.d)(r,i),n,!0));return ps(u,o,a)}}),ms=(0,N.op)({hingeLoss_:function(e,t,n,s=hs.I.SUM_BY_NONZERO_WEIGHTS){let a=(0,x._1)(e,"labels","hingeLoss");const r=(0,x._1)(t,"predictions","hingeLoss");let i=null;null!=n&&(i=(0,x._1)(n,"weights","hingeLoss")),(0,E.k5)(a.shape,r.shape,"Error in hingeLoss: ");const o=(0,Bt.i)(1);a=(0,nt.l)((0,w.d)((0,Bt.i)(2),a),o);const l=(0,Et.U)((0,nt.l)(o,(0,w.d)(a,r)));return ps(l,i,s)}}),gs=(0,N.op)({huberLoss_:function(e,t,n,a=1,r=hs.I.SUM_BY_NONZERO_WEIGHTS){const o=(0,x._1)(e,"labels","huberLoss"),l=(0,x._1)(t,"predictions","huberLoss");let u=null;null!=n&&(u=(0,x._1)(n,"weights","huberLoss")),(0,E.k5)(o.shape,l.shape,"Error in huberLoss: ");const c=(0,Bt.i)(a),h=(0,s.W)((0,nt.l)(l,o)),p=(0,Qe.L)(h,c),d=(0,nt.l)(h,p),f=(0,i.I)((0,w.d)((0,Bt.i)(.5),(0,tt.h)(p)),(0,w.d)(c,d));return ps(f,u,r)}}),ys=(0,N.op)({logLoss_:function(e,t,n,s=1e-7,a=hs.I.SUM_BY_NONZERO_WEIGHTS){const r=(0,x._1)(e,"labels","logLoss"),o=(0,x._1)(t,"predictions","logLoss");let l=null;null!=n&&(l=(0,x._1)(n,"weights","logLoss")),(0,E.k5)(r.shape,o.shape,"Error in logLoss: ");const u=(0,Bt.i)(1),c=(0,Bt.i)(s),h=(0,it.W)((0,w.d)(r,(0,Oe.c)((0,i.I)(o,c)))),p=(0,w.d)((0,nt.l)(u,r),(0,Oe.c)((0,i.I)((0,nt.l)(u,o),c))),d=(0,nt.l)(h,p);return ps(d,l,a)}}),bs=(0,N.op)({meanSquaredError_:function(e,t,n,s=hs.I.SUM_BY_NONZERO_WEIGHTS){const a=(0,x._1)(e,"labels","meanSquaredError"),r=(0,x._1)(t,"predictions","meanSquaredError");let i=null;null!=n&&(i=(0,x._1)(n,"weights","meanSquaredError")),(0,E.k5)(a.shape,r.shape,"Error in meanSquaredError: ");const o=(0,rn.$)(a,r);return ps(o,i,s)}}),xs=(0,N.op)({sigmoidCrossEntropy_:function(e,t,n,a=0,r=hs.I.SUM_BY_NONZERO_WEIGHTS){let o=(0,x._1)(e,"multiClassLabels","sigmoidCrossEntropy");const l=(0,x._1)(t,"logits","sigmoidCrossEntropy");let u=null;if(null!=n&&(u=(0,x._1)(n,"weights","sigmoidCrossEntropy")),(0,E.k5)(o.shape,l.shape,"Error in sigmoidCrossEntropy: "),a>0){const e=(0,Bt.i)(a),t=(0,Bt.i)(1),n=(0,Bt.i)(.5);o=(0,i.I)((0,w.d)(o,(0,nt.l)(t,e)),(0,w.d)(n,e))}const c=function(e,t){const n=(0,x._1)(e,"labels","sigmoidCrossEntropyWithLogits"),a=(0,x._1)(t,"logits","sigmoidCrossEntropyWithLogits");(0,E.k5)(n.shape,a.shape,"Error in sigmoidCrossEntropyWithLogits: ");const r=(0,Et.U)(a),o=(0,w.d)(a,n),l=(0,Me.K)((0,fe.Q)((0,it.W)((0,s.W)(a))));return(0,i.I)((0,nt.l)(r,o),l)}(o,l);return ps(c,u,r)}});var vs=n(633);const ks=(0,N.op)({softmaxCrossEntropy_:function(e,t,n,s=0,a=hs.I.SUM_BY_NONZERO_WEIGHTS){let r=(0,x._1)(e,"onehotLabels","softmaxCrossEntropy");const o=(0,x._1)(t,"logits","softmaxCrossEntropy");let l=null;if(null!=n&&(l=(0,x._1)(n,"weights","softmaxCrossEntropy")),(0,E.k5)(r.shape,o.shape,"Error in softmaxCrossEntropy: "),s>0){const e=(0,Bt.i)(s),t=(0,Bt.i)(1),n=(0,Bt.i)(r.shape[1]);r=(0,i.I)((0,w.d)(r,(0,nt.l)(t,e)),(0,le.h)(e,n))}const u=function(e,t,n=-1){if(-1===n&&(n=t.rank-1),n!==t.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${t.rank} and dim was ${n}`);return(0,vs.cb)(((e,t,s)=>{const a=(0,Be.l)(t,[n],!0),r=(0,nt.l)((0,z.p)(t,"float32"),a);s([e,r]);const i=(0,it.W)((0,w.d)(r,e));return{value:(0,hn.S)(i,[n]),gradFunc:(e,t)=>{const[s,a]=t,r=(0,et.rv)(e.shape,[n]);return[(0,w.d)((0,ye.X)(e,r),(0,nt.l)((0,z.p)(s,"float32"),(0,fe.Q)(a))),(0,w.d)((0,ye.X)(e,r),(0,nt.l)((0,fe.Q)(a),(0,z.p)(s,"float32")))]}}}))(e,t)}(r,o);return ps(u,l,a)}}),ws={fft:Zt.k,ifft:en.S,rfft:nn.Q,irfft:tn.w},Ns={hammingWindow:Hn,hannWindow:jn,frame:Xn,stft:qn},Is={flipLeftRight:Yn,resizeNearestNeighbor:as.j,resizeBilinear:ss.I,rotateWithOffset:Qn,cropAndResize:Kn,nonMaxSuppression:Zn,nonMaxSuppressionAsync:async function(e,t,n,s=.5,a=Number.NEGATIVE_INFINITY){const r=(0,x._1)(e,"boxes","nonMaxSuppressionAsync"),i=(0,x._1)(t,"scores","nonMaxSuppressionAsync"),o=Jn(r,i,n,s,a);n=o.maxOutputSize,s=o.iouThreshold,a=o.scoreThreshold;const l=await Promise.all([r.data(),i.data()]),u=l[0],c=l[1],{selectedIndices:h}=(0,es.GP)(u,c,n,s,a);return r!==e&&r.dispose(),i!==t&&i.dispose(),(0,fn.R)(h,"int32")},nonMaxSuppressionWithScore:ts,nonMaxSuppressionWithScoreAsync:async function(e,t,n,s=.5,a=Number.NEGATIVE_INFINITY,r=0){const i=(0,x._1)(e,"boxes","nonMaxSuppressionAsync"),o=(0,x._1)(t,"scores","nonMaxSuppressionAsync"),l=Jn(i,o,n,s,a,r);n=l.maxOutputSize,s=l.iouThreshold,a=l.scoreThreshold,r=l.softNmsSigma;const u=await Promise.all([i.data(),o.data()]),c=u[0],h=u[1],{selectedIndices:p,selectedScores:d}=(0,es.pA)(c,h,n,s,a,r);return i!==e&&i.dispose(),o!==t&&o.dispose(),{selectedIndices:(0,fn.R)(p,"int32"),selectedScores:(0,fn.R)(d)}},nonMaxSuppressionPadded:ns,nonMaxSuppressionPaddedAsync:async function(e,t,n,s=.5,a=Number.NEGATIVE_INFINITY,r=!1){const i=(0,x._1)(e,"boxes","nonMaxSuppressionAsync"),o=(0,x._1)(t,"scores","nonMaxSuppressionAsync"),l=Jn(i,o,n,s,a,null),u=l.maxOutputSize,c=l.iouThreshold,h=l.scoreThreshold,[p,d]=await Promise.all([i.data(),o.data()]),{selectedIndices:f,validOutputs:m}=(0,es.qP)(p,d,u,c,h,r);return i!==e&&i.dispose(),o!==t&&o.dispose(),{selectedIndices:(0,fn.R)(f,"int32"),validOutputs:(0,Bt.i)(m,"int32")}},transform:rs},Ss={bandPart:is,gramSchmidt:os,qr:cs},Ts={absoluteDifference:ds,computeWeightedLoss:ps,cosineDistance:fs,hingeLoss:ms,huberLoss:gs,logLoss:ys,meanSquaredError:bs,sigmoidCrossEntropy:xs,softmaxCrossEntropy:ks}},9682:(e,t,n)=>{"use strict";n.d(t,{v:()=>i});var s=n(7097),a=n(9121),r=n(3740);const i=(0,n(2668).op)({pad_:function(e,t,n=0){const i=(0,r._1)(e,"x","pad");if(0===i.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");const o={paddings:t,constantValue:n},l={x:i};return s.BV.runKernel(a.ly,l,o)}})},5860:(e,t,n)=>{"use strict";n.d(t,{d:()=>p});var s=n(3740),a=n(569),r=n(5176),i=n(8441),o=n(2582),l=n(1174),u=n(2668),c=n(4968),h=n(7918);const p=(0,u.op)({pool_:function(e,t,n,u,p,d){null==p&&(p=[1,1]),null==d&&(d=1),0===u&&(u="valid");const f=(0,s._1)(e,"x","maxPool");let m=f,g=!1;3===f.rank&&(g=!0,m=(0,c.X)(f,[1,f.shape[0],f.shape[1],f.shape[2]])),a.hu(o.jT(d,p),(()=>`Error in pool: Either strides or dilations must be 1. Got strides ${d} and dilations '${p}'`));const y=o.Xw(m.shape,t,d,p,u),b=[y.dilationHeight,y.dilationWidth];let x;x="same"===u?function(e,t){const n=e.map(((e,n)=>e+(e-1)*(t[n]-1))).map((e=>e-1)),s=n.map((e=>Math.floor(e/2))),a=n.map(((e,t)=>e-s[t]));return n.map(((e,t)=>[s[t],a[t]]))}([y.filterHeight,y.filterWidth],b):[[0,0],[0,0]];const v=1===b[0]&&1===b[1],[k,w]=function(e,t,n){const s=n.map((e=>e[0])),a=n.map((e=>e[1])),r=e.concat(s,a),i=t.map(((e,t)=>(e-r[t]%e)%e)),o=a.map(((e,t)=>e+i[t]));return[t.map(((e,t)=>[s[t],o[t]])),t.map(((e,t)=>[0,i[t]]))]}([y.inHeight,y.inWidth],b,x),N=v?u:"valid",I=v?m:(0,h.f)(m,b,k),S=("avg"===n?()=>(0,r.w)(I,t,d,N):()=>(0,l._)(I,t,d,N))(),T=v?S:(0,i.E)(S,b,w);return g?(0,c.X)(T,[T.shape[1],T.shape[2],T.shape[3]]):T}})},3453:(e,t,n)=>{"use strict";n.d(t,{s:()=>o});var s=n(7097),a=n(9121),r=n(747),i=n(3740);const o=(0,n(2668).op)({pow_:function(e,t){let n=(0,i._1)(e,"base","pow"),o=(0,i._1)(t,"exp","pow");[n,o]=(0,r.makeTypesMatch)(n,o);const l={a:n,b:o};return s.BV.runKernel(a.pe,l)}})},8151:(e,t,n)=>{"use strict";n.d(t,{A:()=>i});var s=n(7097),a=n(9121),r=n(3740);const i=(0,n(2668).op)({prelu_:function(e,t){const n={x:(0,r._1)(e,"x","prelu"),alpha:(0,r._1)(t,"alpha","prelu")};return s.BV.runKernel(a.o0,n)}})},9798:(e,t,n)=>{"use strict";function s(e,t=!1){console.log(e.toString(t))}n.d(t,{S:()=>s})},9451:(e,t,n)=>{"use strict";n.d(t,{W:()=>o});var s=n(7097),a=n(9121),r=n(3740),i=n(2271);const o=(0,n(2668).op)({prod_:function(e,t=null,n=!1){let o=(0,r._1)(e,"x","prod");"bool"===o.dtype&&(o=(0,i.p)(o,"int32"));const l={x:o},u={axis:t,keepDims:n};return s.BV.runKernel(a.Dl,l,u)}})},6845:(e,t,n)=>{"use strict";n.d(t,{Yi:()=>a,T9:()=>r,wv:()=>i});var s=n(6377);class a{constructor(e,t,n,a,r){this.mean=e,this.stdDev=t,this.dtype=n,this.nextVal=NaN,this.truncated=a,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);const i=r||Math.random();this.random=s.alea(i.toString())}nextValue(){if(!isNaN(this.nextVal)){const e=this.nextVal;return this.nextVal=NaN,e}let e,t,n=!1;for(;!n;){let s,a,r;do{s=2*this.random()-1,a=2*this.random()-1,r=s*s+a*a}while(r>=1||0===r);const i=Math.sqrt(-2*Math.log(r)/r);e=this.mean+this.stdDev*s*i,t=this.mean+this.stdDev*a*i,this.truncated&&!this.isValidTruncated(e)||(n=!0)}return this.truncated&&!this.isValidTruncated(t)||(this.nextVal=this.convertValue(t)),this.convertValue(e)}convertValue(e){return null==this.dtype||"float32"===this.dtype?e:Math.round(e)}isValidTruncated(e){return e<=this.upper&&e>=this.lower}}class r{constructor(e,t,n,r){this.alpha=e,this.beta=1/t,this.dtype=n;const i=r||Math.random();this.randu=s.alea(i.toString()),this.randn=new a(0,1,n,!1,this.randu()),this.d=e<1?e+2/3:e-1/3,this.c=1/Math.sqrt(9*this.d)}nextValue(){let e,t,n,s,a,r;for(;;){do{s=this.randn.nextValue(),r=1+this.c*s}while(r<=0);if(r*=r*r,e=s*s,t=1-.331*e*e,n=.5*e+this.d*(1-r+Math.log(r)),a=this.randu(),a<t||Math.log(a)<n)break}return r=1/this.beta*this.d*r,this.alpha<1&&(r*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(r)}convertValue(e){return"float32"===this.dtype?e:Math.round(e)}}class i{constructor(e=0,t=1,n,a){if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=e,this.range=t-e,this.dtype=n,null==a&&(a=Math.random()),"number"==typeof a&&(a=a.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${e} - ${t} <= 1 and dtype is not float`);this.random=s.alea(a)}convertValue(e){return this.canReturnFloat()?e:Math.round(e)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}},5002:(e,t,n)=>{"use strict";n.d(t,{L:()=>i});var s=n(2657),a=n(2668),r=n(6845);const i=(0,a.op)({randomUniform_:function(e,t=0,n=1,a="float32",i){const o=(0,s.f)(e,a),l=new r.wv(t,n,null,i);for(let e=0;e<o.values.length;e++)o.values[e]=l.nextValue();return o.toTensor()}})},7245:(e,t,n)=>{"use strict";n.d(t,{w:()=>r});var s=n(7097),a=n(9121);function r(e,t,n=1,r="float32"){if(0===n)throw new Error("Cannot have a step of zero");const i={start:e,stop:t,step:n,dtype:r};return s.BV.runKernel(a.e6,{},i)}},766:(e,t,n)=>{"use strict";n.d(t,{k:()=>i});var s=n(7097),a=n(9121),r=n(3740);const i=(0,n(2668).op)({real_:function(e){const t={input:(0,r._1)(e,"input","real")};return s.BV.runKernel(a.xJ,t)}})},9036:(e,t,n)=>{"use strict";n.d(t,{M:()=>i});var s=n(7097),a=n(9121),r=n(3740);const i=(0,n(2668).op)({reciprocal_:function(e){const t={x:(0,r._1)(e,"x","reciprocal")};return s.BV.runKernel(a.$H,t)}})},7409:(e,t,n)=>{"use strict";n.d(t,{U:()=>i});var s=n(7097),a=n(9121),r=n(3740);const i=(0,n(2668).op)({relu_:function(e){const t={x:(0,r._1)(e,"x","relu")};return s.BV.runKernel(a.qk,t)}})},3582:(e,t,n)=>{"use strict";n.d(t,{b:()=>i});var s=n(7097),a=n(9121),r=n(3740);const i=(0,n(2668).op)({relu6_:function(e){const t={x:(0,r._1)(e,"x","relu6")};return s.BV.runKernel(a.Sb,t)}})},4968:(e,t,n)=>{"use strict";n.d(t,{X:()=>i});var s=n(7097),a=n(9121),r=n(3740);const i=(0,n(2668).op)({reshape_:function(e,t){const n={x:(0,r._1)(e,"x","reshape","string_or_numeric")},i={shape:t};return s.BV.runKernel(a.HZ,n,i)}})},7486:(e,t,n)=>{"use strict";n.d(t,{G:()=>i});var s=n(7097),a=n(9121),r=n(3740);const i=(0,n(2668).op)({reverse_:function(e,t){const n={x:(0,r._1)(e,"x","reverse")},i={dims:t};return s.BV.runKernel(a.mK,n,i)}})},7809:(e,t,n)=>{"use strict";n.d(t,{N:()=>i});var s=n(7097),a=n(9121),r=n(3740);const i=(0,n(2668).op)({round_:function(e){const t={x:(0,r._1)(e,"x","round")};return s.BV.runKernel(a.e0,t)}})},2634:(e,t,n)=>{"use strict";n.d(t,{b:()=>i});var s=n(7097),a=n(9121),r=n(3740);const i=(0,n(2668).op)({rsqrt_:function(e){const t={x:(0,r._1)(e,"x","rsqrt")};return s.BV.runKernel(a.bV,t)}})},9494:(e,t,n)=>{"use strict";n.d(t,{i:()=>r});var s=n(569),a=n(7852);function r(e,t){if(((0,s.fU)(e)&&"string"!==t||Array.isArray(e))&&"complex64"!==t)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===t&&(0,s.fU)(e)&&!(e instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return(0,a.H)(e,[],[],t)}},3100:(e,t,n)=>{"use strict";n.d(t,{s:()=>l});var s=n(7097),a=n(9121),r=n(3740),i=n(2668),o=n(3028);const l=(0,i.op)({scatterND_:function(e,t,n){const i=(0,r._1)(e,"indices","scatterND","int32"),l=(0,r._1)(t,"updates","scatterND");o.validateInput(l,i,n);const u={indices:i,updates:l},c={shape:n};return s.BV.runKernel(a.xQ,u,c)}})},3028:(e,t,n)=>{"use strict";n.r(t),n.d(t,{validateUpdateShape:()=>a,validateInput:()=>r,calculateShapes:()=>i});var s=n(569);function a(e,t,n){const s=t.rank>1?t.shape[t.rank-1]:1,a=t.rank>1?t.rank-1:1,r=`Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${n.shape}, indices.shape: ${t.shape}, shape: ${e}, sliceDim: ${s}, and batchDim: ${a}.`;if(n.rank<a)throw new Error(r+` update.rank < ${a}. `);if(e.length<s+(n.rank-a))throw new Error(r+` Output shape length < ${s+(n.rank-a)}`);if(n.rank!==a+e.length-s)throw new Error(r+" update.rank != "+(a+e.length-s));for(let e=0;e<a;++e)if(n.shape[e]!==t.shape[e])throw new Error(r+` updates.shape[${e}] (${n.shape[e]}) != indices.shape[${e}] (${t.shape[e]}).`);for(let t=0;t<n.rank-a;++t)if(n.shape[t+a]!==e[t+s])throw new Error(r+` updates.shape[${t+a}] (${n.shape[t+a]}) != shape[${t+a}] (${e[t+a]})`)}function r(e,t,n){if(t.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`);if(e.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${e.rank}.`);if("int32"!==t.dtype)throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${t.dtype}`);if(n.length<1)throw new Error(`Output rank must be greater or equal to 1, but got shape: ${n}`);if(0===n.length){if(0===t.size)throw new Error(`Indices specified for empty output. indices shape: ${t.shape}`);if(0===e.size)throw new Error(`Updates specified for empty output. updates shape: ${e.shape}`)}a(n,t,e)}function i(e,t,n){const a=t.shape.length,r=a>1?t.shape[a-1]:1,i=n.length;let o=1;for(let e=r;e<i;++e)o*=n[e];const l=r<1?1:r;return{sliceRank:r,numUpdates:(0,s.NA)(t.shape)/l,sliceSize:o,strides:[...(0,s.e3)(n.slice(0,r)),1],outputSize:(0,s.NA)(n)}}},5503:(e,t,n)=>{"use strict";n.d(t,{U:()=>i});var s=n(7097),a=n(9121),r=n(3740);const i=(0,n(2668).op)({selu_:function(e){const t={x:(0,r._1)(e,"x","selu")};return s.BV.runKernel(a.oF,t)}})},3179:(e,t,n)=>{"use strict";n.d(t,{y:()=>s,$:()=>a});const s=1.7580993408473768,a=1.0507009873554805},8678:(e,t,n)=>{"use strict";n.d(t,{U:()=>u});var s=n(3740),a=n(569),r=n(4794),i=n(4718),o=n(2668),l=n(4968);const u=(0,o.op)({separableConv2d_:function(e,t,n,o,u,c=[1,1],h="NHWC"){const p=(0,s._1)(e,"x","separableConv2d"),d=(0,s._1)(t,"depthwiseFilter","separableConv2d"),f=(0,s._1)(n,"pointwiseFilter","separableConv2d");let m=p,g=!1;if(3===p.rank&&(g=!0,m=(0,l.X)(p,[1,p.shape[0],p.shape[1],p.shape[2]])),"NCHW"===h)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");a.hu(4===m.rank,(()=>`Error in separableConv2d: input must be rank 4, but got rank ${m.rank}.`)),a.hu(4===d.rank,(()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${d.rank}.`)),a.hu(4===f.rank,(()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${d.rank}.`)),a.hu(1===f.shape[0],(()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${f.shape[0]}.`)),a.hu(1===f.shape[1],(()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${f.shape[1]}.`));const y=d.shape[2],b=d.shape[3];a.hu(f.shape[2]===y*b,(()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${y*b}, but got ${f.shape[2]}.`));const x=(0,i.B)(m,d,o,u,h,c),v=(0,r.T)(x,f,1,"valid",h);return g?(0,l.X)(v,[v.shape[1],v.shape[2],v.shape[3]]):v}})},6567:(e,t,n)=>{"use strict";n.d(t,{O:()=>i});var s=n(4077),a=n(3740),r=n(569);const i=async function(e,t){const n=(0,a._1)(e,"x","setdiff1d"),i=(0,a._1)(t,"y","setdiff1d");r.hu(n.dtype===i.dtype,(()=>`x and y should have the same dtype, but got x (${n.dtype}) and y (${i.dtype}).`)),r.hu(1===n.rank,(()=>`x should be 1D tensor, but got x (${n.shape}).`)),r.hu(1===i.rank,(()=>`y should be 1D tensor, but got y (${i.shape}).`));const o=await n.data(),l=await i.data(),u=new Set(l);let c=0;for(let e=0;e<o.length;e++)u.has(o[e])||c++;const h=new s.YD([c],n.dtype),p=new s.YD([c],"int32");for(let e=0,t=0;e<o.length;e++)u.has(o[e])||(h.values[t]=o[e],p.values[t]=e,t++);return[h.toTensor(),p.toTensor()]}},625:(e,t,n)=>{"use strict";n.d(t,{X:()=>i});var s=n(7097),a=n(9121),r=n(3740);const i=(0,n(2668).op)({sigmoid_:function(e){const t={x:(0,r._1)(e,"x","sigmoid")};return s.BV.runKernel(a.a5,t)}})},4434:(e,t,n)=>{"use strict";n.d(t,{X:()=>i});var s=n(7097),a=n(9121),r=n(3740);const i=(0,n(2668).op)({sign_:function(e){const t={x:(0,r._1)(e,"x","sign")};return s.BV.runKernel(a.i5,t)}})},9331:(e,t,n)=>{"use strict";n.d(t,{O:()=>i});var s=n(7097),a=n(9121),r=n(3740);const i=(0,n(2668).op)({sin_:function(e){const t={x:(0,r._1)(e,"x","sin")};return s.BV.runKernel(a.RQ,t)}})},3254:(e,t,n)=>{"use strict";n.d(t,{R:()=>i});var s=n(7097),a=n(9121),r=n(3740);const i=(0,n(2668).op)({sinh_:function(e){const t={x:(0,r._1)(e,"x","sinh")};return s.BV.runKernel(a.w3,t)}})},2676:(e,t,n)=>{"use strict";n.d(t,{t:()=>i});var s=n(7097),a=n(9121),r=n(3740);const i=(0,n(2668).op)({slice_:function(e,t,n){const i=(0,r._1)(e,"x","slice","string_or_numeric");if(0===i.rank)throw new Error("Slicing scalar is not possible");const o={x:i},l={begin:t,size:n};return s.BV.runKernel(a.p2,o,l)}})},7650:(e,t,n)=>{"use strict";n.r(t),n.d(t,{assertParamsValid:()=>a,maskToAxes:()=>r,computeOutShape:()=>i,stridesWithElidedDims:()=>o,getNormalizedAxes:()=>c,startIndicesWithElidedDims:()=>h,stopIndicesWithElidedDims:()=>p,stridesForAxis:()=>d,startForAxis:()=>f,stopForAxis:()=>m,isSliceContinous:()=>g,computeFlatOffset:()=>y,parseSliceParams:()=>b,sliceInfo:()=>x});var s=n(569);function a(e,t,n){const a=e.shape.length;s.hu(a===t.length,(()=>`Error in slice${a}D: Length of begin ${t} must match the rank of the array (${a}).`)),s.hu(a===n.length,(()=>`Error in slice${a}D: Length of size ${n} must match the rank of the array (${a}).`));for(let r=0;r<a;++r)s.hu(t[r]+n[r]<=e.shape[r],(()=>`Error in slice${a}D: begin[${r}] + size[${r}] (${t[r]+n[r]}) would overflow input.shape[${r}] (${e.shape[r]})`))}function r(e){const t=[];let n=0;for(;e>0;)1&e&&t.push(n),e/=2,n++;return t}function i(e,t,n){const s=[];for(let a=0;a<e.length;a++)s[a]=Math.ceil((t[a]-e[a])/n[a]);return s}function o(e,t,n,s){const a=[...e];for(let e=a.length;e<s.length;e++)a.push(1);for(let e=0;e<n;e++)0===e?a[t]=1:(a.splice(t,0,1),a.pop());return a}function l(e,t,n){return n<=e?n:n-(t-1)}function u(e,t){const n=[];for(let s=0;s<e;s++)n.push(t+s);return n}function c(e,t,n,s,a,r,i,l,u){const c=e.length;let g=new Array(c),y=new Array(c),b=new Array(c);if(t.length&&n>0){const u=t[0],c=n+1;g=h(i,u,c,s,e),y=p(l,u,c,a,e),b=o(r,u,c,e)}else for(let t=0;t<c;t++)g[t]=f(i,s,r,e,t,u),y[t]=m(l,a,r,e,t,u),b[t]=d(r,t,u);return{begin:g,end:y,strides:b}}function h(e,t,n,s,a){const r=[...a],i=u(n,t);for(let a=0;a<r.length;a++)if(i.indexOf(a)>-1)r[a]=0;else{const i=l(t,n,a);let o=s[i];e&1<<i&&(o=0),r[a]=o}return r}function p(e,t,n,a,r){const i=[...r],o=u(n,t);for(let s=0;s<i.length;s++)if(o.indexOf(s)>-1)i[s]=Number.MAX_SAFE_INTEGER;else{const r=l(t,n,s);let o=a[r];e&1<<r&&(o=Number.MAX_SAFE_INTEGER),i[s]=o}for(let e=0;e<i.length;e++){const t=r[e];i[e]<0&&(i[e]+=t),i[e]=s.uZ(0,i[e],r[e])}return i}function d(e,t,n){let s=e[t];return(n&1<<t||null==s)&&(s=1),s}function f(e,t,n,a,r,i){let o=t[r];const l=n[r]||1;(e&1<<r||i&1<<r||null==o)&&(o=l>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);const u=a[r];return o<0&&(o+=u),o=s.uZ(0,o,u-1),o}function m(e,t,n,a,r,i){let o=t[r];const l=n[r]||1;(e&1<<r||i&1<<r||null==o)&&(o=l>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);const u=a[r];return o<0&&(o+=u),o=l>0?s.uZ(0,o,u):s.uZ(-1,o,u-1),o}function g(e,t,n){let s=n.length;for(let e=0;e<n.length;e++)if(n[e]>1){s=e;break}for(let a=s+1;a<n.length;a++)if(t[a]>0||n[a]!==e[a])return!1;return!0}function y(e,t){let n=e.length>0?e[e.length-1]:1;for(let s=0;s<e.length-1;s++)n+=e[s]*t[s];return n}function b(e,t,n){let a;const r=e.shape.length;let i;return a="number"==typeof t?[t,...new Array(r-1).fill(0)]:t.length<r?t.concat(new Array(r-t.length).fill(0)):t.slice(),a.forEach((e=>{s.hu(-1!==e,(()=>"slice() does not support negative begin indexing."))})),i=null==n?new Array(r).fill(-1):"number"==typeof n?[n,...new Array(r-1).fill(-1)]:n.length<r?n.concat(new Array(r-n.length).fill(-1)):n,i=i.map(((t,n)=>t>=0?t:(s.hu(-1===t,(()=>`Negative size values should be exactly -1 but got ${t} for the slice() size at index ${n}.`)),e.shape[n]-a[n]))),[a,i]}function x(e,t,n,s,a,o,l,u,h){let p=t.slice(),d=n.slice(),f=s;null==s&&(f=new Array(p.length));const m=r(l);if(m.length>1)throw new Error("Multiple ellipses in slice is not allowed.");if(0!==l&&0!==u)throw new Error("Using both ellipsisMask and newAxisMask is not yet supported.");if(0!==l&&0!==h)throw new Error("Using both ellipsisMask and shrinkAxisMask is not yet supported.");const g=e.length-p.length,y=r(u),b=e.slice();y.forEach((e=>{p[e]=0,d[e]=1,b.splice(e,0,1)}));const{begin:x,end:v,strides:k}=c(b,m,g,p,d,f,a,o,l);p=x,d=v,f=k;const w=r(h);w.forEach((e=>{d[e]=p[e]+1,f[e]=1}));const N=i(p,d,f),I=N.filter(((e,t)=>-1===w.indexOf(t)));return{nonStrided:f.every((e=>1===e)),$begin:p,$end:d,$strides:f,size:N,newShape:b,outShape:I}}},682:(e,t,n)=>{"use strict";n.d(t,{X:()=>i});var s=n(7097),a=n(9121),r=n(3740);const i=(0,n(2668).op)({softmax_:function(e,t=-1){const n=(0,r._1)(e,"logits","softmax","float32");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and dim was ${t}`);const i={logits:n},o={dim:t};return s.BV.runKernel(a.Gc,i,o)}})},3694:(e,t,n)=>{"use strict";n.d(t,{W:()=>i});var s=n(7097),a=n(9121),r=n(3740);const i=(0,n(2668).op)({softplus_:function(e){const t={x:(0,r._1)(e,"x","softplus")};return s.BV.runKernel(a.MR,t)}})},7918:(e,t,n)=>{"use strict";n.d(t,{f:()=>o});var s=n(7097),a=n(9121),r=n(3740),i=n(569);const o=(0,n(2668).op)({spaceToBatchND_:function(e,t,n){const o=(0,r._1)(e,"x","spaceToBatchND");i.hu(o.rank>=1+t.length,(()=>`input rank ${o.rank} should be > than [blockShape] ${t.length}`)),i.hu(n.length===t.length,(()=>`paddings.shape[0] ${n.length} must be equal to [blockShape] ${t.length}`)),i.hu(o.shape.reduce(((e,s,a)=>a>0&&a<=t.length?e&&(s+n[a-1][0]+n[a-1][1])%t[a-1]==0:e),!0),(()=>`input spatial dimensions ${o.shape.slice(1)} with paddings ${n.toString()} must be divisible by blockShapes ${t.toString()}`));const l={x:o},u={blockShape:t,paddings:n};return s.BV.runKernel(a.TQ,l,u)}})},9758:(e,t,n)=>{"use strict";n.d(t,{e:()=>i});var s=n(7097),a=n(9121),r=n(3740);const i=(0,n(2668).op)({sparseToDense_:function(e,t,n,i=0){const o=(0,r._1)(e,"sparseIndices","sparseToDense","int32"),l=(0,r._1)(t,"sparseValues","sparseToDense"),u=(0,r._1)(i,"defaultValue","sparseToDense",l.dtype);!function(e,t,n,s){if("int32"!==e.dtype)throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${e.dtype}.`);if(e.rank>2)throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${e.shape}.`);const a=e.rank>0?e.shape[0]:1,r=e.rank>1?e.shape[1]:1;if(n.length!==r)throw new Error(`outputShape has incorrect number of elements:, ${n.length}, should be: ${r}.`);const i=t.size;if(0!==t.rank&&(1!==t.rank||i!==a))throw new Error(`sparseValues has incorrect shape ${t.shape}, should be [] or [${a}]`);if(t.dtype!==s.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(o,l,n,u);const c={sparseIndices:o,sparseValues:l,defaultValue:u},h={outputShape:n};return s.BV.runKernel(a.D2,c,h)}})},7020:(e,t,n)=>{"use strict";n.d(t,{k:()=>i});var s=n(7097),a=n(9121),r=n(569);const i=(0,n(2668).op)({fft_:function(e){(0,r.hu)("complex64"===e.dtype,(()=>`The dtype for tf.spectral.fft() must be complex64 but got ${e.dtype}.`));const t={input:e};return s.BV.runKernel(a.vw,t)}})},8447:(e,t,n)=>{"use strict";n.d(t,{S:()=>i});var s=n(7097),a=n(9121),r=n(569);const i=(0,n(2668).op)({ifft_:function(e){(0,r.hu)("complex64"===e.dtype,(()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${e.dtype}.`));const t={input:e};return s.BV.runKernel(a.Qg,t)}})},4415:(e,t,n)=>{"use strict";n.d(t,{w:()=>f});var s=n(1661),a=n(6884),r=n(4386),i=n(4841),o=n(2668),l=n(766),u=n(4968),c=n(7486),h=n(9494),p=n(2676),d=n(8447);const f=(0,o.op)({irfft_:function(e){const t=e.shape[e.shape.length-1],n=e.size/t;let o;if(t<=2){const s=(0,u.X)(e,[n,t]);o=(0,d.S)(s)}else{const f=[n,2*(t-1)],m=(0,u.X)((0,l.k)(e),[n,t]),g=(0,u.X)((0,r.a)(e),[n,t]),y=(0,c.G)((0,p.t)(m,[0,1],[n,t-2]),1),b=(0,i.d)((0,c.G)((0,p.t)(g,[0,1],[n,t-2]),1),(0,h.i)(-1)),x=(0,a.z)([m,y],1),v=(0,a.z)([g,b],1),k=(0,u.X)((0,s.P)(x,v),[f[0],f[1]]);o=(0,d.S)(k)}if(o=(0,l.k)(o),3===e.rank&&0!==e.shape[0]){const t=o,n=e.shape[0];o=(0,u.X)(o,[n,o.shape[0]/n,o.shape[1]]),t.dispose()}return o}})},3710:(e,t,n)=>{"use strict";n.d(t,{Q:()=>m});var s=n(569),a=n(1661),r=n(6884),i=n(4386),o=n(2668),l=n(766),u=n(4968),c=n(2676),h=n(8644),p=n(9640),d=n(6577),f=n(7020);const m=(0,o.op)({rfft_:function(e,t){(0,s.hu)("float32"===e.dtype,(()=>`The dtype for rfft() must be real value but got ${e.dtype}`));let n=e.shape[e.shape.length-1];const o=e.size/n;let m;if(null!=t&&t<n){const s=e.shape.map((e=>0)),a=e.shape.map((e=>e));a[e.shape.length-1]=t,m=(0,c.t)(e,s,a),n=t}else if(null!=t&&t>n){const s=e.shape.map((e=>e));s[e.shape.length-1]=t-n,m=(0,r.z)([e,(0,p.l)(s)],e.shape.length-1),n=t}else m=e;const g=(0,d.P)(m),y=(0,u.X)((0,a.P)(m,g),[o,n]),b=(0,f.k)(y),x=Math.floor(n/2)+1,v=(0,l.k)(b),k=(0,i.a)(b),w=(0,h.V)(v,[x,n-x],v.shape.length-1),N=(0,h.V)(k,[x,n-x],k.shape.length-1),I=m.shape.slice();return I[m.shape.length-1]=x,(0,u.X)((0,a.P)(w[0],N[0]),I)}})},8644:(e,t,n)=>{"use strict";n.d(t,{V:()=>i});var s=n(7097),a=n(9121),r=n(3740);const i=(0,n(2668).op)({split_:function(e,t,n=0){const i={x:(0,r._1)(e,"x","split")},o={numOrSizeSplits:t,axis:n};return s.BV.runKernel(a.L8,i,o)}})},3261:(e,t,n)=>{"use strict";n.d(t,{_:()=>i});var s=n(7097),a=n(9121),r=n(3740);const i=(0,n(2668).op)({sqrt_:function(e){const t={x:(0,r._1)(e,"x","sqrt")};return s.BV.runKernel(a.FK,t)}})},248:(e,t,n)=>{"use strict";n.d(t,{h:()=>r});var s=n(7097),a=n(3740);const r=(0,n(2668).op)({square_:function(e){const t=(0,a._1)(e,"x","square");return s.BV.runKernel("Square",{x:t},{})}})},5265:(e,t,n)=>{"use strict";n.d(t,{$:()=>l});var s=n(7097),a=n(9121),r=n(747),i=n(3740),o=n(2200);const l=(0,n(2668).op)({squaredDifference_:function(e,t){let n=(0,i._1)(e,"a","squaredDifference"),l=(0,i._1)(t,"b","squaredDifference");[n,l]=(0,r.makeTypesMatch)(n,l),(0,o.$N)(n.shape,l.shape);const u={a:n,b:l};return s.BV.runKernel(a._t,u,{})}})},9590:(e,t,n)=>{"use strict";n.d(t,{L:()=>o});var s=n(3740),a=n(569),r=n(2668),i=n(4968);const o=(0,r.op)({squeeze_:function(e,t){const n=(0,s._1)(e,"x","squeeze");return(0,i.X)(n,(0,a.bp)(n.shape,t).newShape)}})},2991:(e,t,n)=>{"use strict";n.d(t,{k:()=>o});var s=n(7097),a=n(9121),r=n(3740),i=n(569);const o=(0,n(2668).op)({stack_:function(e,t=0){const n=(0,r.sI)(e,"tensors","stack","string_or_numeric");i.hu(n.length>=1,(()=>"Pass at least one tensor to tf.stack")),n.length>0&&i.hu(t<=n[0].rank,(()=>"Axis must be <= rank of the tensor"));const o=n,l={axis:t};return s.BV.runKernel(a.Qi,o,l)}})},1901:(e,t,n)=>{"use strict";n.d(t,{N:()=>i});var s=n(7097),a=n(9121),r=n(3740);const i=(0,n(2668).op)({step_:function(e,t=0){const n={x:(0,r._1)(e,"x","step")},i={alpha:t};return s.BV.runKernel(a.h8,n,i)}})},5158:(e,t,n)=>{"use strict";n.d(t,{N:()=>i});var s=n(7097),a=n(9121),r=n(3740);const i=(0,n(2668).op)({stridedSlice_:function(e,t,n,i,o=0,l=0,u=0,c=0,h=0){const p={x:(0,r._1)(e,"x","stridedSlice")},d={begin:t,end:n,strides:i,beginMask:o,endMask:l,ellipsisMask:u,newAxisMask:c,shrinkAxisMask:h};return s.BV.runKernel(a.m2,p,d)}})},827:(e,t,n)=>{"use strict";n.d(t,{l:()=>o});var s=n(7097),a=n(9121),r=n(747),i=n(3740);const o=(0,n(2668).op)({sub_:function(e,t){let n=(0,i._1)(e,"a","sub"),o=(0,i._1)(t,"b","sub");[n,o]=(0,r.makeTypesMatch)(n,o);const l={a:n,b:o};return s.BV.runKernel(a.Tr,l)}})},5475:(e,t,n)=>{"use strict";n.d(t,{S:()=>o});var s=n(7097),a=n(9121),r=n(3740),i=n(2271);const o=(0,n(2668).op)({sum_:function(e,t=null,n=!1){let o=(0,r._1)(e,"x","sum");"bool"===o.dtype&&(o=(0,i.p)(o,"int32"));const l={x:o},u={axis:t,keepDims:n};return s.BV.runKernel(a.GB,l,u)}})},1173:(e,t,n)=>{"use strict";n.d(t,{O:()=>i});var s=n(7097),a=n(9121),r=n(3740);const i=(0,n(2668).op)({tan_:function(e){const t={x:(0,r._1)(e,"x","tan")};return s.BV.runKernel(a.sE,t)}})},1869:(e,t,n)=>{"use strict";n.d(t,{A:()=>i});var s=n(7097),a=n(9121),r=n(3740);const i=(0,n(2668).op)({tanh_:function(e){const t={x:(0,r._1)(e,"x","tanh")};return s.BV.runKernel(a.MI,t)}})},701:(e,t,n)=>{"use strict";n.d(t,{X:()=>r});var s=n(3740),a=n(7852);function r(e,t,n){const r=(0,s.C)(e,n);return(0,a.H)(e,t,r,n)}},6092:(e,t,n)=>{"use strict";n.d(t,{R:()=>i});var s=n(3740),a=n(569),r=n(7852);function i(e,t){(0,a.Cq)(e);const n=(0,s.C)(e,t);if(1!==n.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return(0,r.H)(e,null,n,t)}},9906:(e,t,n)=>{"use strict";n.d(t,{w:()=>i});var s=n(3740),a=n(569),r=n(7852);function i(e,t,n){if((0,a.Cq)(e),null!=t&&3!==t.length)throw new Error("tensor3d() requires shape to have three numbers");const i=(0,s.C)(e,n);if(3!==i.length&&1!==i.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===i.length&&null==t)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return(0,r.H)(e,t,i,n)}},7852:(e,t,n)=>{"use strict";n.d(t,{H:()=>i});var s=n(7097),a=n(569),r=n(9155);function i(e,t,n,i){if(null==i&&(i=(0,a.D2)(e)),"complex64"===i)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(!(0,a.fU)(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=t){(0,a.Mu)(t);const e=(0,a.NA)(t),s=(0,a.NA)(n);(0,a.hu)(e===s,(()=>`Based on the provided shape, [${t}], the tensor should have ${e} values but has ${s}`));for(let e=0;e<n.length;++e){const s=n[e],r=e!==n.length-1||s!==(0,a.NA)(t.slice(e));(0,a.hu)(n[e]===t[e]||!r,(()=>`Error creating a new Tensor. Inferred shape (${n}) does not match the provided shape (${t}). `))}}return(0,a.fU)(e)||Array.isArray(e)||(e=[e]),t=t||n,e="string"!==i?(0,r.toTypedArray)(e,i):(0,a.xH)(e,[],!0),s.BV.makeTensor(e,t,i)}},7501:(e,t,n)=>{"use strict";n.d(t,{G:()=>o});var s=n(7097),a=n(9121),r=n(3740),i=n(569);const o=(0,n(2668).op)({tile_:function(e,t){const n=(0,r._1)(e,"x","tile","string_or_numeric");i.hu(n.rank===t.length,(()=>`Error in transpose: rank of input ${n.rank} must match length of reps ${t}.`));const o={x:n},l={reps:t};return s.BV.runKernel(a.n9,o,l)}})},3243:(e,t,n)=>{"use strict";n.d(t,{h:()=>i});var s=n(7097),a=n(9121),r=n(3740);const i=(0,n(2668).op)({topk_:function(e,t=1,n=!0){const i=(0,r._1)(e,"x","topk");if(0===i.rank)throw new Error("topk() expects the input to be of rank 1 or higher");const o=i.shape[i.shape.length-1];if(t>o)throw new Error(`'k' passed to topk() must be <= the last dimension (${o}) but got ${t}`);const l={x:i},u={k:t,sorted:n},[c,h]=s.BV.runKernel(a.cW,l,u);return{values:c,indices:h}}})},9065:(e,t,n)=>{"use strict";n.d(t,{p:()=>o});var s=n(7097),a=n(9121),r=n(3740),i=n(569);const o=(0,n(2668).op)({transpose_:function(e,t){const n=(0,r._1)(e,"x","transpose");if(null==t&&(t=n.shape.map(((e,t)=>t)).reverse()),i.hu(n.rank===t.length,(()=>`Error in transpose: rank of input ${n.rank} must match length of perm ${t}.`)),t.forEach((e=>{i.hu(e>=0&&e<n.rank,(()=>"All entries in 'perm' must be between 0 and "+(n.rank-1)+` but got ${t}`))})),n.rank<=1)return n.clone();const o={x:n},l={perm:t};return s.BV.runKernel(a.G3,o,l)}})},3596:(e,t,n)=>{"use strict";n.d(t,{X:()=>i});var s=n(2657),a=n(2668),r=n(6845);const i=(0,a.op)({truncatedNormal_:function(e,t=0,n=1,a,i){if(null!=a&&"bool"===a)throw new Error("Unsupported data type $ { dtype }");const o=new r.Yi(t,n,a,!0,i),l=(0,s.f)(e,a);for(let e=0;e<l.values.length;e++)l.values[e]=o.nextValue();return l.toTensor()}})},9608:(e,t,n)=>{"use strict";n.d(t,{T:()=>o});var s=n(7097),a=n(9121),r=n(3740),i=n(569);const o=(0,n(2668).op)({unique_:function(e,t=0){const n=(0,r._1)(e,"x","unique","string_or_numeric");(0,i.hu)(n.rank>0,(()=>"The input tensor must be at least 1D"));const o={x:n},l={axis:t},[u,c]=s.BV.runKernel(a.kp,o,l);return{values:u,indices:c}}})},8749:(e,t,n)=>{"use strict";n.d(t,{p:()=>o});var s=n(7097),a=n(9121),r=n(3740),i=n(569);const o=(0,n(2668).op)({unsortedSegmentSum_:function(e,t,n){const o=(0,r._1)(e,"x","unsortedSegmentSum"),l=(0,r._1)(t,"segmentIds","unsortedSegmentSum","int32");(0,i.hu)((0,i.GN)(n),(()=>"numSegments must be of dtype int"));const u={x:o,segmentIds:l},c={numSegments:n};return s.BV.runKernel(a.Qv,u,c)}})},4136:(e,t,n)=>{"use strict";n.d(t,{H:()=>o});var s=n(7097),a=n(9121),r=n(3740),i=n(569);const o=(0,n(2668).op)({unstack_:function(e,t=0){const n=(0,r._1)(e,"x","unstack","string_or_numeric");i.hu(t>=-n.shape.length&&t<n.shape.length,(()=>`Axis = ${t} is not in [-${n.shape.length}, ${n.shape.length})`));const o={value:n},l={axis:t};return s.BV.runKernel(a.To,o,l)}})},5912:(e,t,n)=>{"use strict";n.d(t,{a:()=>u});var s=n(7097),a=n(9121),r=n(3740),i=n(569),o=n(8247),l=n(2200);const u=(0,n(2668).op)({where_:function(e,t,n){const u=(0,r._1)(t,"a","where"),c=(0,r._1)(n,"b","where"),h=(0,r._1)(e,"condition","where","bool"),p=(0,l.$N)(u.shape,c.shape),d=(0,o.U)(u,p),f=(0,o.U)(c,p);1===h.rank&&(0,i.hu)(h.shape[0]===u.shape[0],(()=>"The first dimension of `a` must match the size of `condition`.")),1!==h.rank&&(0,i.k5)(h.shape,f.shape,"Error in where: ");const m={condition:h,t:d,e:f};return s.BV.runKernel(a.Ph,m)}})},6380:(e,t,n)=>{"use strict";n.d(t,{i:()=>r});var s=n(8333),a=n(3740);const r=async function(e){const t=(0,a._1)(e,"condition","whereAsync","bool"),n=await t.data(),r=(0,s.Z)(t.shape,n);return e!==t&&t.dispose(),r}},9640:(e,t,n)=>{"use strict";n.d(t,{l:()=>i});var s=n(7097),a=n(569),r=n(1661);function i(e,t="float32"){if("complex64"===t){const t=i(e,"float32"),n=i(e,"float32");return(0,r.P)(t,n)}const n=(0,a.wT)((0,a.NA)(e),t);return s.BV.makeTensor(n,e,t)}},6577:(e,t,n)=>{"use strict";n.d(t,{P:()=>i});var s=n(7097),a=n(9121),r=n(3740);const i=(0,n(2668).op)({zerosLike_:function(e){const t={x:(0,r._1)(e,"x","zerosLike")};return s.BV.runKernel(a.Ru,t)}})},4077:(e,t,n)=>{"use strict";n.d(t,{es:()=>b,YD:()=>h,_w:()=>v,t3:()=>x,FZ:()=>y,Vp:()=>g,Vi:()=>m});var s=n(5938),a=n(569);function r(e,t,n,s){const r=(0,a.e3)(t),o=function(e,t,n,s){const r=(0,a.NA)(t),o=s[s.length-1],l=new Array(o).fill(0),c=t.length,h="complex64"===n?u(e):e;if(c>1)for(let e=0;e<r/o;e++){const t=e*o;for(let e=0;e<o;e++)l[e]=Math.max(l[e],i(h[t+e],0,n).length)}return l}(e,t,n,r),c=t.length,h=l(e,t,n,r,o),p=["Tensor"];return s&&(p.push(`  dtype: ${n}`),p.push(`  rank: ${c}`),p.push(`  shape: [${t}]`),p.push("  values:")),p.push(h.map((e=>"    "+e)).join("\n")),p.join("\n")}function i(e,t,n){let s;return s=Array.isArray(e)?`${parseFloat(e[0].toFixed(7))} + ${parseFloat(e[1].toFixed(7))}j`:(0,a.HD)(e)?`'${e}'`:"bool"===n?o(e):parseFloat(e.toFixed(7)).toString(),(0,a.oj)(s,t)}function o(e){return 0===e?"false":"true"}function l(e,t,n,s,a,r=!0){const c="complex64"===n?2:1,h=t[0],p=t.length;if(0===p)return"complex64"===n?[i(u(e)[0],0,n)]:"bool"===n?[o(e[0])]:[e[0].toString()];if(1===p){if(h>20){const t=3*c;let s=Array.from(e.slice(0,t)),r=Array.from(e.slice((h-3)*c,h*c));return"complex64"===n&&(s=u(s),r=u(r)),["["+s.map(((e,t)=>i(e,a[t],n))).join(", ")+", ..., "+r.map(((e,t)=>i(e,a[h-3+t],n))).join(", ")+"]"]}return["["+("complex64"===n?u(e):Array.from(e)).map(((e,t)=>i(e,a[t],n))).join(", ")+"]"]}const d=t.slice(1),f=s.slice(1),m=s[0]*c,g=[];if(h>20){for(let t=0;t<3;t++){const s=t*m,r=s+m;g.push(...l(e.slice(s,r),d,n,f,a,!1))}g.push("...");for(let t=h-3;t<h;t++){const s=t*m,r=s+m;g.push(...l(e.slice(s,r),d,n,f,a,t===h-1))}}else for(let t=0;t<h;t++){const s=t*m,r=s+m;g.push(...l(e.slice(s,r),d,n,f,a,t===h-1))}const y=2===p?",":"";g[0]="["+g[0]+y;for(let e=1;e<g.length-1;e++)g[e]=" "+g[e]+y;let b=",\n";for(let e=2;e<p;e++)b+="\n";return g[g.length-1]=" "+g[g.length-1]+"]"+(r?"":b),g}function u(e){const t=[];for(let n=0;n<e.length;n+=2)t.push([e[n],e[n+1]]);return t}var c=n(9155);class h{constructor(e,t,n){if(this.dtype=t,this.shape=e.slice(),this.size=a.NA(e),null!=n){const e=n.length;a.hu(e===this.size,(()=>`Length of values '${e}' does not match the size inferred by the shape '${this.size}'.`))}if("complex64"===t)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||a.rQ(t,this.size),this.strides=(0,a.e3)(e)}set(e,...t){0===t.length&&(t=[0]),a.hu(t.length===this.rank,(()=>`The number of provided coordinates (${t.length}) must match the rank (${this.rank})`));const n=this.locToIndex(t);this.values[n]=e}get(...e){0===e.length&&(e=[0]);let t=0;for(const n of e){if(n<0||n>=this.shape[t]){const t=`Requested out of range element at ${e}.   Buffer shape=${this.shape}`;throw new Error(t)}t++}let n=e[e.length-1];for(let t=0;t<e.length-1;++t)n+=this.strides[t]*e[t];return this.values[n]}locToIndex(e){if(0===this.rank)return 0;if(1===this.rank)return e[0];let t=e[e.length-1];for(let n=0;n<e.length-1;++n)t+=this.strides[n]*e[n];return t}indexToLoc(e){if(0===this.rank)return[];if(1===this.rank)return[e];const t=new Array(this.shape.length);for(let n=0;n<t.length-1;++n)t[n]=Math.floor(e/this.strides[n]),e-=t[n]*this.strides[n];return t[t.length-1]=e,t}get rank(){return this.shape.length}toTensor(){return p().makeTensor(this.values,this.shape,this.dtype)}}let p=null,d=null,f=null;function m(e){p=e}function g(e){d=e}function y(e){f=e}class b{constructor(e,t,n,s){this.kept=!1,this.isDisposedInternal=!1,this.shape=e.slice(),this.dtype=t||"float32",this.size=a.NA(e),this.strides=(0,a.e3)(e),this.dataId=n,this.id=s,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){const e=await this.data();return d.buffer(this.shape,this.dtype,e)}bufferSync(){return d.buffer(this.shape,this.dtype,this.dataSync())}async array(){const e=await this.data();return(0,a.GX)(this.shape,e)}arraySync(){return(0,a.GX)(this.shape,this.dataSync())}async data(){this.throwIfDisposed();const e=p().read(this.dataId);if("string"===this.dtype){const t=await e;try{return t.map((e=>c.decodeString(e)))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return e}dataSync(){this.throwIfDisposed();const e=p().readSync(this.dataId);if("string"===this.dtype)try{return e.map((e=>c.decodeString(e)))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return e}async bytes(){this.throwIfDisposed();const e=await p().read(this.dataId);return"string"===this.dtype?e:new Uint8Array(e.buffer)}dispose(){this.isDisposed||(p().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(e=!1){return d.print(this,e)}clone(){return this.throwIfDisposed(),d.clone(this)}toString(e=!1){return r(this.dataSync(),this.shape,this.dtype,e)}cast(e){return this.throwIfDisposed(),d.cast(this,e)}variable(e=!0,t,n){return this.throwIfDisposed(),p().makeVariable(this,e,t,n)}}function x(){return(0,s.R)("Tensor",(()=>b))}Object.defineProperty(b,Symbol.hasInstance,{value:e=>!!e&&null!=e.data&&null!=e.dataSync&&null!=e.throwIfDisposed}),x();class v extends b{constructor(e,t,n,s){super(e.shape,e.dtype,e.dataId,s),this.trainable=t,this.name=n}assign(e){if(e.dtype!==this.dtype)throw new Error(`dtype of the new value (${e.dtype}) and previous value (${this.dtype}) must match`);if(!a.cO(e.shape,this.shape))throw new Error(`shape of the new value (${e.shape}) and previous value (${this.shape}) must match`);p().disposeTensor(this),this.dataId=e.dataId,p().incRef(this,null)}dispose(){p().disposeVariable(this),this.isDisposedInternal=!0}}Object.defineProperty(v,Symbol.hasInstance,{value:e=>e instanceof b&&null!=e.assign&&e.assign instanceof Function})},747:(e,t,n)=>{"use strict";n.r(t),n.d(t,{makeTypesMatch:()=>i,assertTypesMatch:()=>o,isTensorInList:()=>l,getTensorsInContainer:()=>u});var s=n(4077),a=n(1221),r=n(569);function i(e,t){if(e.dtype===t.dtype)return[e,t];const n=(0,a.x8)(e.dtype,t.dtype);return[e.cast(n),t.cast(n)]}function o(e,t){(0,r.hu)(e.dtype===t.dtype,(()=>`The dtypes of the first(${e.dtype}) and second(${t.dtype}) input must match`))}function l(e,t){return t.some((t=>t.id===e.id))}function u(e){const t=[];return c(e,t,new Set),t}function c(e,t,n){if(null==e)return;if(e instanceof s.es)return void t.push(e);if(a=e,!Array.isArray(a)&&"object"!=typeof a)return;var a;const r=e;for(const e in r){const s=r[e];n.has(s)||(n.add(s),c(s,t,n))}}},3740:(e,t,n)=>{"use strict";n.d(t,{C:()=>l,_1:()=>h,sI:()=>p});var s=n(7097),a=n(2885),r=n(4077),i=n(569),o=n(9155);function l(e,t){let n=e;if((0,i.fU)(e))return"string"===t?[]:[e.length];if(!Array.isArray(e))return[];const s=[];for(;Array.isArray(n)||(0,i.fU)(n)&&"string"!==t;)s.push(n.length),n=n[0];return Array.isArray(e)&&(0,a.OB)().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&u(e,s,[]),s}function u(e,t,n){if(n=n||[],!Array.isArray(e)&&!(0,i.fU)(e))return void(0,i.hu)(0===t.length,(()=>`Element arr[${n.join("][")}] is a primitive, but should be an array/TypedArray of ${t[0]} elements`));(0,i.hu)(t.length>0,(()=>`Element arr[${n.join("][")}] should be a primitive, but is an array of ${e.length} elements`)),(0,i.hu)(e.length===t[0],(()=>`Element arr[${n.join("][")}] should have ${t[0]} elements, but has ${e.length} elements`));const s=t.slice(1);for(let t=0;t<e.length;++t)u(e[t],s,n.concat(t))}function c(e,t,n,s){if("string_or_numeric"!==e){if(null==e)throw new Error("Expected dtype cannot be null.");if("numeric"!==e&&e!==t||"numeric"===e&&"string"===t)throw new Error(`Argument '${n}' passed to '${s}' must be ${e} tensor, but got ${t} tensor`)}}function h(e,t,n,a="numeric"){if(e instanceof r.es)return c(a,e.dtype,t,n),e;let u=(0,i.D2)(e);if("string"!==u&&["bool","int32","float32"].indexOf(a)>=0&&(u=a),c(a,u,t,n),null==e||!(0,i.fU)(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e){const s=null==e?"null":e.constructor.name;throw new Error(`Argument '${t}' passed to '${n}' must be a Tensor or TensorLike, but got '${s}'`)}const h=l(e,u);(0,i.fU)(e)||Array.isArray(e)||(e=[e]);const p="string"!==u?(0,o.toTypedArray)(e,u):(0,i.xH)(e,[],!0);return s.BV.makeTensor(p,h,u)}function p(e,t,n,s="numeric"){if(!Array.isArray(e))throw new Error(`Argument ${t} passed to ${n} must be a \`Tensor[]\` or \`TensorLike[]\``);return e.map(((e,a)=>h(e,`${t}[${a}]`,n,s)))}},1221:(e,t,n)=>{"use strict";var s,a,r,i,o;n.d(t,{yw:()=>s,x8:()=>u,z4:()=>c}),function(e){e.R0="R0",e.R1="R1",e.R2="R2",e.R3="R3",e.R4="R4",e.R5="R5",e.R6="R6"}(s||(s={})),function(e){e.float32="float32",e.int32="int32",e.bool="int32",e.complex64="complex64"}(a||(a={})),function(e){e.float32="float32",e.int32="int32",e.bool="bool",e.complex64="complex64"}(r||(r={})),function(e){e.float32="float32",e.int32="float32",e.bool="float32",e.complex64="complex64"}(i||(i={})),function(e){e.float32="complex64",e.int32="complex64",e.bool="complex64",e.complex64="complex64"}(o||(o={}));const l={float32:i,int32:a,bool:r,complex64:o};function u(e,t){if("string"===e||"string"===t){if("string"===e&&"string"===t)return"string";throw new Error(`Can not upcast ${e} with ${t}`)}return l[e][t]}function c(e){return u(e,"int32")}},9155:(e,t,n)=>{"use strict";n.r(t),n.d(t,{arraysEqual:()=>a.cO,assert:()=>a.hu,assertNonNegativeIntegerDimensions:()=>a.Mu,assertNonNull:()=>a.Cq,assertShapesMatch:()=>a.k5,bytesFromStringArray:()=>a.Ub,bytesPerElement:()=>a.bT,checkConversionForErrors:()=>a.D5,clamp:()=>a.uZ,computeStrides:()=>a.e3,createShuffledIndices:()=>a.U$,distSquared:()=>a.E7,flatten:()=>a.xH,getArrayFromDType:()=>a.rQ,getTypedArrayFromDType:()=>a.WP,hasEncodingLoss:()=>a.QB,indexToLoc:()=>a.NE,inferDtype:()=>a.D2,inferFromImplicitShape:()=>a.JZ,isBoolean:()=>a.jn,isFunction:()=>a.mf,isInt:()=>a.GN,isNumber:()=>a.hj,isPromise:()=>a.tI,isScalarShape:()=>a.N9,isString:()=>a.HD,isTypedArray:()=>a.fU,isValidDtype:()=>a.LP,locToIndex:()=>a.qy,makeOnesTypedArray:()=>a.p8,makeZerosNestedTypedArray:()=>a.l6,makeZerosTypedArray:()=>a.wT,nearestDivisor:()=>a.jP,nearestLargerEven:()=>a.nY,parseAxisParam:()=>a.EC,randUniform:()=>a.bj,repeatedTry:()=>a.WD,rightPad:()=>a.oj,shuffle:()=>a.TV,shuffleCombo:()=>a.d7,sizeFromShape:()=>a.NA,sizeToSquarishShape:()=>a.YP,squeezeShape:()=>a.bp,sum:()=>a.Sm,tanh:()=>a.AE,toNestedArray:()=>a.GX,createScalarValue:()=>r,toTypedArray:()=>i,now:()=>o,fetch:()=>l,encodeString:()=>u,decodeString:()=>c});var s=n(2885),a=n(569);function r(e,t){return"string"===t?u(e):i([e],t)}function i(e,t){if("string"===t)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(e)&&(e=a.xH(e)),(0,s.OB)().getBool("DEBUG")&&a.D5(e,t),function(e,t){return e instanceof Float32Array&&"float32"===t||e instanceof Int32Array&&"int32"===t||e instanceof Uint8Array&&"bool"===t}(e,t))return e;if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t){const t=new Uint8Array(e.length);for(let n=0;n<t.length;++n)0!==Math.round(e[n])&&(t[n]=1);return t}throw new Error(`Unknown data type ${t}`)}function o(){return(0,s.OB)().platform.now()}function l(e,t){return(0,s.OB)().platform.fetch(e,t)}function u(e,t="utf-8"){return t=t||"utf-8",(0,s.OB)().platform.encode(e,t)}function c(e,t="utf-8"){return t=t||"utf-8",(0,s.OB)().platform.decode(e,t)}},569:(e,t,n)=>{"use strict";function s(e){let t=e.length,n=0,s=0;for(;t>0;)s=Math.random()*t|0,t--,n=e[t],e[t]=e[s],e[s]=n}function a(e,t){if(e.length!==t.length)throw new Error(`Array sizes must match to be shuffled together First array length was ${e.length}Second array length was ${t.length}`);let n,s,a=e.length,r=0;for(;a>0;)r=Math.random()*a|0,a--,n=e[a],s=t[a],e[a]=e[r],t[a]=t[r],e[r]=n,t[r]=s}function r(e,t,n){return Math.max(e,Math.min(t,n))}function i(e){return e%2==0?e:e+1}function o(e){let t=0;for(let n=0;n<e.length;n++)t+=e[n];return t}function l(e,t){const n=Math.random();return t*n+(1-n)*e}function u(e,t){let n=0;for(let s=0;s<e.length;s++){const a=Number(e[s])-Number(t[s]);n+=a*a}return n}function c(e,t){if(!e)throw new Error("string"==typeof t?t:t())}function h(e,t,n=""){c(g(e,t),(()=>n+` Shapes ${e} and ${t} must match`))}function p(e){c(null!=e,(()=>"The input to the tensor constructor must be a non-null value."))}function d(e,t=[],n=!1){if(null==t&&(t=[]),Array.isArray(e)||_(e)&&!n)for(let s=0;s<e.length;++s)d(e[s],t,n);else t.push(e);return t}function f(e){if(0===e.length)return 1;let t=e[0];for(let n=1;n<e.length;n++)t*=e[n];return t}function m(e){return 0===e.length}function g(e,t){if(e===t)return!0;if(null==e||null==t)return!1;if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}function y(e){return e%1==0}function b(e){if(null!=Math.tanh)return Math.tanh(e);if(e===1/0)return 1;if(e===-1/0)return-1;{const t=Math.exp(2*e);return(t-1)/(t+1)}}function x(e){const t=Math.ceil(Math.sqrt(e));return[t,Math.ceil(e/t)]}function v(e){const t=new Uint32Array(e);for(let n=0;n<e;++n)t[n]=n;return s(t),t}function k(e,t){return t<=e.length?e:e+" ".repeat(t-e.length)}function w(e,t=(e=>0),n){return new Promise(((s,a)=>{let r=0;const i=()=>{if(e())return void s();r++;const o=t(r);null!=n&&r>=n?a():setTimeout(i,o)};i()}))}function N(e,t){let n=1,s=-1;for(let t=0;t<e.length;++t)if(e[t]>=0)n*=e[t];else if(-1===e[t]){if(-1!==s)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${s} and dim ${t}`);s=t}else if(e[t]<0)throw Error(`Shapes can not be < 0. Found ${e[t]} at dim ${t}`);if(-1===s){if(t>0&&t!==n)throw Error(`Size(${t}) must match the product of shape ${e}`);return e}if(0===n)throw Error(`Cannot infer the missing size in [${e}] when there are 0 elements`);if(t%n!=0)throw Error(`The implicit shape can't be a fractional number. Got ${t} / ${n}`);const a=e.slice();return a[s]=t/n,a}function I(e,t){const n=t.length;return c((e=null==e?t.map(((e,t)=>t)):[].concat(e)).every((e=>e>=-n&&e<n)),(()=>`All values in axis param must be in range [-${n}, ${n}) but got axis ${e}`)),c(e.every((e=>y(e))),(()=>`All values in axis param must be integers but got axis ${e}`)),e.map((e=>e<0?n+e:e))}function S(e,t){const n=[],s=[],a=null!=t&&Array.isArray(t)&&0===t.length,r=null==t||a?null:I(t,e).sort();let i=0;for(let t=0;t<e.length;++t){if(null!=r){if(r[i]===t&&1!==e[t])throw new Error(`Can't squeeze axis ${t} since its dim '${e[t]}' is not 1`);(null==r[i]||r[i]>t)&&1===e[t]&&(n.push(e[t]),s.push(t)),r[i]<=t&&i++}1!==e[t]&&(n.push(e[t]),s.push(t))}return{newShape:n,keptDims:s}}function T(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else{if("bool"!==e)throw new Error(`Unknown data type ${e}`);n=new Uint8Array(t)}return n}function C(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else if("bool"===e)n=new Uint8Array(t);else{if("string"!==e)throw new Error(`Unknown data type ${e}`);n=new Array(t)}return n}function $(e,t){for(let n=0;n<e.length;n++){const s=e[n];if(isNaN(s)||!isFinite(s))throw Error(`A tensor of type ${t} being uploaded contains ${s}.`)}}function A(e){return"bool"===e||"complex64"===e||"float32"===e||"int32"===e||"string"===e}function E(e,t){return!("complex64"===t||"float32"===t&&"complex64"!==e||"int32"===t&&"float32"!==e&&"complex64"!==e||"bool"===t&&"bool"===e)}function _(e){return e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array}function R(e){if("float32"===e||"int32"===e)return 4;if("complex64"===e)return 8;if("bool"===e)return 1;throw new Error(`Unknown dtype ${e}`)}function F(e){if(null==e)return 0;let t=0;return e.forEach((e=>t+=e.length)),t}function D(e){return"string"==typeof e||e instanceof String}function O(e){return"boolean"==typeof e}function M(e){return"number"==typeof e}function z(e){return Array.isArray(e)?z(e[0]):e instanceof Float32Array?"float32":e instanceof Int32Array||e instanceof Uint8Array?"int32":M(e)?"float32":D(e)?"string":O(e)?"bool":"float32"}function L(e){return!!(e&&e.constructor&&e.call&&e.apply)}function B(e,t){for(let n=t;n<e;++n)if(e%n==0)return n;return e}function P(e){const t=e.length;if(t<2)return[];const n=new Array(t-1);n[t-2]=e[t-1];for(let s=t-3;s>=0;--s)n[s]=n[s+1]*e[s+1];return n}function V(e,t,n){const s=new Array;if(1===t.length){const a=t[0];for(let t=0;t<a;t++)s[t]=n[e+t]}else{const a=t[0],r=t.slice(1),i=r.reduce(((e,t)=>e*t));for(let t=0;t<a;t++)s[t]=V(e+t*i,r,n)}return s}function W(e,t){if(0===e.length)return t[0];const n=e.reduce(((e,t)=>e*t));if(0===n)return[];if(n!==t.length)throw new Error(`[${e}] does not match the input size ${t.length}.`);return V(0,e,t)}function U(e,t){const n=G(e,t);for(let e=0;e<n.length;e++)n[e]=1;return n}function G(e,t){if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t)return new Uint8Array(e);throw new Error(`Unknown data type ${t}`)}function H(e,t){const n=e.reduce(((e,t)=>e*t),1);if(null==t||"float32"===t)return W(e,new Float32Array(n));if("int32"===t)return W(e,new Int32Array(n));if("bool"===t)return W(e,new Uint8Array(n));throw new Error(`Unknown data type ${t}`)}function j(e){e.forEach((t=>{c(Number.isInteger(t)&&t>=0,(()=>`Tensor must have a shape comprised of positive integers but got shape [${e}].`))}))}function X(e,t,n){if(0===t)return 0;if(1===t)return e[0];let s=e[e.length-1];for(let t=0;t<e.length-1;++t)s+=n[t]*e[t];return s}function q(e,t,n){if(0===t)return[];if(1===t)return[e];const s=new Array(t);for(let t=0;t<s.length-1;++t)s[t]=Math.floor(e/n[t]),e-=s[t]*n[t];return s[s.length-1]=e,s}function K(e){return e&&e.then&&"function"==typeof e.then}n.d(t,{TV:()=>s,d7:()=>a,uZ:()=>r,nY:()=>i,Sm:()=>o,bj:()=>l,E7:()=>u,hu:()=>c,k5:()=>h,Cq:()=>p,xH:()=>d,NA:()=>f,N9:()=>m,cO:()=>g,GN:()=>y,AE:()=>b,YP:()=>x,U$:()=>v,oj:()=>k,WD:()=>w,JZ:()=>N,EC:()=>I,bp:()=>S,WP:()=>T,rQ:()=>C,D5:()=>$,LP:()=>A,QB:()=>E,fU:()=>_,bT:()=>R,Ub:()=>F,HD:()=>D,jn:()=>O,hj:()=>M,D2:()=>z,mf:()=>L,jP:()=>B,e3:()=>P,GX:()=>W,p8:()=>U,wT:()=>G,l6:()=>H,Mu:()=>j,qy:()=>X,NE:()=>q,tI:()=>K})},6377:(e,t,n)=>{var s=n(4832),a=n(8652),r=n(801),i=n(2030),o=n(3618),l=n(9049),u=n(1971);u.alea=s,u.xor128=a,u.xorwow=r,u.xorshift7=i,u.xor4096=o,u.tychei=l,e.exports=u},4832:function(e,t,n){var s;!function(e,a,r){function i(e){var t,n=this,s=(t=4022871197,function(e){e=e.toString();for(var n=0;n<e.length;n++){var s=.02519603282416938*(t+=e.charCodeAt(n));s-=t=s>>>0,t=(s*=t)>>>0,t+=4294967296*(s-=t)}return 2.3283064365386963e-10*(t>>>0)});n.next=function(){var e=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=e-(n.c=0|e)},n.c=1,n.s0=s(" "),n.s1=s(" "),n.s2=s(" "),n.s0-=s(e),n.s0<0&&(n.s0+=1),n.s1-=s(e),n.s1<0&&(n.s1+=1),n.s2-=s(e),n.s2<0&&(n.s2+=1),s=null}function o(e,t){return t.c=e.c,t.s0=e.s0,t.s1=e.s1,t.s2=e.s2,t}function l(e,t){var n=new i(e),s=t&&t.state,a=n.next;return a.int32=function(){return 4294967296*n.next()|0},a.double=function(){return a()+11102230246251565e-32*(2097152*a()|0)},a.quick=a,s&&("object"==typeof s&&o(s,n),a.state=function(){return o(n,{})}),a}a&&a.exports?a.exports=l:n.amdD&&n.amdO?void 0===(s=function(){return l}.call(t,n,t,a))||(a.exports=s):this.alea=l}(0,e=n.nmd(e),n.amdD)},9049:function(e,t,n){var s;!function(e,a,r){function i(e){var t=this,n="";t.next=function(){var e=t.b,n=t.c,s=t.d,a=t.a;return e=e<<25^e>>>7^n,n=n-s|0,s=s<<24^s>>>8^a,a=a-e|0,t.b=e=e<<20^e>>>12^n,t.c=n=n-s|0,t.d=s<<16^n>>>16^a,t.a=a-e|0},t.a=0,t.b=0,t.c=-1640531527,t.d=1367130551,e===Math.floor(e)?(t.a=e/4294967296|0,t.b=0|e):n+=e;for(var s=0;s<n.length+20;s++)t.b^=0|n.charCodeAt(s),t.next()}function o(e,t){return t.a=e.a,t.b=e.b,t.c=e.c,t.d=e.d,t}function l(e,t){var n=new i(e),s=t&&t.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},a.int32=n.next,a.quick=a,s&&("object"==typeof s&&o(s,n),a.state=function(){return o(n,{})}),a}a&&a.exports?a.exports=l:n.amdD&&n.amdO?void 0===(s=function(){return l}.call(t,n,t,a))||(a.exports=s):this.tychei=l}(0,e=n.nmd(e),n.amdD)},8652:function(e,t,n){var s;!function(e,a,r){function i(e){var t=this,n="";t.x=0,t.y=0,t.z=0,t.w=0,t.next=function(){var e=t.x^t.x<<11;return t.x=t.y,t.y=t.z,t.z=t.w,t.w^=t.w>>>19^e^e>>>8},e===(0|e)?t.x=e:n+=e;for(var s=0;s<n.length+64;s++)t.x^=0|n.charCodeAt(s),t.next()}function o(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t}function l(e,t){var n=new i(e),s=t&&t.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},a.int32=n.next,a.quick=a,s&&("object"==typeof s&&o(s,n),a.state=function(){return o(n,{})}),a}a&&a.exports?a.exports=l:n.amdD&&n.amdO?void 0===(s=function(){return l}.call(t,n,t,a))||(a.exports=s):this.xor128=l}(0,e=n.nmd(e),n.amdD)},3618:function(e,t,n){var s;!function(e,a,r){function i(e){var t=this;t.next=function(){var e,n,s=t.w,a=t.X,r=t.i;return t.w=s=s+1640531527|0,n=a[r+34&127],e=a[r=r+1&127],n^=n<<13,e^=e<<17,n^=n>>>15,e^=e>>>12,n=a[r]=n^e,t.i=r,n+(s^s>>>16)|0},function(e,t){var n,s,a,r,i,o=[],l=128;for(t===(0|t)?(s=t,t=null):(t+="\0",s=0,l=Math.max(l,t.length)),a=0,r=-32;r<l;++r)t&&(s^=t.charCodeAt((r+32)%t.length)),0===r&&(i=s),s^=s<<10,s^=s>>>15,s^=s<<4,s^=s>>>13,r>=0&&(i=i+1640531527|0,a=0==(n=o[127&r]^=s+i)?a+1:0);for(a>=128&&(o[127&(t&&t.length||0)]=-1),a=127,r=512;r>0;--r)s=o[a+34&127],n=o[a=a+1&127],s^=s<<13,n^=n<<17,s^=s>>>15,n^=n>>>12,o[a]=s^n;e.w=i,e.X=o,e.i=a}(t,e)}function o(e,t){return t.i=e.i,t.w=e.w,t.X=e.X.slice(),t}function l(e,t){null==e&&(e=+new Date);var n=new i(e),s=t&&t.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},a.int32=n.next,a.quick=a,s&&(s.X&&o(s,n),a.state=function(){return o(n,{})}),a}a&&a.exports?a.exports=l:n.amdD&&n.amdO?void 0===(s=function(){return l}.call(t,n,t,a))||(a.exports=s):this.xor4096=l}(0,e=n.nmd(e),n.amdD)},2030:function(e,t,n){var s;!function(e,a,r){function i(e){var t=this;t.next=function(){var e,n,s=t.x,a=t.i;return e=s[a],n=(e^=e>>>7)^e<<24,n^=(e=s[a+1&7])^e>>>10,n^=(e=s[a+3&7])^e>>>3,n^=(e=s[a+4&7])^e<<7,e=s[a+7&7],n^=(e^=e<<13)^e<<9,s[a]=n,t.i=a+1&7,n},function(e,t){var n,s=[];if(t===(0|t))s[0]=t;else for(t=""+t,n=0;n<t.length;++n)s[7&n]=s[7&n]<<15^t.charCodeAt(n)+s[n+1&7]<<13;for(;s.length<8;)s.push(0);for(n=0;n<8&&0===s[n];++n);for(8==n?s[7]=-1:s[n],e.x=s,e.i=0,n=256;n>0;--n)e.next()}(t,e)}function o(e,t){return t.x=e.x.slice(),t.i=e.i,t}function l(e,t){null==e&&(e=+new Date);var n=new i(e),s=t&&t.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},a.int32=n.next,a.quick=a,s&&(s.x&&o(s,n),a.state=function(){return o(n,{})}),a}a&&a.exports?a.exports=l:n.amdD&&n.amdO?void 0===(s=function(){return l}.call(t,n,t,a))||(a.exports=s):this.xorshift7=l}(0,e=n.nmd(e),n.amdD)},801:function(e,t,n){var s;!function(e,a,r){function i(e){var t=this,n="";t.next=function(){var e=t.x^t.x>>>2;return t.x=t.y,t.y=t.z,t.z=t.w,t.w=t.v,(t.d=t.d+362437|0)+(t.v=t.v^t.v<<4^e^e<<1)|0},t.x=0,t.y=0,t.z=0,t.w=0,t.v=0,e===(0|e)?t.x=e:n+=e;for(var s=0;s<n.length+64;s++)t.x^=0|n.charCodeAt(s),s==n.length&&(t.d=t.x<<10^t.x>>>4),t.next()}function o(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t.v=e.v,t.d=e.d,t}function l(e,t){var n=new i(e),s=t&&t.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},a.int32=n.next,a.quick=a,s&&("object"==typeof s&&o(s,n),a.state=function(){return o(n,{})}),a}a&&a.exports?a.exports=l:n.amdD&&n.amdO?void 0===(s=function(){return l}.call(t,n,t,a))||(a.exports=s):this.xorwow=l}(0,e=n.nmd(e),n.amdD)},1971:(e,t,n)=>{var s;!function(a,r){var i,o=this,l=256,u=r.pow(l,6),c=r.pow(2,52),h=2*c,p=255;function d(e,t,n){var s=[],p=y(g((t=1==t?{entropy:!0}:t||{}).entropy?[e,b(a)]:null==e?function(){try{var e;return i&&(e=i.randomBytes)?e=e(l):(e=new Uint8Array(l),(o.crypto||o.msCrypto).getRandomValues(e)),b(e)}catch(e){var t=o.navigator,n=t&&t.plugins;return[+new Date,o,n,o.screen,b(a)]}}():e,3),s),d=new f(s),x=function(){for(var e=d.g(6),t=u,n=0;e<c;)e=(e+n)*l,t*=l,n=d.g(1);for(;e>=h;)e/=2,t/=2,n>>>=1;return(e+n)/t};return x.int32=function(){return 0|d.g(4)},x.quick=function(){return d.g(4)/4294967296},x.double=x,y(b(d.S),a),(t.pass||n||function(e,t,n,s){return s&&(s.S&&m(s,d),e.state=function(){return m(d,{})}),n?(r.random=e,t):e})(x,p,"global"in t?t.global:this==r,t.state)}function f(e){var t,n=e.length,s=this,a=0,r=s.i=s.j=0,i=s.S=[];for(n||(e=[n++]);a<l;)i[a]=a++;for(a=0;a<l;a++)i[a]=i[r=p&r+e[a%n]+(t=i[a])],i[r]=t;(s.g=function(e){for(var t,n=0,a=s.i,r=s.j,i=s.S;e--;)t=i[a=p&a+1],n=n*l+i[p&(i[a]=i[r=p&r+t])+(i[r]=t)];return s.i=a,s.j=r,n})(l)}function m(e,t){return t.i=e.i,t.j=e.j,t.S=e.S.slice(),t}function g(e,t){var n,s=[],a=typeof e;if(t&&"object"==a)for(n in e)try{s.push(g(e[n],t-1))}catch(e){}return s.length?s:"string"==a?e:e+"\0"}function y(e,t){for(var n,s=e+"",a=0;a<s.length;)t[p&a]=p&(n^=19*t[p&a])+s.charCodeAt(a++);return b(t)}function b(e){return String.fromCharCode.apply(0,e)}if(r.seedrandom=d,y(r.random(),a),e.exports){e.exports=d;try{i=n(5042)}catch(e){}}else void 0===(s=function(){return d}.call(t,n,t,e))||(e.exports=s)}([],Math)},5410:()=>{},8628:()=>{},1601:()=>{},7792:()=>{},5042:()=>{}},t={};function n(s){var a=t[s];if(void 0!==a)return a.exports;var r=t[s]={id:s,loaded:!1,exports:{}};return e[s].call(r.exports,r,r.exports,n),r.loaded=!0,r.exports}n.amdD=function(){throw new Error("define cannot be used indirect")},n.amdO={},n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var s in t)n.o(t,s)&&!n.o(e,s)&&Object.defineProperty(e,s,{enumerable:!0,get:t[s]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),(()=>{"use strict";var e=n(5998),t=n(9121),s=n(2271),a=n(4841),r=n(1901);const i={kernelName:t.SY,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,a.d)(e,(0,r.N)((0,s.p)(n,"float32"),-1))}}};var o=n(1274),l=n(7370),u=n(9494),c=n(3261),h=n(248),p=n(827);const d={kernelName:t.VG,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=(0,h.h)((0,s.p)(n,"float32")),a=(0,c._)((0,p.l)((0,u.i)(1),t));return(0,l.W)((0,o.h)(e,a))}}}},f={kernelName:t.Sp,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=(0,c._)((0,p.l)((0,h.h)((0,s.p)(n,"float32")),1));return(0,o.h)(e,t)}}}};var m=n(2200),g=n(4968),y=n(5475);const b={kernelName:t.mm,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,a=m.$N(n.shape,s.shape);return{a:()=>{let t=e;const s=m.RR(n.shape,a);return s.length>0&&(t=(0,y.S)(t,s)),(0,g.X)(t,n.shape)},b:()=>{let t=e;const n=m.RR(s.shape,a);return n.length>0&&(t=(0,y.S)(t,n)),(0,g.X)(t,s.shape)}}}},x={kernelName:t.Xz,saveAllInputs:!0,gradFunc:(e,t)=>{const n={};return t.forEach(((t,s)=>{n[s]=()=>e.clone()})),n}};var v=n(6577);const k={kernelName:t.sJ,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,v.P)(n)}}},w={kernelName:t.aJ,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,v.P)(n)}}},N={kernelName:t.M2,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,o.h)(e,(0,c._)((0,p.l)((0,u.i)(1),(0,h.h)((0,s.p)(n,"float32")))))}}};var I=n(6407);const S={kernelName:t.qw,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=(0,c._)((0,I.I)((0,u.i)(1),(0,h.h)((0,s.p)(n,"float32"))));return(0,o.h)(e,t)}}}},T={kernelName:t.QC,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=(0,m.$N)(n.shape,s.shape);return{a:()=>{const t=(0,I.I)((0,h.h)(n),(0,h.h)(s));let i=(0,a.d)(e,(0,o.h)(s,t));const l=(0,m.RR)(n.shape,r);return l.length>0&&(i=(0,y.S)(i,l)),(0,g.X)(i,n.shape)},b:()=>{const t=(0,I.I)((0,h.h)(n),(0,h.h)(s));let i=(0,l.W)((0,a.d)(e,(0,o.h)(n,t)));const u=(0,m.RR)(s.shape,r);return u.length>0&&(i=(0,y.S)(i,u)),(0,g.X)(i,s.shape)}}}},C={kernelName:t.jM,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,o.h)(e,(0,I.I)((0,h.h)((0,s.p)(n,"float32")),1))}}},$={kernelName:t.Oy,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,o.h)(e,(0,p.l)((0,u.i)(1),(0,h.h)((0,s.p)(n,"float32"))))}}};var A=n(7097),E=n(3740),_=n(569),R=n(2668);const F=(0,R.op)({avgPool3dGrad_:function(e,n,s,a,r,i){const o=(0,E._1)(e,"dy","avgPool3dGrad"),l=(0,E._1)(n,"input","avgPool3dGrad");let u=o,c=l,h=!1;4===l.rank&&(h=!0,u=(0,g.X)(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]]),c=(0,g.X)(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]])),_.hu(5===u.rank,(()=>`Error in avgPool3dGrad: dy must be rank 5 but got rank ${u.rank}.`)),_.hu(5===c.rank,(()=>`Error in avgPool3dGrad: input must be rank 5 but got rank ${c.rank}.`)),null!=i&&_.hu(_.GN(r),(()=>`Error in avgPool3dGrad: pad must be an integer when using, dimRoundingMode ${i} but got pad ${r}.`));const p={dy:u,input:c},d={filterSize:s,strides:a,pad:r,dimRoundingMode:i},f=A.BV.runKernel(t.IM,p,d);return h?(0,g.X)(f,[f.shape[1],f.shape[2],f.shape[3],f.shape[4]]):f}}),D={kernelName:t._k,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{filterSize:a,strides:r,pad:i,dimRoundingMode:o}=n;return{x:()=>F(e,s,a,r,i,o)}}},O=(0,R.op)({avgPoolGrad_:function(e,n,s,a,r){const i=(0,E._1)(e,"dy","avgPoolGrad"),o=(0,E._1)(n,"input","avgPoolGrad");_.hu(o.rank===i.rank,(()=>`Rank of input (${o.rank}) does not match rank of dy (${i.rank})`));let l=o,u=i,c=!1;3===o.rank&&(c=!0,l=(0,g.X)(o,[1,o.shape[0],o.shape[1],o.shape[2]]),u=(0,g.X)(i,[1,i.shape[0],i.shape[1],i.shape[2]])),_.hu(4===u.rank,(()=>`Error in avgPoolGrad: dy must be rank 4 but got rank ${u.rank}.`)),_.hu(4===l.rank,(()=>`Error in avgPoolGrad: input must be rank 4 but got rank ${l.rank}.`));const h={dy:u,input:l},p={filterSize:s,strides:a,pad:r},d=A.BV.runKernel(t.RO,h,p);return c?(0,g.X)(d,[d.shape[1],d.shape[2],d.shape[3]]):d}}),M={kernelName:t.Jh,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{filterSize:a,strides:r,pad:i}=n;return{x:()=>O(e,s,a,r,i)}}};var z=n(8687);const L={kernelName:t.XL,inputsToSave:["a","b"],gradFunc:(e,t,n)=>{const[s,a]=t,{transposeA:r,transposeB:i}=n;return r||i?!r&&i?{a:()=>(0,z.O)(e,a,!1,!1),b:()=>(0,z.O)(e,s,!0,!1)}:r&&!i?{a:()=>(0,z.O)(a,e,!1,!0),b:()=>(0,z.O)(s,e,!1,!1)}:{a:()=>(0,z.O)(a,e,!0,!0),b:()=>(0,z.O)(e,s,!0,!0)}:{a:()=>(0,z.O)(e,a,!1,!0),b:()=>(0,z.O)(s,e,!0,!1)}}};var B=n(7918);const P={kernelName:t.zw,gradFunc:(e,t,n)=>{const{blockShape:s,crops:a}=n;return{x:()=>(0,B.f)(e,s,a)}}},V={kernelName:t.Ly,gradFunc:(e,t,n)=>{const s=n,a=s.inputShape,r=s.shape,i=Array.from(r);for(let e=a.length-1;e>=0;e--)if(a[e]===r[e])i[e]=1;else if(1!==a[e])throw new Error(`broadcastTo(): [${a}] cannot be broadcast to [${r}].`);const o=[];for(let e=0;e<i.length;e++)i[e]>1&&o.push(e);return{x:()=>(0,y.S)(e,o,!0)}}},W={kernelName:t.RF,gradFunc:e=>({x:()=>e.clone()})},U={kernelName:t.gJ,gradFunc:e=>({x:()=>(0,v.P)(e)})};var G=n(7630),H=n(624),j=n(2856),X=n(5912);const q={kernelName:t.xn,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{clipValueMin:a,clipValueMax:r}=n;return{x:()=>(0,X.a)((0,j.H)((0,G.b)(s,a),(0,H.z)(s,r)),e,(0,v.P)(e))}}},K={kernelName:t.yj,inputsToSave:["x"],gradFunc:i.gradFunc};var Y=n(8644);const Q={kernelName:t.Eh,saveAllInputs:!0,gradFunc:(e,t,n)=>{const s=t.map((e=>e.shape)),{axis:a}=n,r=(0,_.EC)(a,t[0].shape)[0],i=s.map((e=>e[r]));return(0,Y.V)(e,i,r).map((e=>()=>e))}};var J=n(6013),Z=n(9832),ee=n(2582);const te={kernelName:t.mh,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const[s,a]=t,{dilations:r,strides:i,pad:o,dataFormat:l}=n;return _.hu(ee.I0(r),(()=>`Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${r}'`)),{x:()=>(0,Z._)(s.shape,e,a,i,o,l),filter:()=>(0,J.p)(s,e,a.shape,i,o,l)}}};var ne=n(4794);const se={kernelName:t.wm,inputsToSave:["dy","filter"],gradFunc:(e,t,n)=>{const[s,a]=t,{strides:r,pad:i,dataFormat:o,dimRoundingMode:l}=n;return{dy:()=>(0,ne.T)(e,a,r,i,o,1,l),filter:()=>(0,J.p)(e,s,a.shape,r,i,o,l)}}},ae=(0,R.op)({conv3DBackpropFilter_:function(e,n,s,a,r){let i=e;4===e.rank&&(i=(0,g.X)(e,[1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]]));let o=n;4===o.rank&&(o=(0,g.X)(n,[1,n.shape[0],n.shape[1],n.shape[2],n.shape[3]])),_.hu(5===i.rank,(()=>`Error in conv3dDerFilter: input must be rank 5, but got shape ${i.shape}.`)),_.hu(5===o.rank,(()=>`Error in conv3dDerFilter: dy must be rank 5, but got shape ${o.shape}.`)),_.hu(5===s.length,(()=>`Error in conv3dDerFilter: filterShape must be length 5, but got ${s}.`)),_.hu(i.shape[4]===s[3],(()=>`Error in conv3dDerFilter: depth of input ${i.shape[4]}) must match input depth in filter (${s[3]}.`)),_.hu(o.shape[4]===s[4],(()=>`Error in conv3dDerFilter: depth of dy (${o.shape[4]}) must match output depth for filter (${s[4]}).`));const l={x:i,dy:o},u={strides:a,pad:r,filterShape:s};return A.BV.runKernel(t.o2,l,u)}});var re=n(7594);const ie={kernelName:t.x1,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const{dilations:s,strides:a,pad:r}=n;_.hu((0,ee.I0)(s),(()=>`Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${s}'`));const[i,o]=t;return{x:()=>(0,re._)(i.shape,e,o,a,r),filter:()=>ae(i,e,o.shape,a,r)}}};var oe=n(9331);const le={kernelName:t.mc,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,a.d)((0,l.W)((0,oe.O)((0,s.p)(n,"float32"))),e)}}};var ue=n(3254);const ce={kernelName:t.TR,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,a.d)((0,ue.R)((0,s.p)(n,"float32")),e)}}};var he=n(3591),pe=n(7405),de=n(9065);const fe={kernelName:t.iH,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{axis:a,exclusive:r,reverse:i}=n;return{x:()=>{const t=(0,he.Q3)([a],s.rank);let n=(0,pe.z)(e,a,r,!i);return null!=t&&(n=(0,de.p)(n,t)),n}}}};var me=n(8098),ge=n(4375);const ye={kernelName:t.ci,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const{dilations:s,strides:a,pad:r,dimRoundingMode:i}=n,o=null==s?[1,1]:s;_.hu(ee.I0(o),(()=>`Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${o}'`));const[l,u]=t;return _.hu(4===l.rank,(()=>`Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${l.rank}.`)),_.hu(4===u.rank,(()=>`Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${u.rank}.`)),_.hu(l.shape[3]===u.shape[2],(()=>`Error in gradient of depthwiseConv2d: number of input channels (${l.shape[3]}) must match the inChannels dimension in filter ${u.shape[2]}.`)),_.hu(ee.jT(a,o),(()=>`Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${a} and dilations '${o}'.`)),null!=i&&_.hu(_.GN(r),(()=>`Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${r}.`)),{x:()=>(0,ge.v)(l.shape,e,u,a,r,s,i),filter:()=>(0,me.z)(l,e,u.shape,a,r,s,i)}}},be={kernelName:t.p4,inputsToSave:["x","filter"],gradFunc:(e,n,s)=>{const[a,r]=n,i={x:a,filter:r,dy:e},o={x:a,filter:r,dy:e};return{x:()=>A.BV.runKernel(t.ek,i,s),filter:()=>A.BV.runKernel(t.Vn,o,s)}}},xe={kernelName:t.SX,outputsToSave:[!0],gradFunc:(e,n)=>{const[s]=n,a={dy:e,y:s};return{x:()=>A.BV.runKernel(t.HE,a)}}};var ve=n(4842);const ke={kernelName:t.Om,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t,s=(0,a.d)((0,ve.Q)((0,l.W)((0,h.h)(n))),2/Math.sqrt(Math.PI));return{x:()=>(0,a.d)(e,s)}}},we={kernelName:t.NE,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,a.d)(e,n)}}},Ne={kernelName:t.YF,inputsToSave:["input"],gradFunc:(e,t)=>{const[n]=t;return{input:()=>(0,g.X)(e,n.shape)}}},Ie={kernelName:t.Y0,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,a.d)(e,(0,ve.Q)(n))}}},Se={kernelName:t.OR,gradFunc:e=>({x:()=>(0,v.P)(e)})},Te={kernelName:t.je,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,i=(0,m.$N)(n.shape,r.shape);return{a:()=>{const t=(0,o.h)(e,(0,s.p)(r,"float32")),a=(0,m.RR)(n.shape,i);return a.length>0?(0,g.X)((0,y.S)(t,a),n.shape):t},b:()=>{let t=(0,a.d)(e,(0,s.p)(n,"float32"));const u=(0,m.RR)(r.shape,i);u.length>0&&(t=(0,g.X)((0,y.S)(t,u),r.shape));const c=(0,h.h)(r);return(0,l.W)((0,o.h)(t,(0,s.p)(c,"float32")))}}}};var Ce=n(2634),$e=n(7501);const Ae={kernelName:t.sH,inputsToSave:["x","mean","variance","scale"],gradFunc:(e,t,n)=>{const{varianceEpsilon:s}=n,[r,i,o,l]=t,c=null==l?(0,u.i)(1):l,h=(0,m.RR)(i.shape,r.shape),d=[];if(1===i.rank){for(let e=0;e<r.shape.length-1;++e)d.push(r.shape[e]);d.push(1)}const f=(0,p.l)(r,i),b=(0,a.d)(e,c),x=(0,Ce.b)((0,I.I)(o,(0,u.i)(s))),v=(0,a.d)((0,a.d)((0,a.d)(x,x),x),(0,u.i)(-.5));return{x:()=>1===i.rank?(0,g.X)((0,a.d)((0,a.d)(e,(0,$e.G)((0,g.X)(x,[1,1,1,i.shape[0]]),d)),c),r.shape):(0,g.X)((0,a.d)((0,a.d)(e,x),c),r.shape),mean:()=>{let e=(0,a.d)((0,a.d)(x,(0,u.i)(-1)),b);return 1===i.rank&&(e=(0,y.S)(e,h)),(0,g.X)(e,i.shape)},variance:()=>{let e=(0,a.d)((0,a.d)(v,f),b);return 1===i.rank&&(e=(0,y.S)(e,h)),(0,g.X)(e,i.shape)},scale:()=>{const t=(0,a.d)(f,x);let n=(0,a.d)(e,t);return 1===i.rank&&(n=(0,y.S)(n,h)),(0,g.X)(n,i.shape)},offset:()=>{let t=e;return 1===i.rank&&(t=(0,y.S)(t,h)),(0,g.X)(t,i.shape)}}}};var Ee=n(8749);const _e={kernelName:t.qi,inputsToSave:["x","indices"],gradFunc:(e,t,n)=>{const[s,a]=t,{axis:r}=n,i=(0,_.EC)(r,s.shape)[0];return{x:()=>{const t=s.shape,n=a.size,o=t.slice(0,i),l=o.length,u=t.slice(r,t.length).slice(1),c=u.length,h=Re(0,l),p=Re(l+1,l+1+c),d=Fe([o,[n],u]),f=(0,g.X)(e,d),m=(0,g.X)(a,[n]),y=Fe([[l],h,p]),b=(0,de.p)(f,y);let x=(0,Ee.p)(b,m,s.shape[i]);const v=(0,he.LJ)(y);return x=(0,de.p)(x,v),x},indices:()=>a}}};function Re(e,t){const n=[];for(let s=e;s<t;++s)n.push(s);return n}function Fe(e){const t=[];for(let n=0;n<e.length;++n)for(let s=0;s<e[n].length;++s)t.push(e[n][s]);return t}const De={kernelName:t.Ac,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t;return{a:()=>(0,v.P)(n),b:()=>(0,v.P)(s)}}},Oe={kernelName:t.iJ,gradFunc:e=>({x:()=>(0,s.p)(e,"float32")})},Me={kernelName:t.av,gradFunc:e=>({x:()=>(0,v.P)(e)})},ze={kernelName:t.iW,gradFunc:e=>({x:()=>(0,v.P)(e)})},Le={kernelName:t.r7,gradFunc:e=>({x:()=>(0,v.P)(e)})};var Be=n(636);const Pe={kernelName:t.J$,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{alpha:r}=n,i=(0,Be.p)(s,0);return{x:()=>(0,X.a)(i,e,(0,a.d)(e,r))}}},Ve={kernelName:t.kU,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,o.h)(e,(0,I.I)(n,1))}}},We={kernelName:t.Zb,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,o.h)(e,(0,s.p)(n,"float32"))}}},Ue={kernelName:t.qC,inputsToSave:[],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s]=t,{axis:r}=n;return{logits:()=>{const t=(0,ve.Q)(s);return(0,p.l)(e,(0,a.d)((0,y.S)(e,r,!0),t))}}}},Ge=(0,R.op)({localResponseNormalizationBackprop_:function(e,n,s,a=5,r=1,i=1,o=.5){const l={x:e,y:n,dy:s},u={depthRadius:a,bias:r,alpha:i,beta:o};return A.BV.runKernel(t.Hh,l,u)}}),He={kernelName:t.eZ,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s,a]=t,{depthRadius:r,bias:i,alpha:o,beta:l}=n;return{x:()=>Ge(s,a,e,r,i,o,l)}}};var je=n(6477);function Xe(e,t,n,r){return t.rank<n.rank&&(t=(0,g.X)(t,he.rv(t.shape,r))),e.rank<n.rank&&(e=(0,g.X)(e,he.rv(e.shape,r))),{x:()=>(0,a.d)(e,(0,s.p)((0,je.D)(n,t),e.dtype))}}const qe={kernelName:t.Yo,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const s=n,{reductionIndices:a}=s,r=t[0],i=Xe(e,t[1],r,_.EC(a,r.shape));return{x:()=>i.x()}}};var Ke=n(6573);const Ye={kernelName:t.BM,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t;return{a:()=>(0,a.d)(e,(0,s.p)((0,G.b)(n,r),"float32")),b:()=>(0,a.d)(e,(0,s.p)((0,Ke.d)(n,r),"float32"))}}},Qe=(0,R.op)({maxPool3dGrad_:function(e,n,s,a,r,i,o){const l=(0,E._1)(e,"dy","maxPool3dGrad"),u=(0,E._1)(n,"input","maxPool3dGrad"),c=(0,E._1)(s,"output","maxPool3dGrad");let h=l,p=u,d=c,f=!1;4===u.rank&&(f=!0,h=(0,g.X)(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]]),p=(0,g.X)(u,[1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]]),d=(0,g.X)(c,[1,c.shape[0],c.shape[1],c.shape[2],c.shape[3]])),_.hu(5===h.rank,(()=>`Error in maxPool3dGrad: dy must be rank 5 but got rank ${h.rank}.`)),_.hu(5===p.rank,(()=>`Error in maxPool3dGrad: input must be rank 5 but got rank ${p.rank}.`)),_.hu(5===d.rank,(()=>`Error in maxPool3dGrad: output must be rank 5 but got rank ${d.rank}.`)),null!=o&&_.hu(_.GN(i),(()=>`Error in maxPool3dGrad: pad must be an integer when using, dimRoundingMode ${o} but got pad ${i}.`));const m={dy:h,input:p,output:d},y={filterSize:a,strides:r,pad:i,dimRoundingMode:o},b=A.BV.runKernel(t.OU,m,y);return f?(0,g.X)(b,[b.shape[1],b.shape[2],b.shape[3],b.shape[4]]):b}}),Je={kernelName:t.OA,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s,a]=t,{filterSize:r,strides:i,pad:o,dimRoundingMode:l}=n;return{x:()=>Qe(e,s,a,r,i,o,l)}}},Ze=(0,R.op)({maxPoolGrad_:function(e,n,s,a,r,i,o){const l=(0,E._1)(e,"dy","maxPoolGrad"),u=(0,E._1)(n,"input","maxPoolGrad"),c=(0,E._1)(s,"output","maxPoolGrad");_.hu(u.rank===l.rank,(()=>`Rank of input (${u.rank}) does not match rank of dy (${l.rank})`)),_.hu(4===l.rank,(()=>`Error in maxPoolGrad: dy must be rank 4 but got rank ${l.rank}.`)),_.hu(4===u.rank,(()=>`Error in maxPoolGrad: input must be rank 4 but got rank ${u.rank}.`)),null!=o&&_.hu(_.GN(i),(()=>`Error in maxPoolGrad: pad must be an integer when using, dimRoundingMode ${o} but got pad ${i}.`));const h={dy:l,input:u,output:c},p={filterSize:a,strides:r,pad:i,dimRoundingMode:o};return A.BV.runKernel(t.OV,h,p)}}),et={kernelName:t.mT,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s,a]=t,{filterSize:r,strides:i,pad:o}=n;return{x:()=>Ze(e,s,a,r,i,o)}}};var tt=n(4917);const nt={kernelName:t.q2,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{axis:r}=n,i=_.EC(r,s.shape),l=(0,he.kz)(s.shape,i)[1],u=_.NA(l);return{x:()=>{const t=s.shape.slice();i.forEach((e=>{t[e]=1}));const n=(0,g.X)(e,t);return(0,o.h)((0,a.d)(n,(0,tt.i)(s.shape,"float32")),u)}}}},st={kernelName:t.c1,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const s=n,{axis:a}=s,[r,i]=t,o=Xe(e,i,r,_.EC(a,r.shape));return{x:()=>o.x()}}},at={kernelName:t.q8,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t;return{a:()=>(0,a.d)(e,(0,s.p)((0,H.z)(n,r),"float32")),b:()=>(0,a.d)(e,(0,s.p)((0,Be.p)(n,r),"float32"))}}};var rt=n(2676);const it={kernelName:t.jQ,inputsToSave:["x"],gradFunc:(e,t,n)=>{const s=t[0],{paddings:a}=n,r=a.map((e=>e[0]));return{x:()=>(0,rt.t)(e,r,s.shape)}}};var ot=n(6943);const lt={kernelName:t.Vb,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=(0,m.$N)(n.shape,s.shape);return{a:()=>{const t=(0,m.RR)(n.shape,r);return t.length>0?(0,g.X)((0,y.S)(e,t),n.shape):e},b:()=>{const t=(0,a.d)(e,(0,l.W)((0,ot.G)((0,o.h)(n,s)))),i=(0,m.RR)(s.shape,r);return i.length>0?(0,g.X)((0,y.S)(t,i),s.shape):t}}}},ut={kernelName:t.wY,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,i=(0,m.$N)(n.shape,r.shape);return{a:()=>{const t=(0,a.d)(e,(0,s.p)(r,"float32")),o=(0,m.RR)(n.shape,i);return o.length>0?(0,g.X)((0,y.S)(t,o),n.shape):t},b:()=>{const t=(0,a.d)(e,(0,s.p)(n,"float32")),o=(0,m.RR)(r.shape,i);return o.length>0?(0,g.X)((0,y.S)(t,o),r.shape):t}}}},ct={kernelName:t.ku,gradFunc:e=>({x:()=>(0,l.W)(e)})};var ht=n(9640);const pt={kernelName:t.we,inputsToSave:["indices"],gradFunc:(e,t)=>{const n=t[0];return{indices:()=>(0,ht.l)(n.shape,"float32")}}},dt={kernelName:t.qW,gradFunc:e=>({x:()=>(0,v.P)(e)})};var ft=n(4136);const mt={kernelName:t.Qi,saveAllInputs:!0,gradFunc:(e,t,n)=>{const{axis:s}=n;return(0,ft.H)(e,s).map((e=>()=>e))}},gt={kernelName:t.ly,inputsToSave:["x"],gradFunc:(e,t,n)=>{const s=t[0],{paddings:a}=n,r=a.map((e=>e[0]));return{x:()=>(0,rt.t)(e,r,s.shape)}}};var yt=n(2597),bt=n(3453);const xt={kernelName:t.pe,inputsToSave:["a","b"],outputsToSave:[!0],gradFunc:(e,t)=>{const[n,r,i]=t,o=n,l=r,c=m.$N(o.shape,l.shape);return{a:()=>{const t=(0,s.p)(l,"float32");let n=(0,a.d)(e,(0,a.d)(t,(0,bt.s)(o,(0,p.l)(t,(0,u.i)(1)))));const r=m.RR(o.shape,c);return r.length>0&&(n=(0,y.S)(n,r)),(0,g.X)(n,o.shape)},b:()=>{const t=(0,Be.p)(o,0),n=(0,X.a)(t,(0,yt.c)(o),(0,v.P)(o));let s=(0,a.d)(e,(0,a.d)(i,n));const r=m.RR(l.shape,c);return r.length>0&&(s=(0,y.S)(s,r)),(0,g.X)(s,l.shape)}}}},vt={kernelName:t.o0,inputsToSave:["x","alpha"],gradFunc:(e,t)=>{const[n,s]=t,r=(0,Be.p)(n,0);return{x:()=>(0,X.a)(r,e,(0,a.d)(e,s)),alpha:()=>{let t=(0,X.a)(r,(0,v.P)(e),(0,a.d)(e,n));const i=(0,m.RR)(s.shape,e.shape);return i.length>0&&(t=(0,y.S)(t,i)),(0,g.X)(t,s.shape)}}}},kt={kernelName:t.oH,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,i=m.$N(n.shape,r.shape);return{a:()=>{const t=(0,o.h)(e,(0,s.p)(r,"float32")),a=m.RR(n.shape,i);return a.length>0?(0,g.X)((0,y.S)(t,a),n.shape):t},b:()=>{let t=(0,a.d)(e,(0,s.p)(n,"float32"));const u=m.RR(r.shape,i);u.length>0&&(t=(0,g.X)((0,y.S)(t,u),r.shape));const c=(0,h.h)(r);return(0,l.W)((0,o.h)(t,(0,s.p)(c,"float32")))}}}},wt={kernelName:t.$H,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,o.h)(e,(0,l.W)((0,h.h)(n)))}}},Nt={kernelName:t.Sb,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t,i=(0,a.d)((0,H.z)(n,6),(0,r.N)(n));return{x:()=>(0,a.d)(e,(0,s.p)(i,"float32"))}}},It={kernelName:t.qk,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,a.d)(e,(0,s.p)((0,r.N)(n),"float32"))}}},St={kernelName:t.HZ,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,g.X)(e,n.shape)}}},Tt={kernelName:t._Y,inputsToSave:["images"],gradFunc:(e,n,s)=>{const[a]=n,r={dy:e,images:a};return{images:()=>A.BV.runKernel(t.zb,r,s)}}},Ct={kernelName:t.dp,inputsToSave:["images"],gradFunc:(e,n,s)=>{const[a]=n,r={dy:e,images:a};return{images:()=>A.BV.runKernel(t.Hm,r,s)}}};var $t=n(7486);const At={kernelName:t.mK,gradFunc:(e,t,n)=>{const{dims:s}=n,a=(0,_.EC)(s,e.shape);return{x:()=>(0,$t.G)(e,a)}}},Et={kernelName:t.e0,gradFunc:e=>({x:()=>(0,v.P)(e)})},_t={kernelName:t.bV,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,l.W)((0,o.h)(e,(0,a.d)((0,bt.s)(n,1.5),2)))}}};var Rt=n(8651);const Ft={kernelName:t.Ph,inputsToSave:["condition"],gradFunc:(e,t)=>{const[n]=t;return{condition:()=>(0,s.p)((0,v.P)(n),"float32"),t:()=>(0,a.d)(e,(0,s.p)(n,e.dtype)),e:()=>(0,a.d)(e,(0,s.p)((0,Rt.h)(n),e.dtype))}}};var Dt=n(3179);const Ot={kernelName:t.oF,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=(0,Be.p)(n,(0,u.i)(0)),r=(0,u.i)(Dt.y),i=(0,u.i)(Dt.$),o=(0,a.d)(e,i),l=(0,a.d)((0,a.d)(e,r),(0,ve.Q)((0,s.p)(n,"float32")));return(0,X.a)(t,o,l)}}}},Mt={kernelName:t.a5,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,a.d)(e,(0,a.d)(n,(0,p.l)((0,u.i)(1),n)))}}},zt={kernelName:t.i5,gradFunc:e=>({x:()=>(0,v.P)(e)})};var Lt=n(173);const Bt={kernelName:t.RQ,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,a.d)((0,Lt.m)((0,s.p)(n,"float32")),e)}}};var Pt=n(2699);const Vt={kernelName:t.w3,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,a.d)((0,Pt.f)((0,s.p)(n,"float32")),e)}}};var Wt=n(9682),Ut=n(7650);const Gt={kernelName:t.p2,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{begin:a,size:r}=n,i=s.shape,[o,l]=(0,Ut.parseSliceParams)(s,a,r),u=[];for(let t=0;t<e.rank;t++)u.push([o[t],i[t]-o[t]-l[t]]);return{x:()=>(0,Wt.v)(e,u)}}},Ht={kernelName:t.Gc,outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s]=t,{dim:r}=n,i=(0,a.d)(e,s);return{logits:()=>(0,p.l)(i,(0,a.d)((0,y.S)(i,[r],!0),s))}}};var jt=n(625);const Xt={kernelName:t.MR,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,a.d)(e,(0,jt.X)(n))}}};var qt=n(8441);const Kt={kernelName:t.TQ,gradFunc:(e,t,n)=>{const{blockShape:s,paddings:a}=n;return{x:()=>(0,qt.E)(e,s,a)}}};var Yt=n(6884);const Qt={kernelName:t.L8,gradFunc:(e,t,n)=>{const{axis:s}=n;return{x:()=>(0,Yt.z)(e,s)}}},Jt={kernelName:t.FK,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,o.h)(e,(0,a.d)((0,c._)((0,s.p)(n,"float32")),2))}}},Zt={kernelName:t.bK,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,a.d)(e,(0,a.d)((0,s.p)(n,"float32"),2))}}},en={kernelName:t._t,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=(0,u.i)(2);return{a:()=>(0,a.d)(e,(0,a.d)(r,(0,p.l)(n,s))),b:()=>(0,a.d)(e,(0,a.d)(r,(0,p.l)(s,n)))}}},tn={kernelName:t.h8,gradFunc:e=>({x:()=>(0,v.P)(e)})},nn={kernelName:t.Tr,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,a=m.$N(n.shape,s.shape);return{a:()=>{let t=e;const s=m.RR(n.shape,a);return s.length>0&&(t=(0,y.S)(t,s)),(0,g.X)(t,n.shape)},b:()=>{let t=e;const n=m.RR(s.shape,a);return n.length>0&&(t=(0,y.S)(t,n)),(0,g.X)((0,l.W)(t),s.shape)}}}},sn={kernelName:t.GB,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,r=s.shape.slice(),{axis:i}=n;(0,_.EC)(i,s.shape).forEach((e=>{r[e]=1}));const o=(0,g.X)(e,r),l=(0,a.d)(o,(0,tt.i)(s.shape,"float32"));return{x:()=>l}}},an={kernelName:t.sE,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,o.h)(e,(0,h.h)((0,Lt.m)(n)))}}},rn={kernelName:t.MI,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,a.d)((0,p.l)((0,u.i)(1),(0,h.h)(n)),e)}}},on={kernelName:t.n9,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{reps:a}=n;return{x:()=>{let t=(0,v.P)(s);if(1===s.rank)for(let n=0;n<a[0];++n)t=(0,I.I)(t,(0,rt.t)(e,[n*s.shape[0]],[s.shape[0]]));else if(2===s.rank)for(let n=0;n<a[0];++n)for(let r=0;r<a[1];++r)t=(0,I.I)(t,(0,rt.t)(e,[n*s.shape[0],r*s.shape[1]],[s.shape[0],s.shape[1]]));else if(3===s.rank)for(let n=0;n<a[0];++n)for(let r=0;r<a[1];++r)for(let i=0;i<a[2];++i)t=(0,I.I)(t,(0,rt.t)(e,[n*s.shape[0],r*s.shape[1],i*s.shape[2]],[s.shape[0],s.shape[1],s.shape[2]]));else{if(4!==s.rank)throw new Error(`Gradient for tile operation is not implemented for rank-${s.rank} tensors yet.`);for(let n=0;n<a[0];++n)for(let r=0;r<a[1];++r)for(let i=0;i<a[2];++i)for(let o=0;o<a[3];++o)t=(0,I.I)(t,(0,rt.t)(e,[n*s.shape[0],r*s.shape[1],i*s.shape[2],o*s.shape[3]],[s.shape[0],s.shape[1],s.shape[2],s.shape[3]]))}return t}}}},ln={kernelName:t.G3,gradFunc:(e,t,n)=>{const s=n,{perm:a}=s,r=he.LJ(a);return{x:()=>(0,de.p)(e,r)}}};var un=n(2991);const cn={kernelName:t.To,gradFunc:(e,t,n)=>{const s=n,{axis:a}=s;return{value:()=>(0,un.k)(e,a)}}};var hn=n(1300),pn=n(4926),dn=n(632);const fn={kernelName:t.Qv,inputsToSave:["segmentIds"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>function(e,t){const n=(0,dn.g)(t,(0,v.P)(t)),s=(0,pn.I)(e,n);let a=(0,G.b)(t,(0,u.i)(0,"int32"));const r=s.rank-a.rank;for(let e=0;e<r;++e)a=(0,hn.d)(a,e+1);a=(0,j.H)(a,(0,tt.i)(s.shape,"bool"));const i=(0,v.P)(s);return(0,X.a)(a,s,i)}(e,n)}}},mn={kernelName:t.Ru,gradFunc:e=>({x:()=>(0,v.P)(e)})};var gn=n(6151);const yn=[i,d,f,b,x,k,w,N,S,T,C,$,D,M,L,P,V,W,U,q,K,Q,se,te,ie,le,ce,fe,ye,be,kt,xe,ke,we,Ne,Ie,Te,Se,Ae,_e,De,Oe,Me,ze,Le,Pe,Ve,We,Ue,He,qe,qe,Ye,Je,et,nt,st,at,it,lt,ut,ct,pt,dt,mt,gt,gt,xt,vt,wt,Nt,It,St,Tt,Ct,At,Et,_t,Ft,Ot,Mt,zt,Bt,Vt,Gt,Ht,Xt,Kt,Kt,Qt,Qt,Jt,en,Zt,tn,nn,sn,an,rn,on,ln,cn,fn,mn];for(const e of yn)(0,gn.Li)(e);var bn=n(6235),xn=n(4077);(0,xn.t3)().prototype.abs=function(){return this.throwIfDisposed(),(0,bn.W)(this)};var vn=n(7839);(0,xn.t3)().prototype.acos=function(){return this.throwIfDisposed(),(0,vn.K)(this)};var kn=n(1470);(0,xn.t3)().prototype.acosh=function(){return this.throwIfDisposed(),(0,kn._)(this)},(0,xn.t3)().prototype.add=function(e){return this.throwIfDisposed(),(0,I.I)(this,e)};var wn=n(781);(0,xn.t3)().prototype.all=function(e,t){return this.throwIfDisposed(),(0,wn.$)(this,e,t)};var Nn=n(2998);(0,xn.t3)().prototype.any=function(e,t){return this.throwIfDisposed(),(0,Nn.Y)(this,e,t)};var In=n(47);(0,xn.t3)().prototype.argMax=function(e){return this.throwIfDisposed(),(0,In.N)(this,e)};var Sn=n(7394);(0,xn.t3)().prototype.argMin=function(e){return this.throwIfDisposed(),(0,Sn.v)(this,e)},(0,xn.t3)().prototype.asScalar=function(){return this.throwIfDisposed(),(0,_.hu)(1===this.size,(()=>"The array must have only 1 element.")),(0,g.X)(this,[])},(0,xn.t3)().prototype.asType=function(e){return this.throwIfDisposed(),(0,s.p)(this,e)},(0,xn.t3)().prototype.as1D=function(){return this.throwIfDisposed(),(0,g.X)(this,[this.size])},(0,xn.t3)().prototype.as2D=function(e,t){return this.throwIfDisposed(),(0,g.X)(this,[e,t])},(0,xn.t3)().prototype.as3D=function(e,t,n){return this.throwIfDisposed(),(0,g.X)(this,[e,t,n])},(0,xn.t3)().prototype.as4D=function(e,t,n,s){return this.throwIfDisposed(),(0,g.X)(this,[e,t,n,s])},(0,xn.t3)().prototype.as5D=function(e,t,n,s,a){return this.throwIfDisposed(),(0,g.X)(this,[e,t,n,s,a])};var Tn=n(2421);(0,xn.t3)().prototype.asin=function(){return this.throwIfDisposed(),(0,Tn.Z)(this)};var Cn=n(1891);(0,xn.t3)().prototype.asinh=function(){return this.throwIfDisposed(),(0,Cn.V)(this)};var $n=n(7037);(0,xn.t3)().prototype.atan=function(){return this.throwIfDisposed(),(0,$n.z)(this)};var An=n(9812);(0,xn.t3)().prototype.atan2=function(e){return this.throwIfDisposed(),(0,An.f)(this,e)};var En=n(369);(0,xn.t3)().prototype.atanh=function(){return this.throwIfDisposed(),(0,En.C)(this)};var _n=n(5176);(0,xn.t3)().prototype.avgPool=function(e,t,n,s){return this.throwIfDisposed(),(0,_n.w)(this,e,t,n,s)},(0,xn.t3)().prototype.batchToSpaceND=function(e,t){return this.throwIfDisposed(),(0,qt.E)(this,e,t)};var Rn=n(7505);(0,xn.t3)().prototype.batchNorm=function(e,t,n,s,a){return this.throwIfDisposed(),(0,Rn.t)(this,e,t,n,s,a)};var Fn=n(8247);(0,xn.t3)().prototype.broadcastTo=function(e){return this.throwIfDisposed(),(0,Fn.U)(this,e)},(0,xn.t3)().prototype.cast=function(e){return this.throwIfDisposed(),(0,s.p)(this,e)};var Dn=n(6825);(0,xn.t3)().prototype.ceil=function(){return this.throwIfDisposed(),(0,Dn.m)(this)};var On=n(2279);(0,xn.t3)().prototype.clipByValue=function(e,t){return this.throwIfDisposed(),(0,On.i)(this,e,t)},(0,xn.t3)().prototype.concat=function(e,t){return this.throwIfDisposed(),e instanceof xn.es&&(e=[e]),(0,Yt.z)([this,...e],t)};var Mn=n(1355);(0,xn.t3)().prototype.conv1d=function(e,t,n,s,a,r){return this.throwIfDisposed(),(0,Mn.P)(this,e,t,n,s,a,r)};var zn=n(1405);(0,xn.t3)().prototype.conv2dTranspose=function(e,t,n,s,a){return this.throwIfDisposed(),(0,zn.b)(this,e,t,n,s,a)},(0,xn.t3)().prototype.conv2d=function(e,t,n,s,a,r){return this.throwIfDisposed(),(0,ne.T)(this,e,t,n,s,a,r)},(0,xn.t3)().prototype.cos=function(){return this.throwIfDisposed(),(0,Lt.m)(this)},(0,xn.t3)().prototype.cosh=function(){return this.throwIfDisposed(),(0,Pt.f)(this)},(0,xn.t3)().prototype.cumsum=function(e,t,n){return this.throwIfDisposed(),(0,pe.z)(this,e,t,n)};var Ln=n(9112);(0,xn.t3)().prototype.depthToSpace=function(e,t){return this.throwIfDisposed(),(0,Ln.n)(this,e,t)};var Bn=n(4718);(0,xn.t3)().prototype.depthwiseConv2d=function(e,t,n,s,a,r){return this.throwIfDisposed(),(0,Bn.B)(this,e,t,n,s,a,r)};var Pn=n(557);(0,xn.t3)().prototype.dilation2d=function(e,t,n,s,a){return this.throwIfDisposed(),(0,Pn.W)(this,e,t,n,s,a)};var Vn=n(9322);(0,xn.t3)().prototype.divNoNan=function(e){return this.throwIfDisposed(),(0,Vn.N)(this,e)},(0,xn.t3)().prototype.div=function(e){return this.throwIfDisposed(),(0,o.h)(this,e)};var Wn=n(548);(0,xn.t3)().prototype.dot=function(e){return this.throwIfDisposed(),(0,Wn.A)(this,e)};var Un=n(3233);(0,xn.t3)().prototype.elu=function(){return this.throwIfDisposed(),(0,Un.p)(this)},(0,xn.t3)().prototype.equal=function(e){return this.throwIfDisposed(),(0,je.D)(this,e)};var Gn=n(4650);(0,xn.t3)().prototype.erf=function(){return this.throwIfDisposed(),(0,Gn.q)(this)},(0,xn.t3)().prototype.exp=function(){return this.throwIfDisposed(),(0,ve.Q)(this)},(0,xn.t3)().prototype.expandDims=function(e){return this.throwIfDisposed(),(0,hn.d)(this,e)};var Hn=n(3426);(0,xn.t3)().prototype.expm1=function(){return this.throwIfDisposed(),(0,Hn.t)(this)};var jn=n(7020);(0,xn.t3)().prototype.fft=function(){return this.throwIfDisposed(),(0,jn.k)(this)},(0,xn.t3)().prototype.flatten=function(){return this.throwIfDisposed(),(0,g.X)(this,[this.size])},(0,xn.t3)().prototype.floor=function(){return this.throwIfDisposed(),(0,ot.G)(this)};var Xn=n(9165);(0,xn.t3)().prototype.floorDiv=function(e){return this.throwIfDisposed(),(0,Xn.q)(this,e)},(0,xn.t3)().prototype.gather=function(e,t){return this.throwIfDisposed(),(0,pn.I)(this,e,t)},(0,xn.t3)().prototype.greaterEqual=function(e){return this.throwIfDisposed(),(0,G.b)(this,e)},(0,xn.t3)().prototype.greater=function(e){return this.throwIfDisposed(),(0,Be.p)(this,e)};var qn=n(8447);(0,xn.t3)().prototype.ifft=function(){return this.throwIfDisposed(),(0,qn.S)(this)};var Kn=n(4415);(0,xn.t3)().prototype.irfft=function(){return this.throwIfDisposed(),(0,Kn.w)(this)};var Yn=n(3963);(0,xn.t3)().prototype.isFinite=function(){return this.throwIfDisposed(),(0,Yn.x)(this)};var Qn=n(4365);(0,xn.t3)().prototype.isInf=function(){return this.throwIfDisposed(),(0,Qn.U)(this)};var Jn=n(6230);(0,xn.t3)().prototype.isNaN=function(){return this.throwIfDisposed(),(0,Jn.i)(this)};var Zn=n(9133);(0,xn.t3)().prototype.leakyRelu=function(e){return this.throwIfDisposed(),(0,Zn.h)(this,e)},(0,xn.t3)().prototype.lessEqual=function(e){return this.throwIfDisposed(),(0,H.z)(this,e)},(0,xn.t3)().prototype.less=function(e){return this.throwIfDisposed(),(0,Ke.d)(this,e)};var es=n(9648);(0,xn.t3)().prototype.localResponseNormalization=function(e,t,n,s){return this.throwIfDisposed(),(0,es.G)(this,e,t,n,s)};var ts=n(3888);(0,xn.t3)().prototype.logSigmoid=function(){return this.throwIfDisposed(),(0,ts.e)(this)};var ns=n(1510);(0,xn.t3)().prototype.logSoftmax=function(e){return this.throwIfDisposed(),(0,ns.C)(this,e)};var ss=n(1391);(0,xn.t3)().prototype.logSumExp=function(e,t){return this.throwIfDisposed(),(0,ss.l)(this,e,t)},(0,xn.t3)().prototype.log=function(){return this.throwIfDisposed(),(0,yt.c)(this)};var as=n(7474);(0,xn.t3)().prototype.log1p=function(){return this.throwIfDisposed(),(0,as.K)(this)},(0,xn.t3)().prototype.logicalAnd=function(e){return this.throwIfDisposed(),(0,j.H)(this,e)},(0,xn.t3)().prototype.logicalNot=function(){return this.throwIfDisposed(),(0,Rt.h)(this)};var rs=n(5750);(0,xn.t3)().prototype.logicalOr=function(e){return this.throwIfDisposed(),(0,rs.K)(this,e)};var is=n(596);(0,xn.t3)().prototype.logicalXor=function(e){return this.throwIfDisposed(),(0,is.e)(this,e)},(0,xn.t3)().prototype.matMul=function(e,t,n){return this.throwIfDisposed(),(0,z.O)(this,e,t,n)};var os=n(1174);(0,xn.t3)().prototype.maxPool=function(e,t,n,s){return this.throwIfDisposed(),(0,os._)(this,e,t,n,s)};var ls=n(3307);(0,xn.t3)().prototype.max=function(e,t){return this.throwIfDisposed(),(0,ls.F)(this,e,t)},(0,xn.t3)().prototype.maximum=function(e){return this.throwIfDisposed(),(0,dn.g)(this,e)};var us=n(5130);(0,xn.t3)().prototype.mean=function(e,t){return this.throwIfDisposed(),(0,us.J)(this,e,t)};var cs=n(5735);(0,xn.t3)().prototype.min=function(e,t){return this.throwIfDisposed(),(0,cs.V)(this,e,t)};var hs=n(4513);(0,xn.t3)().prototype.minimum=function(e){return this.throwIfDisposed(),(0,hs.L)(this,e)};var ps=n(1483);(0,xn.t3)().prototype.mirrorPad=function(e,t){return this.throwIfDisposed(),(0,ps.V)(this,e,t)};var ds=n(5228);(0,xn.t3)().prototype.mod=function(e){return this.throwIfDisposed(),(0,ds.w)(this,e)},(0,xn.t3)().prototype.mul=function(e){return this.throwIfDisposed(),(0,a.d)(this,e)},(0,xn.t3)().prototype.neg=function(){return this.throwIfDisposed(),(0,l.W)(this)};var fs=n(3561);(0,xn.t3)().prototype.norm=function(e,t,n){return this.throwIfDisposed(),(0,fs.K)(this,e,t,n)};var ms=n(6500);(0,xn.t3)().prototype.notEqual=function(e){return this.throwIfDisposed(),(0,ms.Q)(this,e)};var gs=n(6708);(0,xn.t3)().prototype.oneHot=function(e,t=1,n=0){return this.throwIfDisposed(),(0,gs.l)(this,e,t,n)};var ys=n(7846);(0,xn.t3)().prototype.onesLike=function(){return this.throwIfDisposed(),(0,ys.J)(this)},(0,xn.t3)().prototype.pad=function(e,t){return this.throwIfDisposed(),(0,Wt.v)(this,e,t)};var bs=n(5860);(0,xn.t3)().prototype.pool=function(e,t,n,s,a){return this.throwIfDisposed(),(0,bs.d)(this,e,t,n,s,a)},(0,xn.t3)().prototype.pow=function(e){return this.throwIfDisposed(),(0,bt.s)(this,e)};var xs=n(8151);(0,xn.t3)().prototype.prelu=function(e){return this.throwIfDisposed(),(0,xs.A)(this,e)};var vs=n(9451);(0,xn.t3)().prototype.prod=function(e,t){return this.throwIfDisposed(),(0,vs.W)(this,e,t)};var ks=n(9036);(0,xn.t3)().prototype.reciprocal=function(){return this.throwIfDisposed(),(0,ks.M)(this)};var ws=n(7409);(0,xn.t3)().prototype.relu=function(){return this.throwIfDisposed(),(0,ws.U)(this)};var Ns=n(3582);(0,xn.t3)().prototype.relu6=function(){return this.throwIfDisposed(),(0,Ns.b)(this)},(0,xn.t3)().prototype.reshapeAs=function(e){return this.throwIfDisposed(),(0,g.X)(this,e.shape)},(0,xn.t3)().prototype.reshape=function(e){return this.throwIfDisposed(),(0,g.X)(this,e)};var Is=n(3305);(0,xn.t3)().prototype.resizeBilinear=function(e,t,n){return this.throwIfDisposed(),(0,Is.I)(this,e,t,n)};var Ss=n(5098);(0,xn.t3)().prototype.resizeNearestNeighbor=function(e,t,n){return this.throwIfDisposed(),(0,Ss.j)(this,e,t,n)},(0,xn.t3)().prototype.reverse=function(e){return this.throwIfDisposed(),(0,$t.G)(this,e)};var Ts=n(3710);(0,xn.t3)().prototype.rfft=function(){return this.throwIfDisposed(),(0,Ts.Q)(this)};var Cs=n(7809);(0,xn.t3)().prototype.round=function(){return this.throwIfDisposed(),(0,Cs.N)(this)},(0,xn.t3)().prototype.rsqrt=function(){return this.throwIfDisposed(),(0,Ce.b)(this)};var $s=n(5503);(0,xn.t3)().prototype.selu=function(){return this.throwIfDisposed(),(0,$s.U)(this)};var As=n(8678);(0,xn.t3)().prototype.separableConv2d=function(e,t,n,s,a,r){return this.throwIfDisposed(),(0,As.U)(this,e,t,n,s,a,r)},(0,xn.t3)().prototype.sigmoid=function(){return this.throwIfDisposed(),(0,jt.X)(this)};var Es=n(4434);(0,xn.t3)().prototype.sign=function(){return this.throwIfDisposed(),(0,Es.X)(this)},(0,xn.t3)().prototype.sin=function(){return this.throwIfDisposed(),(0,oe.O)(this)},(0,xn.t3)().prototype.sinh=function(){return this.throwIfDisposed(),(0,ue.R)(this)},(0,xn.t3)().prototype.slice=function(e,t){return this.throwIfDisposed(),(0,rt.t)(this,e,t)};var _s=n(682);(0,xn.t3)().prototype.softmax=function(e){return this.throwIfDisposed(),(0,_s.X)(this,e)};var Rs=n(3694);(0,xn.t3)().prototype.softplus=function(){return this.throwIfDisposed(),(0,Rs.W)(this)},(0,xn.t3)().prototype.spaceToBatchND=function(e,t){return this.throwIfDisposed(),(0,B.f)(this,e,t)},(0,xn.t3)().prototype.split=function(e,t){return this.throwIfDisposed(),(0,Y.V)(this,e,t)},(0,xn.t3)().prototype.sqrt=function(){return this.throwIfDisposed(),(0,c._)(this)},(0,xn.t3)().prototype.square=function(){return this.throwIfDisposed(),(0,h.h)(this)};var Fs=n(5265);(0,xn.t3)().prototype.squaredDifference=function(e){return this.throwIfDisposed(),(0,Fs.$)(this,e)};var Ds=n(9590);(0,xn.t3)().prototype.squeeze=function(e){return this.throwIfDisposed(),(0,Ds.L)(this,e)},(0,xn.t3)().prototype.stack=function(e,t){this.throwIfDisposed();const n=e instanceof xn.es?[this,e]:[this,...e];return(0,un.k)(n,t)},(0,xn.t3)().prototype.step=function(e){return this.throwIfDisposed(),(0,r.N)(this,e)};var Os=n(5158);(0,xn.t3)().prototype.stridedSlice=function(e,t,n,s,a,r,i,o){return this.throwIfDisposed(),(0,Os.N)(this,e,t,n,s,a,r,i,o)},(0,xn.t3)().prototype.sub=function(e){return this.throwIfDisposed(),(0,p.l)(this,e)},(0,xn.t3)().prototype.sum=function(e,t){return this.throwIfDisposed(),(0,y.S)(this,e,t)};var Ms=n(1173);(0,xn.t3)().prototype.tan=function(){return this.throwIfDisposed(),(0,Ms.O)(this)};var zs=n(1869);(0,xn.t3)().prototype.tanh=function(){return this.throwIfDisposed(),(0,zs.A)(this)},(0,xn.t3)().prototype.tile=function(e){return this.throwIfDisposed(),(0,$e.G)(this,e)},(0,xn.t3)().prototype.toBool=function(){return this.throwIfDisposed(),(0,s.p)(this,"bool")},(0,xn.t3)().prototype.toFloat=function(){return this.throwIfDisposed(),(0,s.p)(this,"float32")},(0,xn.t3)().prototype.toInt=function(){return this.throwIfDisposed(),(0,s.p)(this,"int32")};var Ls=n(3243);(0,xn.t3)().prototype.topk=function(e,t){return this.throwIfDisposed(),(0,Ls.h)(this,e,t)},(0,xn.t3)().prototype.transpose=function(e){return this.throwIfDisposed(),(0,de.p)(this,e)};var Bs=n(9608);let Ps;function Vs(){return null==Ps&&(Ps=(0,e.backend)().epsilon()),Ps}(0,xn.t3)().prototype.unique=function(e){return this.throwIfDisposed(),(0,Bs.T)(this,e)},(0,xn.t3)().prototype.unsortedSegmentSum=function(e,t){return this.throwIfDisposed(),(0,Ee.p)(this,e,t)},(0,xn.t3)().prototype.unstack=function(e){return this.throwIfDisposed(),(0,ft.H)(this,e)},(0,xn.t3)().prototype.where=function(e,t){return this.throwIfDisposed(),(0,X.a)(e,this,t)},(0,xn.t3)().prototype.zerosLike=function(){return this.throwIfDisposed(),(0,v.P)(this)};class Ws extends Error{constructor(e){super(e),Object.setPrototypeOf(this,Ws.prototype)}}class Us extends Error{constructor(e){super(e),Object.setPrototypeOf(this,Us.prototype)}}class Gs extends Error{constructor(e){super(e),Object.setPrototypeOf(this,Gs.prototype)}}class Hs extends Error{constructor(e){super(e),Object.setPrototypeOf(this,Hs.prototype)}}class js extends Error{constructor(e){super(e),Object.setPrototypeOf(this,js.prototype)}}function Xs(e,t){if(Array.isArray(e)){let n=[];for(let s=0;s<t;s++)n=n.concat(e);return n}{const n=new Array(t);return n.fill(e),n}}function qs(e,t){if(!e)throw new js(t)}function Ks(e,t){let n=0;for(const s of e)s===t&&n++;return n}function Ys(e){return 1===e.length?e[0]:e}function Qs(e){return Array.isArray(e)?e:[e]}function Js(e){const t=e.replace(/(.)([A-Z][a-z0-9]+)/g,"$1_$2").replace(/([a-z])([A-Z])/g,"$1_$2").toLowerCase();return"_"!==t[0]?t:"private"+t}function Zs(e){return e.length<=1||-1===e.indexOf("_")?e:e.replace(/[_]+(\w|$)/g,((e,t)=>t.toUpperCase()))}Error;let ea={};function ta(e){if(null==e)return null;const t={};return t.className=e.getClassName(),t.config=e.getConfig(),t}function na(e){if(null!=e&&"object"==typeof e)if(Array.isArray(e))e.forEach((e=>na(e)));else{const t=Object.keys(e);for(const n of t){const t=e[n];null!=t&&"object"==typeof t&&(Array.isArray(t)||"ndarray"!==t.type||"number"!=typeof t.value?na(t):e[n]=t.value)}}}function sa(e,t={},n={},s="object",a=!1){if("string"==typeof e){const a=e;let r;if(a in n)r=n[a];else if(a in ea)r=ea[a];else if(r=t[a],null==r)throw new Gs(`Unknown ${s}: ${e}. This may be due to one of the following reasons:\n1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);return r}{const r=e;if(null==r.className||null==r.config)throw new Gs(`${s}: Improper config format: ${JSON.stringify(r)}.\n'className' and 'config' must set.`);const i=r.className;let o,l;if(i in n?[o,l]=n[i]:i in ea?[o,l]=ea.className:i in t&&([o,l]=t[i]),null==o)throw new Gs(`Unknown ${s}: ${i}. This may be due to one of the following reasons:\n1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);if(null!=l){const e={};for(const t of Object.keys(ea))e[t]=ea[t];for(const t of Object.keys(n))e[t]=n[t];r.config.customObjects=e;const t=Object.assign({},ea);for(const e of Object.keys(n))ea[e]=n[e];na(r.config);const s=l(o,r.config,n,a);return ea=Object.assign({},t),s}{const e=Object.assign({},ea);for(const e of Object.keys(n))ea[e]=n[e];const t=new o(r.config);return ea=Object.assign({},e),t}}}function aa(e,t){return-1*function(e,t){return e<t?-1:e>t?1:0}(e,t)}function ra(e){if(null==e)return e;const t=[];for(const n of e)-1===t.indexOf(n)&&t.push(n);return t}function ia(e){if(null==e)throw new Gs(`Invalid value in obj: ${JSON.stringify(e)}`);for(const t in e)if(e.hasOwnProperty(t))return!1;return!0}function oa(e,t,n){if(null!=n&&e.indexOf(n)<0)throw new Gs(`${n} is not a valid ${t}.  Valid values are ${e} or null/undefined.`)}function la(e,t,n=0,s=1/0){return qs(n>=0),qs(s>=n),Array.isArray(e)&&e.length>=n&&e.length<=s&&e.every((e=>typeof e===t))}function ua(t,n){Array.isArray(t)?(e.util.assert(t.length>0,(()=>`${n} is unexpectedly an empty array.`)),t.forEach(((e,t)=>ua(e,`element ${t+1} of ${n}`)))):e.util.assert(Number.isInteger(t)&&t>0,(()=>`Expected ${n} to be a positive integer, but got ${ca(t)}.`))}function ca(e){return null===e?"null":Array.isArray(e)?"["+e.map((e=>ca(e))).join(",")+"]":"string"==typeof e?`"${e}"`:`${e}`}function ha(e){return"relu"===e?"relu":"linear"===e?"linear":"elu"===e?"elu":null}function pa(t,n){return(0,e.tidy)((()=>e.sqrt(e.sum(e.mul(t,t),n,!0))))}class da extends e.serialization.Serializable{getConfig(){return{}}}class fa extends da{constructor(e){super(),this.defaultMaxValue=2,this.defaultAxis=0,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(t){return(0,e.tidy)((()=>{const n=pa(t,this.axis),s=e.clipByValue(n,0,this.maxValue);return e.mul(t,e.div(s,e.add(Vs(),n)))}))}getConfig(){return{maxValue:this.maxValue,axis:this.axis}}}fa.className="MaxNorm",e.serialization.registerClass(fa);class ma extends da{constructor(e){super(),this.defaultAxis=0,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(t){return(0,e.tidy)((()=>e.div(t,e.add(Vs(),pa(t,this.axis)))))}getConfig(){return{axis:this.axis}}}ma.className="UnitNorm",e.serialization.registerClass(ma);class ga extends da{apply(t){return e.relu(t)}}ga.className="NonNeg",e.serialization.registerClass(ga);class ya extends da{constructor(e){super(),this.defaultMinValue=0,this.defaultMaxValue=1,this.defaultRate=1,this.defaultAxis=0,this.minValue=null!=e.minValue?e.minValue:this.defaultMinValue,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.rate=null!=e.rate?e.rate:this.defaultRate,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(t){return(0,e.tidy)((()=>{const n=pa(t,this.axis),s=e.add(e.mul(this.rate,e.clipByValue(n,this.minValue,this.maxValue)),e.mul(1-this.rate,n));return e.mul(t,e.div(s,e.add(Vs(),n)))}))}getConfig(){return{minValue:this.minValue,maxValue:this.maxValue,rate:this.rate,axis:this.axis}}}ya.className="MinMaxNorm",e.serialization.registerClass(ya);const ba={maxNorm:"MaxNorm",minMaxNorm:"MinMaxNorm",nonNeg:"NonNeg",unitNorm:"UnitNorm"};function xa(e){return ta(e)}function va(t,n={}){return sa(t,e.serialization.SerializationMap.getMap().classNameMap,n,"constraint")}function ka(e){return null==e?null:"string"==typeof e?va({className:e in ba?ba[e]:e,config:{}}):e instanceof da?e:va(e)}const wa=["channelsFirst","channelsLast"],Na=["nearest","bilinear"],Ia=["valid","same","causal"],Sa=["max","avg"],Ta=["sum","mul","concat","ave"],Ca=new Map;function $a(e){oa(wa,"DataFormat",e)}function Aa(e){oa(Ia,"PaddingMode",e)}function Ea(e){oa(Sa,"PoolMode",e)}const _a=[];function Ra(e,t){_a.push(e);try{const e=t();return _a.pop(),e}catch(e){throw _a.pop(),e}}function Fa(e){if(!Ma(e))throw new Error("Not a valid tensor name: '"+e+"'");return(0===_a.length?"":_a.join("/")+"/")+e}function Da(e){if(!Ma(e))throw new Error("Not a valid tensor name: '"+e+"'");Ca.has(e)||Ca.set(e,0);const t=Ca.get(e);if(Ca.set(e,Ca.get(e)+1),t>0){const n=`${e}_${t}`;return Ca.set(n,1),n}return e}const Oa=new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);function Ma(e){return!!e.match(Oa)}function za(e,t,n){null==t&&(t=0),null==n&&(n=e.length);let s=1;for(let a=t;a<n;++a)s*=e[a];return s}function La(t){return t=Array.isArray(t)?new Float32Array(t):t,(0,e.tensor1d)(t)}function Ba(t){return e.min(La(t)).dataSync()[0]}function Pa(t){return e.max(La(t)).dataSync()[0]}function Va(e,t){if(t<e)throw new Gs(`end (${t}) < begin (${e}) is forbidden.`);const n=[];for(let s=e;s<t;++s)n.push(s);return n}function Wa(e,t){return e.asType(t)}function Ua(e,t=-1){const n=e.shape.slice();return t<0&&(t=n.length+t+1),n.splice(t,0,1),e.reshape(n)}function Ga(t,n,s){return(0,e.tidy)((()=>{switch(t.rank){case 1:return e.slice1d(t,n,s);case 2:return e.slice2d(t,[n,0],[s,t.shape[1]]);case 3:return e.slice3d(t,[n,0,0],[s,t.shape[1],t.shape[2]]);case 4:return e.slice4d(t,[n,0,0,0],[s,t.shape[1],t.shape[2],t.shape[3]]);case 5:return e.slice(t,[n,0,0,0,0],[s,t.shape[1],t.shape[2],t.shape[3],t.shape[4]]);case 6:return e.slice(t,[n,0,0,0,0,0],[s,t.shape[1],t.shape[2],t.shape[3],t.shape[4],t.shape[5]]);default:throw new Gs(`sliceAlongFirstAxis() received an unsupported tensor rank: ${t.rank}`)}}))}function Ha(t,n,s){return(0,e.tidy)((()=>{switch(t.rank){case 1:return e.slice1d(t,n,s);case 2:return e.slice2d(t,[0,n],[t.shape[0],s]);case 3:return e.slice3d(t,[0,0,n],[t.shape[0],t.shape[1],s]);case 4:return e.slice4d(t,[0,0,0,n],[t.shape[0],t.shape[1],t.shape[2],s]);default:throw new Gs(`sliceAlongLastAxis() received an unsupported tensor rank: ${t.rank}`)}}))}function ja(t,n,s,a){return(0,e.tidy)((()=>{switch(t.rank){case 1:return e.slice1d(t,n,s);case 2:switch(a){case 1:return Ga(t,n,s);case 2:return Ha(t,n,s);default:throw new Gs(`The axis is not within the rank of the tensor ${a}`)}case 3:switch(a){case 1:return Ga(t,n,s);case 2:return e.slice3d(t,[0,n,0],[t.shape[0],s,t.shape[2]]);case 3:return Ha(t,n,s);default:throw new Gs(`The axis is not within the rank of the tensor ${a}`)}case 4:switch(a){case 1:return Ga(t,n,s);case 2:return e.slice4d(t,[0,n,0,0],[t.shape[0],s,t.shape[2],t.shape[3]]);case 3:return e.slice4d(t,[0,0,n,0],[t.shape[0],t.shape[1],s,t.shape[3]]);case 4:return Ha(t,n,s);default:throw new Gs(`The axis is not within the rank of the tensor ${a}`)}default:throw new Gs(`sliceAlongLastAxis() received an unsupported tensor rank: ${t.rank}`)}}))}function Xa(t,n=-1){let s;return n<0&&(s=t[0].rank,n=0!==s?s:0),n===t[0].rank&&(n=-1),e.concat(t,n)}function qa(t,n){switch(t.rank){case 1:return e.concat1d([t,n]);case 2:return e.concat2d([t,n],0);case 3:return e.concat3d([t,n],0);case 4:return e.concat4d([t,n],0);default:throw new Gs(`concatAlongFirstAxis() received an unsupported tensor rank: ${t.rank}`)}}function Ka(t,n){if(Array.isArray(n)||(n=[n]),t.rank!==n.length)throw new Gs(`The length of input n (${n.length}) does not match the number of dimensions in input x (${t.rank})`);return e.tile(t,n)}function Ya(t,n=0,s=1,a,r){return e.randomNormal(t,n,s,a,r)}function Qa(t,n,s,a){if(t.rank<2||n.rank<2)throw new Hs(`dot requires both inputs to be rank >= 2 but got x shape = ${t.shape} and y shape = ${n.shape}`);if(n.rank>=3&&t.shape.slice(-1)[0]!==n.shape.slice(-2)[0])throw new Hs(`If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${t.shape} and  y shape = ${n.shape}`);if(2===t.rank&&2===n.rank){const r=!1,i=!1;return e.fused.matMul({a:t,b:n,transposeA:r,transposeB:i,bias:a?er(t.rank,a,"channelsLast"):null,activation:s})}{const r=t.shape.slice(),i=r.pop();t=t.reshape([-1,i]);const o=n.shape.slice(),l=o.pop(),u=o.pop(),c=[...o,l],h=Array.from({length:n.rank},((e,t)=>0===t?n.rank-2:t<=n.rank-2?t-1:t));n=n.transpose(h).reshape([u,-1]);const p=[...r,...c],d=!1,f=!1;return e.fused.matMul({a:t,b:n,transposeA:d,transposeB:f,bias:a?er(t.rank,a,"channelsLast"):null,activation:s}).reshape(p)}}function Ja(t,n,s){return(0,e.tidy)((()=>(n=Array.isArray(n)?(0,e.tensor1d)(n,"int32"):n.toInt(),e.gather(t,n,s))))}function Za(t){return e.mul(t,t)}function er(e,t,n){const s=t.shape;if(1!==t.rank&&t.rank!==e)throw new Gs(`Unexpected bias dimensions: ${t.rank}; expected it to be 1 or ${e}`);if(5===e){if("channelsFirst"===n)return 1===s.length?t.reshape([1,s[0],1,1,1]):t.reshape([1,s[3],s[0],s[1],s[2]]);if("channelsLast"===n)return 1===s.length?t.reshape([1,1,1,1,s[0]]):t.reshape([1].concat(s))}else if(4===e){if("channelsFirst"===n)return 1===s.length?t.reshape([1,s[0],1,1]):t.reshape([1,s[2],s[0],s[1]]);if("channelsLast"===n)return 1===s.length?t.reshape([1,1,1,s[0]]):t.reshape([1].concat(s))}else if(3===e){if("channelsFirst"===n)return 1===s.length?t.reshape([1,s[0],1]):t.reshape([1,s[1],s[0]]);if("channelsLast"===n)return 1===s.length?t.reshape([1,1,s[0]]):t.reshape([1].concat(s))}else if(e<3)return t;throw new Gs(`Unsupported input rank by biasAdd: ${t.rank}`)}function tr(t,n,s){return(0,e.tidy)((()=>(null==s&&(s="channelsLast"),$a(s),t.add(er(t.rank,n,s)))))}function nr(t,n,s,a){return(0,e.tidy)((()=>e.dropout(t,n,s,a)))}function sr(e,t,n=!1){return n?e():t()}const ar=["fanIn","fanOut","fanAvg"],rr=["normal","uniform","truncatedNormal"];class ir extends e.serialization.Serializable{fromConfigUsesCustomObjects(){return!1}getConfig(){return{}}}class or extends ir{apply(t,n){return(0,e.zeros)(t,n)}}or.className="Zeros",e.serialization.registerClass(or);class lr extends ir{apply(t,n){return(0,e.ones)(t,n)}}lr.className="Ones",e.serialization.registerClass(lr);class ur extends ir{constructor(e){if(super(),"object"!=typeof e)throw new Gs(`Expected argument of type ConstantConfig but got ${e}`);if(void 0===e.value)throw new Gs(`config must have value set but got ${e}`);this.value=e.value}apply(t,n){return(0,e.tidy)((()=>(0,e.mul)((0,e.scalar)(this.value),(0,e.ones)(t,n))))}getConfig(){return{value:this.value}}}ur.className="Constant",e.serialization.registerClass(ur);class cr extends ir{constructor(e){super(),this.DEFAULT_MINVAL=-.05,this.DEFAULT_MAXVAL=.05,this.minval=e.minval||this.DEFAULT_MINVAL,this.maxval=e.maxval||this.DEFAULT_MAXVAL,this.seed=e.seed}apply(t,n){return(0,e.randomUniform)(t,this.minval,this.maxval,n)}getConfig(){return{minval:this.minval,maxval:this.maxval,seed:this.seed}}}cr.className="RandomUniform",e.serialization.registerClass(cr);class hr extends ir{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,t){if("float32"!==(t=t||"float32")&&"int32"!==t)throw new Hs(`randomNormal does not support dType ${t}.`);return Ya(e,this.mean,this.stddev,t,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}hr.className="RandomNormal",e.serialization.registerClass(hr);class pr extends ir{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(t,n){if("float32"!==(n=n||"float32")&&"int32"!==n)throw new Hs(`truncatedNormal does not support dType ${n}.`);return(0,e.truncatedNormal)(t,this.mean,this.stddev,n,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}pr.className="TruncatedNormal",e.serialization.registerClass(pr);class dr extends ir{constructor(e){super(),this.gain=null!=e.gain?e.gain:1}apply(t,n){return(0,e.tidy)((()=>{if(2!==t.length||t[0]!==t[1])throw new Gs("Identity matrix initializer can only be used for 2D square matrices.");return(0,e.mul)(this.gain,(0,e.eye)(t[0]))}))}getConfig(){return{gain:this.gain}}}dr.className="Identity",e.serialization.registerClass(dr);class fr extends ir{constructor(e){if(super(),e.scale<0)throw new Gs(`scale must be a positive float. Got: ${e.scale}`);var t;this.scale=null==e.scale?1:e.scale,this.mode=null==e.mode?"fanIn":e.mode,t=this.mode,oa(ar,"FanMode",t),this.distribution=null==e.distribution?"normal":e.distribution,function(e){oa(rr,"Distribution",e)}(this.distribution),this.seed=e.seed}apply(t,n){const s=function(e,t="channelsLast"){let n,s;if($a(t),2===e.length)n=e[0],s=e[1];else if(-1!==[3,4,5].indexOf(e.length)){if("channelsFirst"===t){const t=za(e,2);n=e[1]*t,s=e[0]*t}else if("channelsLast"===t){const t=za(e,0,e.length-2);n=e[e.length-2]*t,s=e[e.length-1]*t}}else{const t=za(e);n=Math.sqrt(t),s=Math.sqrt(t)}return[n,s]}(t),a=s[0],r=s[1];let i=this.scale;if("fanIn"===this.mode?i/=Math.max(1,a):"fanOut"===this.mode?i/=Math.max(1,r):i/=Math.max(1,(a+r)/2),"normal"===this.distribution){const s=Math.sqrt(i);if("float32"!==(n=n||"float32")&&"int32"!==n)throw new Hs(`${this.getClassName()} does not support dType ${n}.`);return(0,e.truncatedNormal)(t,0,s,n,this.seed)}{const s=Math.sqrt(3*i);return(0,e.randomUniform)(t,-s,s,n)}}getConfig(){return{scale:this.scale,mode:this.mode,distribution:this.distribution,seed:this.seed}}}fr.className="VarianceScaling",e.serialization.registerClass(fr);class mr extends fr{constructor(e){super({scale:1,mode:"fanAvg",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return fr.className}}mr.className="GlorotUniform",e.serialization.registerClass(mr);class gr extends fr{constructor(e){super({scale:1,mode:"fanAvg",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return fr.className}}gr.className="GlorotNormal",e.serialization.registerClass(gr);class yr extends fr{constructor(e){super({scale:2,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return fr.className}}yr.className="HeNormal",e.serialization.registerClass(yr);class br extends fr{constructor(e){super({scale:2,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return fr.className}}br.className="HeUniform",e.serialization.registerClass(br);class xr extends fr{constructor(e){super({scale:1,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return fr.className}}xr.className="LeCunNormal",e.serialization.registerClass(xr);class vr extends fr{constructor(e){super({scale:1,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return fr.className}}vr.className="LeCunNormal",e.serialization.registerClass(vr);class kr extends ir{constructor(e){if(super(),this.DEFAULT_GAIN=1,this.gain=null==e.gain?this.DEFAULT_GAIN:e.gain,this.seed=e.seed,null!=this.seed)throw new Hs("Random seed is not implemented for Orthogonal Initializer yet.")}apply(t,n){return(0,e.tidy)((()=>{if(t.length<2)throw new Hs("Shape must be at least 2D.");t[0]*t[1]>2e3&&console.warn(`Orthogonal initializer is being called on a matrix with more than 2000 (${t[0]*t[1]}) elements: Slowness may result.`);const n=Ya(t[0]>t[1]?[t[1],t[0]]:t,0,1,"float32");let s=e.linalg.gramSchmidt(n);return t[0]>t[1]&&(s=s.transpose()),(0,e.mul)(this.gain,s)}))}getConfig(){return{gain:this.gain,seed:this.seed}}}kr.className="Orthogonal",e.serialization.registerClass(kr);const wr={constant:"Constant",glorotNormal:"GlorotNormal",glorotUniform:"GlorotUniform",heNormal:"HeNormal",heUniform:"HeUniform",identity:"Identity",leCunNormal:"LeCunNormal",leCunUniform:"LeCunUniform",ones:"Ones",orthogonal:"Orthogonal",randomNormal:"RandomNormal",randomUniform:"RandomUniform",truncatedNormal:"TruncatedNormal",varianceScaling:"VarianceScaling",zeros:"Zeros"};function Nr(t,n={}){return sa(t,e.serialization.SerializationMap.getMap().classNameMap,n,"initializer")}function Ir(e){return ta(e)}function Sr(e){if("string"==typeof e){const t=e in wr?wr[e]:e;if("GlorotNormal"===t)return new gr;if("GlorotUniform"===t)return new mr;if("HeNormal"===t)return new yr;if("HeUniform"===t)return new br;if("LeCunNormal"===t)return new xr;if("LeCunUniform"===t)return new vr;{const e={};return e.className=t,e.config={},Nr(e)}}return e instanceof ir?e:Nr(e)}let Tr=0;function Cr(){return Tr++}const $r={};function Ar(e=""){return e in $r||($r[e]=0),$r[e]+=1,e+$r[e].toString()}function Er(e){return Array.isArray(e)&&Array.isArray(e[0])}function _r(e){return 0===e.length?[]:Array.isArray(e[0])?e:[e]}function Rr(e){let t;if(Array.isArray(e)){if(1!==e.length)throw new Gs(`Expected Tensor length to be 1; got ${e.length}`);t=e[0]}else t=e;return t}function Fr(e){if(Array.isArray(e)&&Array.isArray(e[0])){if(1===e.length)return(e=e)[0];throw new Gs(`Expected exactly 1 Shape; got ${e.length}`)}return e}function Dr(e){let t=0;for(const n of e)0===n.shape.length?t+=1:t+=n.shape.reduce(((e,t)=>e*t));return t}class Or{constructor(t,n="float32",s="Variable",a=!0,r=null){this.dtype=null==n?"float32":n,this.shape=t.shape,this.id=Cr(),s=null==s?"Variable":s,this.originalName=Fa(s),this.name=Da(this.originalName),this.trainable_=a,this.constraint=r,this.val=e.variable(t,this.trainable_,this.name,this.dtype)}read(){return this.assertNotDisposed(),this.val}write(e){return this.assertNotDisposed(),function(e,t){if(e.shape.toString()!==t.shape.toString())throw new Error("Shape mismatch: "+JSON.stringify(e.shape)+" vs. "+JSON.stringify(t.shape))}(this.val,e),this.val.id!==e.id&&(this.val.assign(e),null!=this.constraint&&this.val.assign(this.constraint.apply(this.val))),this}dispose(){this.assertNotDisposed(),this.val.dispose()}assertNotDisposed(){if(this.val.isDisposed)throw new Error(`LayersVariable ${this.name} is already disposed.`)}get trainable(){return this.trainable_}set trainable(e){this.trainable_=e,this.val.trainable=e}}function Mr(e){return e.map((e=>e.read()))}function zr(e){e.forEach((e=>{e[0].write(e[1])}))}class Lr{constructor(e){this.dtype=e.dtype,this.shape=e.shape,null!=e.shape?this.ndim=e.shape.length:this.ndim=e.ndim,this.maxNDim=e.maxNDim,this.minNDim=e.minNDim,this.axes=e.axes||{}}}class Br{constructor(e,t,n,s,a,r,i){this.dtype=e,this.shape=t,this.sourceLayer=n,this.inputs=s,this.callArgs=a,this.outputTensorIndex=i,this.id=Cr(),null!=r&&(this.originalName=Fa(r),this.name=Da(this.originalName)),this.rank=t.length}}let Pr=0;class Vr{constructor(e,t){this.callArgs=t,this.id=Pr++,this.outboundLayer=e.outboundLayer,this.inboundLayers=e.inboundLayers,this.nodeIndices=e.nodeIndices,this.tensorIndices=e.tensorIndices,this.inputTensors=e.inputTensors,this.outputTensors=e.outputTensors,this.inputMasks=e.inputMasks,this.outputMasks=e.outputMasks,this.inputShapes=e.inputShapes,this.outputShapes=e.outputShapes;for(const t of e.inboundLayers)null!=t&&t.outboundNodes.push(this);e.outboundLayer.inboundNodes.push(this)}getConfig(){const e=[];for(const t of this.inboundLayers)null!=t?e.push(t.name):e.push(null);return{outboundLayer:this.outboundLayer?this.outboundLayer.name:null,inboundLayers:e,nodeIndices:this.nodeIndices,tensorIndices:this.tensorIndices}}}let Wr=0;class Ur extends e.serialization.Serializable{constructor(e={}){super(),this._callHook=null,this._addedWeightNames=[],this._stateful=!1,this.id=Wr++,this.activityRegularizer=null,this.inputSpec=null,this.supportsMasking=!1,this._trainableWeights=[],this._nonTrainableWeights=[],this._losses=[],this._updates=[],this._built=!1,this.inboundNodes=[],this.outboundNodes=[];let t=e.name;if(!t){const e=this.getClassName();t=Js(e)+"_"+Ar(e)}if(this.name=t,this.trainable_=null==e.trainable||e.trainable,null!=e.inputShape||null!=e.batchInputShape){let t;if(null!=e.batchInputShape)t=e.batchInputShape;else if(null!=e.inputShape){let n=null;null!=e.batchSize&&(n=e.batchSize),t=[n].concat(e.inputShape)}this.batchInputShape=t;let n=e.dtype;null==n&&(n=e.inputDType),null==n&&(n="float32"),this.dtype=n}null!=e.weights?this.initialWeights=e.weights:this.initialWeights=null,this._refCount=null,this.fastWeightInitDuringBuild=!1}static nodeKey(e,t){return e.name+"_ib-"+t.toString()}getNodeAtIndex(e,t){if(0===this.inboundNodes.length)throw new Us(`The layer has never been called and thus has no defined ${t}.`);if(this.inboundNodes.length<=e)throw new Gs(`Asked to get ${t} at node ${e}, but the layer has only ${this.inboundNodes.length} inbound nodes.`);return this.inboundNodes[e]}getInputAt(e){return Ys(this.getNodeAtIndex(e,"input").inputTensors)}getOutputAt(e){return Ys(this.getNodeAtIndex(e,"output").outputTensors)}get input(){if(this.inboundNodes.length>1)throw new Ws(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use \`getInputAt(nodeIndex)\` instead.`);if(0===this.inboundNodes.length)throw new Ws(`Layer ${this.name} is not connected, no input to return.`);return Ys(this.getNodeAtIndex(0,"input").inputTensors)}get output(){if(0===this.inboundNodes.length)throw new Ws(`Layer ${this.name} has no inbound nodes.`);if(this.inboundNodes.length>1)throw new Ws(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use \`getOutputAt(nodeIndex)\` instead.`);return Ys(this.getNodeAtIndex(0,"output").outputTensors)}get losses(){return this._losses}calculateLosses(){return this.losses.map((e=>e()))}get updates(){return this._updates}get built(){return this._built}set built(e){this._built=e}get trainable(){return this.trainable_}set trainable(e){this._trainableWeights.forEach((t=>t.trainable=e)),this.trainable_=e}get trainableWeights(){return this.trainable_?this._trainableWeights.filter((e=>e.trainable)):[]}set trainableWeights(e){this._trainableWeights=e}get nonTrainableWeights(){return this.trainable?this._trainableWeights.filter((e=>!e.trainable)).concat(this._nonTrainableWeights):this._trainableWeights.concat(this._nonTrainableWeights)}set nonTrainableWeights(e){this._nonTrainableWeights=e}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}get stateful(){return this._stateful}resetStates(){if(!this.stateful)throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.")}assertInputCompatibility(e){if(e=Qs(e),null==this.inputSpec||0===this.inputSpec.length)return;const t=Qs(this.inputSpec);if(e.length!==t.length)throw new Gs(`Layer ${this.name} expects ${t.length} inputs, but it received ${e.length} input tensors. Input received: ${e}`);for(let n=0;n<e.length;n++){const s=e[n],a=t[n];if(null==a)continue;const r=s.rank;if(null!=a.ndim&&r!==a.ndim)throw new Gs(`Input ${n} is incompatible with layer ${this.name}: expected ndim=${a.ndim}, found ndim=${r}`);if(null!=a.maxNDim&&r>a.maxNDim)throw new Gs(`Input ${n} is incompatible with layer ${this.name}: expected max_ndim=${a.maxNDim}, found ndim=${r}`);if(null!=a.minNDim&&r<a.minNDim)throw new Gs(`Input ${n} is incompatible with layer ${this.name}: expected min_ndim=${a.minNDim}, found ndim=${r}.`);if(null!=a.dtype&&s.dtype!==a.dtype)throw new Gs(`Input ${n} is incompatible with layer ${this.name} : expected dtype=${a.dtype}, found dtype=${s.dtype}.`);if(a.axes){const e=s.shape;for(const t in a.axes){const s=Number(t),r=a.axes[t],i=s>=0?e[s]:e[e.length+s];if(null!=r&&-1===[r,null].indexOf(i))throw new Gs(`Input ${n} is incompatible with layer ${this.name}: expected axis ${s} of input shape to have value ${r} but got shape ${e}.`)}}if(null!=a.shape)for(let e=0;e<a.shape.length;++e){const t=a.shape[e],r=s.shape[e];if(null!=t&&null!=r&&t!==r)throw new Gs(`Input ${n} is incompatible with layer ${this.name}: expected shape=${a.shape}, found shape=${s.shape}.`)}}}call(e,t){return e}invokeCallHook(e,t){null!=this._callHook&&this._callHook(e,t)}setCallHook(e){this._callHook=e}clearCallHook(){this._callHook=null}apply(e,t){t=t||{},this.assertNotDisposed();const n=Qs(e);let s=!0;for(const e of n)if(!(e instanceof Br)){s=!1;break}let a=!0;for(const e of n)if(e instanceof Br){a=!1;break}if(s===a)throw new Gs("Arguments to apply() must be all SymbolicTensors or all Tensors");return Ra(this.name,(()=>{if(!this.built){this.assertInputCompatibility(e);const t=[];for(const n of Qs(e))t.push(n.shape);this.build(Ys(t)),this.built=!0,this.initialWeights&&this.setWeights(this.initialWeights),null===this._refCount&&a&&(this._refCount=1)}if(this.assertInputCompatibility(e),a){let s=this.call(e,t);const a=Qs(s),r=[];for(let e of a)-1!==n.indexOf(e)&&(e=e.clone()),r.push(e);if(s=Ys(r),null!=this.activityRegularizer)throw new Hs("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return s}{const n=function(e){e=Qs(e);const t=[];for(const n of e)t.push(n.shape);return Ys(t)}(e),s=this.computeOutputShape(n);let a;const r="float32";if(this.warnOnIncompatibleInputShape(Array.isArray(e)?n[0]:n),a=null!=s&&s.length>0&&Array.isArray(s[0])?s.map(((n,s)=>new Br(r,n,this,Qs(e),t,this.name,s))):new Br(r,s,this,Qs(e),t,this.name),this.addInboundNode(e,a,null,null,n,s,t),this._refCount++,null!=this.activityRegularizer)throw new Hs("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return a}}))}warnOnIncompatibleInputShape(e){if(null!=this.batchInputShape)if(e.length!==this.batchInputShape.length)console.warn(`The rank of the input tensor provided (shape: ${JSON.stringify(e)}) does not match that of the batchInputShape (${JSON.stringify(this.batchInputShape)}) of the layer ${this.name}`);else{let t=!1;this.batchInputShape.forEach(((n,s)=>{null!=n&&null!=e[s]&&e[s]!==n&&(t=!0)})),t&&console.warn(`The shape of the input tensor (${JSON.stringify(e)}) does not match the expectation of layer ${this.name}: ${JSON.stringify(this.batchInputShape)}`)}}get outputShape(){if(null==this.inboundNodes||0===this.inboundNodes.length)throw new Ws(`The layer ${this.name} has never been called and thus has no defined output shape.`);const e=[];for(const t of this.inboundNodes){const n=JSON.stringify(t.outputShapes);-1===e.indexOf(n)&&e.push(n)}if(1===e.length){const e=this.inboundNodes[0].outputShapes;return Array.isArray(e)&&Array.isArray(e[0])&&1===e.length?e[0]:e}throw new Ws(`The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of "output shape" is ill-defined for the layer.`)}countParams(){if(!this.built)throw new Us(`You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`);return Dr(this.weights)}build(e){this.built=!0}getWeights(e=!1){return Mr(e?this.trainableWeights:this.weights)}setWeights(t){(0,e.tidy)((()=>{const n=this.weights;if(n.length!==t.length)throw new Gs(`You called setWeights(weights) on layer "${this.name}" with a weight list of length ${t.length}, but the layer was expecting ${n.length} weights. Provided weights: ${t}...`);if(0===n.length)return;const s=[],a=Mr(n);for(let r=0;r<a.length;++r){const i=a[r],o=n[r],l=t[r];if(!e.util.arraysEqual(i.shape,l.shape))throw new Gs(`Layer weight shape ${i.shape} not compatible with provided weight shape ${l.shape}`);s.push([o,l])}zr(s)}))}addWeight(e,t,n,s,a,r,i){if(-1!==this._addedWeightNames.indexOf(e))throw new Gs(`Duplicate weight name ${e} for layer ${this.name}`);this._addedWeightNames.push(e),null==n&&(n="float32"),this.fastWeightInitDuringBuild&&(s=Sr("zeros"));const o=s.apply(t,n),l=new Or(o,n,e,r,i);return o.dispose(),null!=a&&this.addLoss((()=>a.apply(l.read()))),null==r&&(r=!0),r?this._trainableWeights.push(l):this._nonTrainableWeights.push(l),l}setFastWeightInitDuringBuild(e){this.fastWeightInitDuringBuild=e}addLoss(e){null==e||Array.isArray(e)&&0===e.length||(e=Qs(e),void 0!==this._losses&&null!==this._losses&&this.losses.push(...e))}computeOutputShape(e){return e}computeMask(e,t){if(!this.supportsMasking){if(null!=t){if(!Array.isArray(t))throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);t.forEach((e=>{if(null!=e)throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`)}))}return null}return t}addInboundNode(e,t,n,s,a,r,i=null){const o=Qs(e);t=Qs(t),n=Qs(n),s=Qs(s),a=_r(a),r=_r(r);const l=[],u=[],c=[];for(const e of o)l.push(e.sourceLayer),u.push(e.nodeIndex),c.push(e.tensorIndex);new Vr({outboundLayer:this,inboundLayers:l,nodeIndices:u,tensorIndices:c,inputTensors:o,outputTensors:t,inputMasks:n,outputMasks:s,inputShapes:a,outputShapes:r},i);for(let e=0;e<t.length;e++)t[e].sourceLayer=this,t[e].nodeIndex=this.inboundNodes.length-1,t[e].tensorIndex=e}getConfig(){const e={name:this.name,trainable:this.trainable};return null!=this.batchInputShape&&(e.batchInputShape=this.batchInputShape),null!=this.dtype&&(e.dtype=this.dtype),e}disposeWeights(){return this.weights.forEach((e=>e.dispose())),this.weights.length}assertNotDisposed(){if(0===this._refCount)throw new Error(`Layer '${this.name}' is already disposed.`)}dispose(){if(!this.built)throw new Error(`Cannot dispose Layer ${this.name} because it has not been built yet.`);if(null===this._refCount)throw new Error(`Cannot dispose Layer ${this.name} because it has not been used yet.`);this.assertNotDisposed();let e=0;return 0==--this._refCount&&(e=this.disposeWeights()),{refCountAfterDispose:this._refCount,numDisposedVariables:e}}}function Gr(e,t,n){if((null==t||null!=n&&n>0)&&(t=e.sourceLayer,n=e.nodeIndex),0===t.inboundNodes.length)return[e];{const e=t.inboundNodes[n];if(0===e.inboundLayers.length)return e.inputTensors;{const t=[];for(let n=0;n<e.inboundLayers.length;n++){const s=Gr(e.inputTensors[n],e.inboundLayers[n],e.nodeIndices[n]);for(const e of s)-1===t.indexOf(e)&&t.push(e)}return t}}}class Hr extends Ur{constructor(e){if(super({dtype:e.dtype,name:null!=e.name?e.name:Ar("input").toString()}),null==e.batchSize&&(e.batchSize=null),null==e.sparse&&(e.sparse=!1),this.trainable=!1,this.built=!0,this.sparse=e.sparse,null!=e.inputShape&&null!=e.batchInputShape)throw new Gs("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");let t=e.batchInputShape;if(null==t){if(null==e.inputShape)throw new Gs("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");t=[e.batchSize].concat(e.inputShape)}else if(null!=e.batchSize)throw new Gs("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");const n=e.dtype||"float32";this.batchInputShape=t,this.dtype=n,this.inputSpec=[{shape:t}];const s=new Br(this.dtype,this.batchInputShape,this,[],{},this.name);s.nodeIndex=0,s.tensorIndex=0,new Vr({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:[s],outputTensors:[s],inputMasks:[null],outputMasks:[null],inputShapes:[t],outputShapes:[t]})}apply(e,t){throw new Gs(`Cannot pass any input to an InputLayer's apply() method. InputLayer name: ${this.name}`)}dispose(){return{refCountAfterDispose:this._refCount,numDisposedVariables:0}}getConfig(){return{batchInputShape:this.batchInputShape,dtype:this.dtype,sparse:this.sparse,name:this.name}}}async function jr(t){if(null==t)return;const n=[],s=[],a=[];for(const e in t){const r=t[e];if("number"!=typeof r){const t=r;n.push(t.data()),s.push(e),a.push(t)}}if(n.length>0){const r=await Promise.all(n);for(let e=0;e<r.length;++e)t[s[e]]=r[e][0];(0,e.dispose)(a)}}function Xr(e){if(null!=e)for(const t in e){const n=e[t];"number"!=typeof n&&n.dispose()}}var qr;Hr.className="InputLayer",e.serialization.registerClass(Hr),function(e){e[e.SILENT=0]="SILENT",e[e.VERBOSE=1]="VERBOSE"}(qr||(qr={}));class Kr{constructor(){this.validationData=null}setParams(e){this.params=e}async onEpochBegin(e,t){}async onEpochEnd(e,t){}async onBatchBegin(e,t){}async onBatchEnd(e,t){}async onTrainBegin(e){}async onTrainEnd(e){}setModel(e){}}class Yr{constructor(e,t=10){null==e&&(e=[]),this.callbacks=e,this.queueLength=t}append(e){this.callbacks.push(e)}setParams(e){for(const t of this.callbacks)t.setParams(e)}setModel(e){for(const t of this.callbacks)t.setModel(e)}async onEpochBegin(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onEpochBegin(e,t)}async onEpochEnd(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onEpochEnd(e,t)}async onBatchBegin(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onBatchBegin(e,t)}async onBatchEnd(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onBatchEnd(e,t)}async onTrainBegin(e){null==e&&(e={});for(const t of this.callbacks)await t.onTrainBegin(e)}async onTrainEnd(e){null==e&&(e={});for(const t of this.callbacks)await t.onTrainEnd(e)}}class Qr extends Kr{constructor(){super()}async onEpochBegin(e){this.seen=0,this.totals={}}async onBatchEnd(t,n){null==n&&(n={});const s=null==n.size?0:n.size;this.seen+=s;for(const t in n){const a=n[t];if("number"==typeof a)this.totals.hasOwnProperty(t)||(this.totals[t]=0),this.totals[t]=this.totals[t]+a*s;else{let n;t in this.totals?n=this.totals[t]:this.totals[t]=0;const r=(0,e.tidy)((()=>(0,e.add)(this.totals[t],(0,e.mul)(a,s))));this.totals[t]=r,null!=n&&n.dispose()}}}async onEpochEnd(t,n){if(null!=n)for(const t of this.params.metrics)null!=this.totals[t]&&("number"==typeof this.totals[t]?n[t]=this.totals[t]/this.seen:(0,e.tidy)((()=>{const s=(0,e.mul)((0,e.div)(1,this.seen),this.totals[t]);n[t]=s,this.totals[t].dispose(),(0,e.keep)(n[t])})))}}class Jr extends Kr{async onTrainBegin(e){this.epoch=[],this.history={}}async onEpochEnd(e,t){null==t&&(t={}),this.epoch.push(e);for(const e in t)null==this.history[e]&&(this.history[e]=[]),this.history[e].push(t[e])}async syncData(){const e=[],t=[],n=[];for(const s in this.history){const a=this.history[s];for(let r=0;r<a.length;++r)if("number"!=typeof a[r]){const i=a[r];e.push(i.data()),t.push(s),n.push(r)}}const s=await Promise.all(e);for(let e=0;e<s.length;++e)this.history[t[e]][n[e]].dispose(),this.history[t[e]][n[e]]=s[e][0]}}class Zr extends Kr{constructor(t,n){if(super(),this.currentEpoch=0,this.yieldEvery=n||"auto","auto"===this.yieldEvery&&(this.yieldEvery=125),"never"===this.yieldEvery&&null!=t.onYield)throw new Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");e.util.isNumber(this.yieldEvery)&&(this.maybeWait=function(t,n){let s,a=e.util.now();return(...r)=>{const i=e.util.now();return i-a<n||(a=i,s=t(...r)),s}}(this.maybeWait.bind(this),this.yieldEvery)),this.trainBegin=t.onTrainBegin,this.trainEnd=t.onTrainEnd,this.epochBegin=t.onEpochBegin,this.epochEnd=t.onEpochEnd,this.batchBegin=t.onBatchBegin,this.batchEnd=t.onBatchEnd,this.yield=t.onYield}async maybeWait(t,n,s){const a=[];null!=this.yield&&(await jr(s),a.push(this.yield(t,n,s))),a.push((0,e.nextFrame)()),await Promise.all(a)}async onEpochBegin(e,t){this.currentEpoch=e,null!=this.epochBegin&&(await jr(t),await this.epochBegin(e,t))}async onEpochEnd(t,n){const s=[];null!=this.epochEnd&&(await jr(n),s.push(this.epochEnd(t,n))),"epoch"===this.yieldEvery&&s.push((0,e.nextFrame)()),await Promise.all(s)}async onBatchBegin(e,t){null!=this.batchBegin&&(await jr(t),await this.batchBegin(e,t))}async onBatchEnd(t,n){const s=[];null!=this.batchEnd&&(await jr(n),s.push(this.batchEnd(t,n))),"batch"===this.yieldEvery?s.push((0,e.nextFrame)()):e.util.isNumber(this.yieldEvery)&&s.push(this.maybeWait(this.currentEpoch,t,n)),await Promise.all(s)}async onTrainBegin(e){null!=this.trainBegin&&(await jr(e),await this.trainBegin(e))}async onTrainEnd(e){null!=this.trainEnd&&(await jr(e),await this.trainEnd(e))}}function ei(e,t){return null==e&&(e={}),e instanceof Kr?[e]:Array.isArray(e)&&e[0]instanceof Kr?e:Qs(e).map((e=>new Zr(e,t)))}class ti{constructor(){}static registerCallbackConstructor(t,n){e.util.assert(t>=0&&Number.isInteger(t),(()=>`Verbosity level is expected to be an integer >= 0, but got ${t}`)),ti.checkForDuplicate(n),null==ti.constructors[t]&&(ti.constructors[t]=[]),ti.constructors[t].push(n)}static checkForDuplicate(e){for(const t in ti.constructors)ti.constructors[+t].forEach((t=>{if(t===e)throw new Gs("Duplicate callback constructor.")}))}static clear(){ti.constructors={}}static createCallbacks(e){const t=[];for(const n in ti.constructors){const s=+n;e>=s&&t.push(...ti.constructors[s])}return t.map((e=>new e))}}function ni(e,t,n,s,a,r,i,o,l){const u=new Jr,c=[new Qr,...ti.createCallbacks(t)];null!=e&&c.push(...e),c.push(u);const h=new Yr(c);return h.setParams({epochs:n,initialEpoch:s,samples:a,steps:r,batchSize:i,verbose:t,doValidation:o,metrics:l}),{callbackList:h,history:u}}function si(t,n={},s=!1){return sa(t,e.serialization.SerializationMap.getMap().classNameMap,n,"layer",s)}function ai(t,n){return(0,e.tidy)((()=>{"float32"!==t.dtype&&(t=t.asType("float32"));const s=e.sum(Za(t),n,!0),a=e.fill(s.shape,Vs()),r=e.sqrt(e.maximum(s,a));return e.div(t,r)}))}function ri(t,n){return(0,e.tidy)((()=>e.mean(Za(e.sub(n,t)),-1)))}function ii(t,n){return(0,e.tidy)((()=>e.mean(e.abs(e.sub(n,t)),-1)))}function oi(t,n){return(0,e.tidy)((()=>{const s=e.sub(t,n),a=e.clipByValue(e.abs(t),Vs(),Number.MAX_VALUE),r=e.abs(e.div(s,a));return e.mul(100,e.mean(r,-1))}))}function li(t,n,s=!1){return(0,e.tidy)((()=>{if(s)n=e.softmax(n);else{const t=e.sum(n,n.shape.length-1,!0);n=e.div(n,t)}return n=e.clipByValue(n,Vs(),1-Vs()),e.neg(e.sum(e.mul(t.toFloat(),e.log(n)),n.shape.length-1))}))}function ui(t,n,s=!1){return(0,e.tidy)((()=>{const a=e.floor(function(e){const t=[za(e.shape)];return e.reshape(t)}(t)).toInt(),r=(n=e.clipByValue(n,Vs(),1-Vs())).shape;return li(e.oneHot(a,r[r.length-1]).reshape(r),n,s)}))}function ci(t,n){return(0,e.tidy)((()=>{let s;return s=e.clipByValue(n,Vs(),1-Vs()),s=e.log(e.div(s,e.sub(1,s))),e.mean(function(t,n){if(!e.util.arraysEqual(t.shape,n.shape))throw new Gs(`logits and labels must have the same shape, but got shapes ${JSON.stringify(t.shape)} and ${JSON.stringify(n.shape)}`);return(0,e.tidy)((()=>{const e=n.relu(),s=n.abs().neg();return e.sub(n.mul(t)).add(s.exp().log1p())}))}(t,s),-1)}))}function hi(t,n){return(0,e.tidy)((()=>{const s=ai(t,-1),a=ai(n,-1),r=e.mul(s,a);return e.neg(e.sum(r,-1))}))}ti.constructors={};const pi={meanSquaredError:ri,meanAbsoluteError:ii,meanAbsolutePercentageError:oi,meanSquaredLogarithmicError:function(t,n){return(0,e.tidy)((()=>{const s=e.clipByValue(n,Vs(),Number.MAX_VALUE),a=e.log(e.add(1,s)),r=e.clipByValue(t,Vs(),Number.MAX_VALUE),i=e.log(e.add(1,r));return e.mean(Za(e.sub(a,i)),-1)}))},squaredHinge:function(t,n){return(0,e.tidy)((()=>{const s=e.maximum(0,e.sub(1,e.mul(t,n)));return e.mean(Za(s),-1)}))},hinge:function(t,n){return(0,e.tidy)((()=>{const s=e.maximum(0,e.sub(1,e.mul(t,n)));return e.mean(s,-1)}))},categoricalHinge:function(t,n){return(0,e.tidy)((()=>{const s=e.sum(e.mul(t,n),-1),a=e.max(e.mul(e.sub(1,t),n),-1);return e.maximum(0,e.add(1,e.sub(a,s)))}))},logcosh:function(t,n){return(0,e.tidy)((()=>{const s=Math.log(2),a=e.sub(n,t),r=e.sub(e.add(a,e.softplus(e.mul(-2,a))),s);return e.mean(r,-1)}))},categoricalCrossentropy:li,sparseCategoricalCrossentropy:ui,binaryCrossentropy:ci,kullbackLeiblerDivergence:function(t,n){return(0,e.tidy)((()=>{const s=e.clipByValue(t,Vs(),1),a=e.clipByValue(n,Vs(),1);return e.sum(e.mul(t,e.log(e.div(s,a))),-1)}))},poisson:function(t,n){return(0,e.tidy)((()=>{const s=e.log(e.add(Vs(),n));return e.mean(e.sub(n,e.mul(t,s)),-1)}))},cosineProximity:hi};function di(e){if("string"==typeof e){if(e in pi)return pi[e];let t=`Unknown loss ${e}`;throw e.toLowerCase().includes("softmaxcrossentropy")&&(t=`Unknown loss ${e}. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy`),new Gs(t)}return e}function fi(t,n){return(0,e.tidy)((()=>{const s=e.mul(.5,e.onesLike(n)),a=Wa(e.greater(n,s),t.dtype);return e.mean(e.equal(t,a),-1)}))}function mi(t,n){return(0,e.tidy)((()=>Wa(e.equal(e.argMax(t,-1),e.argMax(n,-1)),"float32")))}function gi(e,t){return ci(e,t)}function yi(t,n){return t.rank===n.rank&&(t=t.squeeze([t.rank-1])),(n=n.argMax(-1)).dtype!==t.dtype&&(n=n.asType(t.dtype)),e.equal(t,n).asType("float32")}const bi=li,xi=ui,vi={binaryAccuracy:fi,categoricalAccuracy:mi,precision:function(t,n){return(0,e.tidy)((()=>{const s=function(t,n){return(0,e.tidy)((()=>e.logicalAnd(t.equal(1),n.equal(1)).sum().cast("float32")))}(t,n),a=function(t,n){return(0,e.tidy)((()=>e.logicalAnd(t.equal(0),n.equal(1)).sum().cast("float32")))}(t,n),r=s.add(a);return e.where(e.greater(r,0),s.div(r),0).cast("float32")}))},categoricalCrossentropy:bi,sparseCategoricalCrossentropy:xi,mse:ri,MSE:ri,mae:ii,MAE:ii,mape:oi,MAPE:oi,cosine:hi};function ki(e){if("string"==typeof e&&e in vi)return vi[e];if("string"!=typeof e&&null!=e)return e;throw new Gs(`Unknown metric ${e}`)}function wi(e){if(qs(null!==e,`Unknown LossOrMetricFn ${e}`),"string"==typeof e)return e;{let t;for(const n of Object.keys(pi))if(pi[n]===e){t=n;break}if(void 0!==t)return t;for(const n of Object.keys(vi))if(vi[n]===e){t=n;break}return void 0!==t?t:e.name}}function Ni(e,t,n=!1){if(null==e||"object"!=typeof e||Object.getPrototypeOf(e)!==Object.prototype||!Ii(e))throw new Error("User-defined metadata is expected to be a JSON object, but is not.");if(n){const n=JSON.stringify(e);n.length>1048576&&console.warn(`User-defined metadata of model "${t}" is too large in size (length=${n.length} when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= 1048576.`)}}function Ii(e){if(null===e)return!0;if("object"==typeof e){if(Object.getPrototypeOf(e)===Object.prototype){const t=Object.keys(e);for(const n of t){if("string"!=typeof n)return!1;if(!Ii(e[n]))return!1}return!0}if(Array.isArray(e)){for(const t of e)if(!Ii(t))return!1;return!0}return!1}{const t=typeof e;return"string"===t||"number"===t||"boolean"===t}}function Si(e,t,n=console.log){let s="";for(let n=0;n<e.length;++n)n>0&&(s=s.slice(0,s.length-1)+" "),s+=e[n],s=s.slice(0,t[n]),s+=" ".repeat(t[n]-s.length);n(s)}function Ti(e,t,n){let s;try{s=JSON.stringify(e.outputShape)}catch(e){s="multiple"}Si([`${e.name} (${e.getClassName()})`,s,e.countParams().toString()],t,n)}function Ci(e,t,n,s){let a;try{a=JSON.stringify(e.outputShape)}catch(e){a="multiple"}const r=[];for(const t of e.inboundNodes)if(!(null!=n&&n.length>0&&-1===n.indexOf(t)))for(let e=0;e<t.inboundLayers.length;++e){const n=t.inboundLayers[e].name,s=t.nodeIndices[e],a=t.tensorIndices[e];r.push(`${n}[${s}][${a}]`)}const i=e.name,o=e.getClassName(),l=0===r.length?"":r[0];Si([`${i} (${o})`,a,e.countParams().toString(),l],t,s);for(let e=1;e<r.length;++e)Si(["","","",r[e]],t,s)}function $i(e,t,n){return("inboundNodes"===e||"outputLayers"===e||"inputLayers"===e)&&0===t&&"string"==typeof n}function Ai(e,t){if(null===e)return null;if("string"==typeof e)return Zs(e);if("number"==typeof e||"boolean"==typeof e)return e;if(e instanceof Array){const n=[],s=e.length;for(let a=0;a<s;++a){const s=e[a];$i(t,a,s)?n.push(s):n.push(Ai(s,t))}return n}{const t={};for(const n of Object.keys(e)){const s=e[n];if("name"===n&&"string"==typeof s)t[n]=s;else{const e=Zs(n);t[e]=Ai(s,e)}}return t}}function Ei(e,t){if(null==e)return null;if("string"==typeof e)return Js(e);if("number"==typeof e||"boolean"==typeof e)return e;if(e instanceof Array){const n=[],s=e.length;for(let a=0;a<s;++a){const s=e[a];$i(t,a,s)?n.push(s):n.push(Ei(s,t))}return n}{const t={};for(const n of Object.keys(e)){const s=e[n];t[Js(n)]="name"!==n&&"className"!==n||"string"!=typeof s?Ei(s,n):s}return t}}class _i{constructor(e){if(this.id2Value={},this.id2Mask={},this.name2Id={},e instanceof _i)for(const t in e.id2Value)this.id2Value[t]=e.id2Value[t],t in e.id2Mask&&(this.id2Mask[t]=e.id2Mask[t]);else{if(null==e)return;for(const t of e)this.add(t.key,t.value)}}add(t,n,s){if(null!=this.id2Value[t.id])throw new Gs(`Duplicate key: name=${t.name}, id=${t.id}`);return this.id2Value[t.id]=function(t,n){if(null==t.dtype||t.dtype===n.dtype)return n;try{return(0,e.cast)(n,t.dtype)}catch(e){throw new Gs(`The dtype of the feed (${n.dtype}) can not be cast to the dtype of the key '${t.name}' (${t.dtype}).`)}}(t,n),this.name2Id[t.name]=t.id,null!=s&&(this.id2Mask[t.id]=s),this}addFeed(e){this.add(e.key,e.value)}hasKey(e){return null!=this.id2Value[e.id]}names(){return Object.keys(this.name2Id)}getValue(e){if(e instanceof Br){if(null==this.id2Value[e.id])throw new Gs(`Nonexistent key: ${e.name}`);return this.id2Value[e.id]}{const t=this.name2Id[e];if(null==t)throw new Gs(`Feed dict has no SymbolicTensor name: ${e}`);return this.id2Value[t]}}getMask(e){if(e instanceof Br){if(null==this.id2Value[e.id])throw new Gs(`Nonexistent key: ${e.name}`);return this.id2Mask[e.id]}{const t=this.name2Id[e];if(null==t)throw new Gs(`Feed dict has no SymbolicTensor name: ${e}`);return this.id2Mask[t]}}disposeMasks(){null!=this.id2Mask&&(0,e.dispose)(this.id2Mask)}}const Ri={},Fi={};function Di(t,n,s,a){const r=null!=s&&s.training,i=Array.isArray(t),o=i?t:[t],l=o.map((e=>e.name)),u=[],c=n.names();for(const e of l)-1!==c.indexOf(e)?u.push(n.getValue(e)):u.push(null);null!=a&&(a.maxNumTensors=-1/0,a.minNumTensors=1/0);const h=l.join(",")+"|"+n.names().join(",");let p,d;if(null==Ri[h]){const t=function(t,n){e.util.assert(null!=t&&t.length>0,(()=>"Expected at least one fetch, got none"));let s=[],a={};if(1===t.length){const e=Mi(t[0],n);s=e.sorted,a=e.recipientMap}else{const e=new Set;for(const r of t){const{sorted:t,recipientMap:i}=Mi(r,n);for(const n of t)e.has(n.name)||(s.push(n),e.add(n.name));for(const e in i)null==a[e]&&(a[e]=new Set),i[e].forEach((t=>a[e].add(t)))}}return{sorted:s,recipientCounts:Oi(a)}}(o,n);p=t.sorted,d=t.recipientCounts,Ri[h]=p,Fi[h]=d}p=Ri[h],d={},r||Object.assign(d,Fi[h]);const f=new _i(n);for(let t=0;t<p.length;++t){if(null!=a){const t=(0,e.memory)().numTensors;t>a.maxNumTensors&&(a.maxNumTensors=t),t<a.minNumTensors&&(a.minNumTensors=t)}const i=p[t],o=i.sourceLayer;if(o instanceof Hr)continue;const c=[],h=[],m=[];let g=!1;for(const e of i.inputs){const t=f.getValue(e),s=f.getMask(e);c.push(t),h.push(s),null!=s&&(g=!0),r||(d[e.name]--,0!==d[e.name]||n.hasKey(e)||-1!==l.indexOf(e.name)||t.isDisposed||!0===e.sourceLayer.stateful||m.push(t))}g&&((s=s||{}).mask=h[0]);const y=Qs(o.apply(c,s));let b=null;o.supportsMasking&&(b=o.computeMask(c,h));const x=zi(i),v=Array.isArray(x)?x:[x];for(let e=0;e<v.length;++e){f.hasKey(v[e])||f.add(v[e],y[e],Array.isArray(b)?b[0]:b);const t=l.indexOf(v[e].name);-1!==t&&(u[t]=y[e])}r||(0,e.dispose)(m)}return f.disposeMasks(),i?u:u[0]}function Oi(e){const t={};for(const n in e)t[n]=e[n].size;return t}function Mi(e,t){const n=new Set,s=[],a={};for(const e of t.names())n.add(e);const r=[],i=[];for(r.push(e);r.length>0;){const e=r[r.length-1];if(n.has(e.name)){r.pop();continue}const t=i[i.length-1]===r.length-1;if(0===e.inputs.length||t)r.pop(),s.push(e),n.add(e.name),t&&i.pop();else{i.push(r.length-1);for(const t of e.inputs)null==a[t.name]&&(a[t.name]=new Set),a[t.name].add(e.name),n.has(t.name)||r.push(t)}}return{sorted:s,recipientMap:a}}function zi(e){let t;if(1===e.sourceLayer.inboundNodes.length)t=e.sourceLayer.output;else{let n=null;for(let t=0;t<e.sourceLayer.inboundNodes.length;++t)for(const s of e.sourceLayer.inboundNodes[t].outputTensors)if(s.id===e.id){n=t;break}t=e.sourceLayer.getOutputAt(n)}return t}class Li extends Ur{constructor(e){if(super({}),this.containerNodes=new Set,this.name=e.name,null==this.name){const e=this.getClassName().toLowerCase();this.name=Ar(e)}if(this.supportsMasking=!1,this.trainable_=!0,Array.isArray(e.inputs)?this.inputs=e.inputs.slice():this.inputs=[e.inputs],Array.isArray(e.outputs)?this.outputs=e.outputs.slice():this.outputs=[e.outputs],ra(this.inputs).length!==this.inputs.length)throw new Gs(`The list of inputs passed to the model is redundant. All inputs should only appear once. Found: ${this.inputs.map((e=>e.name))}`);ra(this.outputs).length!==this.outputs.length&&console.warn(`The list of outputs passed to the model is redundant. All outputs should only appear once. Found: ${this.outputs.map((e=>e.name))}`),this.inputLayers=[],this.inputLayersNodeIndices=[],this.inputLayersTensorIndices=[],this.outputLayers=[],this.outputLayersNodeIndices=[],this.outputLayersTensorIndices=[],this.layers=[],this.internalContainerRefs=[];for(const e of this.outputs){const t=e.sourceLayer,n=e.nodeIndex,s=e.tensorIndex;this.outputLayers.push(t),this.outputLayersNodeIndices.push(n),this.outputLayersTensorIndices.push(s)}for(const e of this.inputs){const t=e.sourceLayer,n=e.nodeIndex,s=e.tensorIndex;qs(0===n,"input layer has >1 nodes"),qs(0===s,"input layer has >1 tensors"),this.inputLayers.push(t),this.inputLayersNodeIndices.push(n),this.inputLayersTensorIndices.push(s)}this.inputNames=[],this.outputNames=[],this.feedInputShapes=[],this.feedInputNames=[],this.feedOutputNames=[];for(let t=0;t<this.inputLayers.length;t++){const n=this.inputLayers[t];if(!(n instanceof Hr))throw new TypeError(`Input layers to a LayersModel must be InputLayer objects. Received inputs: ${e.inputs}. Input ${t} (0-based) originates from layer type ${n.getClassName()}.`);this.inputNames.push(n.name),this.feedInputShapes.push(n.batchInputShape),this.feedInputNames.push(n.name)}for(const e of this.outputLayers)this.outputNames.push(e.name);this.internalInputShapes=this.inputs.map((e=>e.shape)),this.internalOutputShapes=this.outputs.map((e=>e.shape));const t={},n={},s={},a={},r={},i=[],o=(e,t,n,s,a,l)=>{null!=s&&null!=a&&null!=l||(s=e.sourceLayer,a=e.nodeIndex,l=e.tensorIndex);const u=s.inboundNodes[a];if(-1!==n.indexOf(u))throw new Us(`The tensor ${e.name} at layer "${s.name}" is part of a cycle.`);if(-1!==t.indexOf(u))return;this.containerNodes.add(Li.nodeKey(s,a)),s.id in r||(r[s.id]=Object.keys(r).length),-1===n.indexOf(u)&&n.push(u);const c=u.inboundLayers.length;for(let e=0;e<c;e++){const s=u.inputTensors[e],a=u.inboundLayers[e],r=u.nodeIndices[e],i=u.tensorIndices[e];o(s,t,n,a,r,i)}for(t.push(u);n.indexOf(u)>=0;)n.splice(n.indexOf(u),1);i.push(u)},l=[],u=[];for(const e of this.outputs)o(e,l,u);const c=i.slice().reverse();for(const e of c){n[e.id]=e,e.id in t||(t[e.id]=0);let r=t[e.id];const i=null==s[e.outboundLayer.id]?0:s[e.outboundLayer.id];r=Math.max(r,i),s[e.outboundLayer.id]=r,a[e.outboundLayer.id]=e.outboundLayer,t[e.id]=r;for(let s=0;s<e.inboundLayers.length;s++){const a=e.inboundLayers[s],i=e.nodeIndices[s],o=a.inboundNodes[i],l=null==t[o.id]?0:t[o.id];t[o.id]=Math.max(r+1,l),n[o.id]=o}}const h={};for(const e in t){const s=t[e];s in h||(h[s]=[]),h[s].push(n[e])}const p={};for(const e in s){const t=s[e];t in p||(p[t]=[]),p[t].push(a[e])}let d=Object.keys(p).map((e=>parseInt(e,10))).sort(aa);this.layers=[];for(const e of d){const t=p[e];t.sort(((e,t)=>{const n=r[e.id],s=r[t.id];return n<s?-1:n>s?1:0}));for(const e of t)e instanceof Li&&this.internalContainerRefs.push(e),this.layers.push(e)}this.layersByDepth=p,d=Object.keys(h).map((e=>parseInt(e,10))).sort(aa);const f=this.inputs.slice(),m=[];for(const e of d)for(const t of h[e]){const e=t.outboundLayer;if(null!=e){for(const n of t.inputTensors)if(-1===f.indexOf(n))throw new Us(`Graph disconnected: cannot obtain value for tensor ${n} at layer "${e.name}". The following previous layers were accessed without issue: ${m}`);for(const e of t.outputTensors)f.push(e);m.push(e.name)}}this.nodesByDepth=h;const g=this.layers.map((e=>e.name));for(const e of g){const t=g.filter((t=>t===e)).length;if(1!==t)throw new Us(`The name "${e}" is used ${t} times in the model. All layer names should be unique. Layer names: `+JSON.stringify(g))}this.outboundNodes=[],this.inboundNodes=[],new Vr({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:this.inputs.map((e=>null)),outputMasks:this.outputs.map((e=>null)),inputShapes:this.inputs.map((e=>e.shape)),outputShapes:this.outputs.map((e=>e.shape))}),this.built=!0,this._refCount=1}assertNotDisposed(){if(0===this._refCount)throw new Error(`Container '${this.name}' is already disposed.`)}dispose(){this.assertNotDisposed();const e={refCountAfterDispose:null,numDisposedVariables:0};if(0==--this._refCount){for(const t of this.layers)e.numDisposedVariables+=t.dispose().numDisposedVariables;for(const t of this.internalContainerRefs)e.numDisposedVariables+=t.dispose().numDisposedVariables}return e.refCountAfterDispose=this._refCount,e}get trainable(){return this.trainable_}set trainable(e){this.layers.forEach((t=>{t._trainableWeights.forEach((t=>t.trainable=e))})),this.trainable_=e}get trainableWeights(){if(this._trainableWeights.length>0)throw new Gs("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");if(!this.trainable)return[];let e=[];for(const t of this.layers)e=e.concat(t.trainableWeights);return e}get nonTrainableWeights(){const e=[];for(const t of this.layers)e.push(...t.nonTrainableWeights);if(!this.trainable){const t=[];for(const e of this.layers)t.push(...e.trainableWeights);return t.concat(e)}return e}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}loadWeights(e,t=!0){const n={};let s=0;for(const e of this.layers)for(const t of e.weights){if(null!=n[t.originalName])throw new Gs(`Duplicate weight name: ${t.originalName}`);n[t.originalName]=t,s++}const a=[];for(const s in e){let r=s;if(null==n[s]){const e=s.split("/");r=e.slice(0,-2).concat([e[e.length-1]]).join("/")}if(null!=n[r])a.push([n[r],e[s]]);else if(t)throw new Gs(`Provided weight data has no target variable: ${s}`);delete n[r]}if(t){const e=[];for(const t in n)e.push(t);if(e.length>0)throw new Gs(`${e.length} of ${s} weights are not set: ${e}`)}zr(a)}updatedConfig(){const e=this.getConfig(),t={};return t.className=this.getClassName(),t.config=e,t.kerasVersion="tfjs-layers 3.3.0",t.backend="TensorFlow.js",t}toJSON(e,t=!0){const n=Ei(this.updatedConfig());return t?JSON.stringify(n):n}call(t,n){return(0,e.tidy)((()=>{t=Qs(t);const e=new _i;for(let n=0;n<this.inputs.length;++n)e.add(this.inputs[n],t[n]);return Di(this.outputs,e,n)}))}computeMask(t,n){return(0,e.tidy)((()=>{let e;return t=Qs(t),e=null==n?Xs(null,t.length):Qs(n),this.runInternalGraph(t,e)[1]}))}computeOutputShape(e){const t=_r(e);if(t.length!==this.inputLayers.length)throw new Gs(`Invalid inputShape argument ${e}: model has ${this.inputLayers.length} tensor inputs.`);const n={};for(let e=0;e<t.length;e++){const s=this.inputLayers[e],a=t[e];n[s.name+"_0_0"]=a}const s=Object.keys(this.nodesByDepth).map((e=>parseInt(e,10))).sort(aa);if(s.length>1)for(const e of s){const t=this.nodesByDepth[e];for(const e of t){const t=e.outboundLayer;if(-1!==this.inputLayers.map((e=>e.id)).indexOf(t.id))continue;const s=[];for(let t=0;t<e.inboundLayers.length;t++){const a=e.inboundLayers[t],r=e.nodeIndices[t],i=e.tensorIndices[t],o=n[`${a.name}_${r}_${i}`];s.push(o)}const a=_r(t.computeOutputShape(Ys(s))),r=t.inboundNodes.indexOf(e);for(let e=0;e<a.length;e++)n[`${t.name}_${r}_${e}`]=a[e]}}const a=[],r=[];for(let e=0;e<this.outputLayers.length;e++){const t=this.outputLayers[e],n=this.outputLayersNodeIndices[e],s=this.outputLayersTensorIndices[e],a=`${t.name}_${n}_${s}`;r.push(a)}for(let e=0;e<r.length;e++){const t=r[e];qs(t in n),a.push(n[t])}return Ys(a)}runInternalGraph(e,t){null==t&&(t=Xs(null,e.length));const n={};for(let s=0;s<this.inputs.length;++s){const a=this.inputs[s],r=e[s],i=t[s];n[a.id]=[r,i]}const s=Object.keys(this.nodesByDepth).map((e=>parseInt(e,10))).sort(aa);for(const e of s){const t=this.nodesByDepth[e];for(const e of t){const t=e.outboundLayer,s=e.inputTensors,a=e.outputTensors,r=new Array;for(const e of s)e.id in n&&r.push(n[e.id]);if(r.length===s.length){let s,i,o,l,u={};if(null!=e.callArgs&&(u=e.callArgs),1===r.length){const[e,n]=r[0];null==u.mask&&(u.mask=n),o=Qs(t.call(e,u)),l=Qs(t.computeMask(e,n)),s=[e],i=[n]}else s=r.map((e=>e[0])),i=r.map((e=>e[1])),null==u.mask&&(u.mask=i),o=Qs(t.call(s,u)),l=Qs(t.computeMask(s,i));if(t.activityRegularizer)throw new Hs("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");for(let e=0;e<a.length;++e){const t=a[e],s=o[e],r=l[e];n[t.id]=[s,r]}}}}const a=[],r=[],i=[];for(const e of this.outputs){qs(e.id in n,`Could not compute output ${e.name} : ${e.id}`);const[t,s]=n[e.id];i.push(t.shape),a.push(t),r.push(s)}return[a,r,i]}buildNodeConversionMap(e){const t={};let n;for(const e of this.layers){n=e instanceof Li?1:0;for(let s=0;s<e.inboundNodes.length;s++){const a=Li.nodeKey(e,s);this.containerNodes.has(a)&&(t[a]=n,n+=1)}}return t}getLayer(e,t){if(null!=t){if(this.layers.length<=t)throw new Gs(`Was asked to retrieve layer at index ${t}, but model only has ${this.layers.length} layer(s).`);return this.layers[t]}if(null==e)throw new Gs("Provide either a layer name or layer index");for(const t of this.layers)if(t.name===e)return t;throw new Gs(`No such layer: ${e}`)}calculateLosses(){return(0,e.tidy)((()=>{const e=[];for(const t of this.layers)for(let n=0;n<t.inboundNodes.length;++n){const s=Li.nodeKey(t,n);this.containerNodes.has(s)&&e.push(...t.calculateLosses())}return e}))}getConfig(){const e={name:this.name},t=this.buildNodeConversionMap(this.layers),n=[];for(const e of this.layers){const s=e.getClassName(),a=e.getConfig(),r=[];for(let n=0;n<e.inboundNodes.length;n++){const s=e.inboundNodes[n],a=Li.nodeKey(e,n);let i={};if(this.containerNodes.has(a)){if(s.callArgs)try{JSON.stringify(s.callArgs),i=s.callArgs}catch(t){console.warn(`Layer ${e.name} was passed non-serializable keyword arguments: ${s.callArgs}. They will not be included in the serialized model (and thus will be missing at deserialization time).`),i={}}if(s.inboundLayers.length>0){const e=[];for(let n=0;n<s.inboundLayers.length;n++){const a=s.inboundLayers[n],r=s.nodeIndices[n],o=s.tensorIndices[n];let l=t[Li.nodeKey(a,r)];null==l&&(l=0),e.push([a.name,l,o,i])}r.push(e)}}}const i={};i.name=e.name,i.className=s,i.config=a,i.inboundNodes=r,n.push(i)}e.layers=n;const s=[];for(let e=0;e<this.inputLayers.length;e++){const n=this.inputLayers[e],a=this.inputLayersNodeIndices[e],r=Li.nodeKey(n,a);if(!this.containerNodes.has(r))continue;let i=t[r];null==i&&(i=0);const o=this.inputLayersTensorIndices[e];s.push([n.name,i,o])}e.inputLayers=s;const a=[];for(let e=0;e<this.outputLayers.length;e++){const n=this.outputLayers[e],s=this.outputLayersNodeIndices[e],r=Li.nodeKey(n,s);if(!this.containerNodes.has(r))continue;let i=t[r];null==i&&(i=0);const o=this.outputLayersTensorIndices[e];a.push([n.name,i,o])}return e.outputLayers=a,e}static fromConfig(e,t,n={},s=!1){const a={},r={};function i(e,t){e.name in r?r[e.name].push(t):r[e.name]=[t]}function o(e,t){const n=[];let s;for(const r of t){const o=r[0],l=r[1],u=r[2];if(s=null==r[3]?{}:r[3],!(o in a))return void i(e,t);const c=a[o];if(c.inboundNodes.length<=l)return void i(e,t);const h=c.inboundNodes[l];n.push(h.outputTensors[u])}n.length>0&&e.apply(Ys(n),s)}function l(e){const n=e.name,r=si(e,null!=t.customObjects?t.customObjects:{});r.setFastWeightInitDuringBuild(s),a[n]=r,e.inboundNodes.forEach((e=>{if(!(e instanceof Array))throw new Gs(`Corrupted configuration, expected array for nodeData: ${e}`);i(r,e)}))}const u=t.name,c=t.layers;for(const e of c)l(e);for(;!ia(r);)for(const e of c){const t=a[e.name];if(t.name in r){const e=r[t.name];delete r[t.name];for(const n of e)o(t,n)}}const h=[],p=[],d=t.inputLayers;for(const e of d){const t=e[0],n=e[1],s=e[2];qs(t in a);const r=a[t].inboundNodes[n].outputTensors;h.push(r[s])}const f=t.outputLayers;for(const e of f){const t=e[0],n=e[1],s=e[2];qs(t in a);const r=a[t].inboundNodes[n].outputTensors;p.push(r[s])}return new e({inputs:h,outputs:p,name:u})}get stateful(){if(this._stateful)throw new Gs("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");for(const e of this.layers)if(e.stateful)return!0;return!1}resetStates(){(0,e.tidy)((()=>{this.layers.forEach((e=>{e.stateful&&e.resetStates()}))}))}}function Bi(e,t){return function(e,t,n){const s=t.length;if(null==e||Array.isArray(e)&&0===e.length)return t.map((e=>null));if(1===s)return Array.isArray(e)&&1===e.length?e:"object"==typeof e&&t[0]in e?[e[t[0]]]:[e];if(Array.isArray(e)){if(e.length!==s)throw new Error(`Provided ${n} is an array of ${e.length} element(s), but the model has ${s} outputs. Make sure a set of weights is provided for each model output.`);return e}if("object"==typeof e&&Object.keys(e).length>0&&"object"==typeof e[Object.keys(e)[0]]){const n=[];return t.forEach((t=>{t in e?n.push(e[t]):n.push(null)})),n}throw new Error(`The model has multiple (${s}) outputs, so ${n} must be either an array with ${s} elements or an object with ${t} keys. Provided ${n} not understood: ${JSON.stringify(e)}`)}(e,t,"classWeight")}async function Pi(t,n,s,a){if(null!=n||null!=a)throw new Error("Support sampleWeight is not implemented yet");if(null!=s){const n=(0,e.tidy)((()=>{if(1===t.shape.length)return t.clone();if(2===t.shape.length){if(t.shape[1]>1){const e=1;return t.argMax(e)}if(1===t.shape[1])return t.reshape([t.shape[0]]);throw new Error(`Encountered unexpected last-dimension size (${t.shape[1]}) during handling of class weights. The size is expected to be >= 1.`)}throw new Error(`Unexpected rank of target (y) tensor (${t.rank}) during handling of class weights. The rank is expected to be 1 or 2.`)})),a=Array.from(await n.data());(0,e.dispose)(n);const r=[];return a.forEach((e=>{if(null==s[e])throw new Error(`classWeight must contain all classes in the training data. The class ${e} exists in the data but not in classWeight`);r.push(s[e])})),(0,e.tensor1d)(r,"float32")}return null}function Vi(t,n){return(0,e.mul)(t,n)}function Wi(t,n){let s,a;const r=n;s=r.xs,a=r.ys,e.util.assert(null!=s&&null!=a,(()=>`A Dataset iterator for fitDataset() is expected to generate objects of the form \`{xs: xVal, ys: yVal}\`, where the two values may be \`tf.Tensor\`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates ${n}`));const i=Ui("input",t.inputNames,s),o=Ui("output",t.outputNames,a),l=i[0].shape[0];e.util.assert(i.length===t.inputs.length,(()=>`LayersModel has ${t.inputs.length} inputs, but the dataset provides ${i.length} inputs.  (Expected input keys: ${JSON.stringify(t.inputNames)})`)),e.util.assert(o.length===t.outputs.length,(()=>`LayersModel has ${t.outputs.length} outputs, but the dataset provides ${o.length} outputs.  (Expected output keys: ${JSON.stringify(t.outputNames)})`));for(let n=0;n<i.length;n++)e.util.assert(i[n].shape[0]===l,(()=>`Batch size mismatch: input ${t.inputNames[n]} has ${i[n].shape[0]}; expected  ${l} based on input ${t.inputNames[0]}.`));for(let n=0;n<o.length;n++)e.util.assert(o[n].shape[0]===l,(()=>`Batch size mismatch: output ${t.outputNames[n]} has ${o[n].shape[0]}; expected  ${l} based on input ${t.inputNames[0]}.`));return{xs:i,ys:o}}function Ui(t,n,s){if(s instanceof e.Tensor)return[s];if(Array.isArray(s))return e.util.assert(s.length===n.length,(()=>`Received an array of ${s.length} Tensors, but expected ${n.length} to match the ${t} keys ${n}.`)),s;{const e=[];for(const a of n){if(null==s[a])throw new Gs(`The feature data generated by the dataset lacks the required ${t} key '${a}'.`);e.push(s[a])}return e}}function Gi(e){return"function"==typeof e.iterator}function Hi(t){e.util.assert(t>0&&Number.isInteger(t),(()=>`batchSize is required to be a positive integer, but got ${t}`))}function ji(e,t,n){return null==e?[null]:Array.isArray(e)?e.map((e=>Ga(e,t,n-t))):Ga(e,t,n-t)}function Xi(t,n){return e.tidy((()=>null==t?null:Array.isArray(t)?t.map((e=>Xi(e,n))):Ja(t,"int32"===n.dtype?n:n.toInt())))}function qi(e,t){const n=[];let s=0,a=null;for(;s<e;)a=s+t,a>=e&&(a=e),n.push([s,a]),s=a;return n}function Ki(t){const n=[];t instanceof e.Tensor&&(t=[t]);for(let e=0;e<t.length;++e){const s=t[e];if(1===s.rank)n.push(Ua(s,1));else{if(0===s.rank)throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");n.push(s)}}return n}function Yi(t,n){if(null==t)return;const s=[];if(n instanceof e.Tensor)s.push(n.id);else if(Array.isArray(n))n.forEach((e=>s.push(e.id)));else if(null!=n)for(const e in n){const t=n[e];s.push(t.id)}const a=[];if(t instanceof e.Tensor)-1===s.indexOf(t.id)&&a.push(t);else if(Array.isArray(t))t.forEach((e=>{-1===s.indexOf(e.id)&&a.push(e)}));else if(null!=t)for(const e in t){const n=t[e];-1===s.indexOf(n.id)&&a.push(n)}a.forEach((e=>{e.isDisposed||e.dispose()}))}function Qi(e){return Array.isArray(e)}function Ji(t){return!function(t){return t instanceof e.Tensor}(t)&&!Qi(t)}function Zi(e,t,n,s=!0,a=""){if(null==t||0===t.length){if(null!=e){let t=!1;if(Qi(e)&&e.length>0)t=!0;else if(Ji(e)){for(const n in e)if(e.hasOwnProperty(n)){t=!0;break}}else t=!0;if(t)throw new Gs(`Error when checking model ${a} expected no data, but got ${e}`)}return[]}if(null==e)return t.map((e=>null));let r;if(Ji(e)){e=e,r=[];for(const n of t){if(null==e[n])throw new Gs(`No data provided for "${n}". Need data for each key in: ${t}`);r.push(e[n])}}else if(Qi(e)){if((e=e).length!==t.length)throw new Gs(`Error when checking model ${a}: the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ${t.length} Tensor(s), but instead got the following list of Tensor(s): ${e}`);r=e}else{if(e=e,t.length>1)throw new Gs(`The model ${a} expects ${t.length} Tensor(s), but only received one Tensor. Found: Tensor with shape ${e.shape}`);r=[e]}if(r=Ki(r),null!=n)for(let e=0;e<t.length;++e){if(null==n[e])continue;const i=r[e];if(i.shape.length!==n[e].length)throw new Gs(`Error when checking ${a}: expected ${t[e]} to have ${n[e].length} dimension(s). but got array with shape ${i.shape}`);for(let r=0;r<n[e].length;++r){if(0===r&&!s)continue;const o=i.shape[r],l=n[e][r];if(null!=l&&l>=0&&o!==l)throw new Gs(`Error when checking ${a}: expected ${t[e]} to have shape [${n[e]}], but got array with shape [${i.shape}].`)}}return r}function eo(e,t,n,s=!0,a=""){let r;if(Array.isArray(e)){if(e.length!==t.length)throw new Gs(`Error when checking model ${a}: the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ${t.length} Tensor(s), but instead got ${e.length} Tensors(s).`);r=e}else{if(t.length>1)throw new Gs(`The model expects ${t.length} ${a} Tensors, but only received one Tensor. Found: array with shape ${JSON.stringify(e.shape)}.`);r=[e]}if(null!=n)for(let e=0;e<t.length;++e){if(null==n[e])continue;const i=r[e];if(i.shape.length!==n[e].length)throw new Gs(`Error when checking ${a}: expected ${t[e]} to have ${n[e].length} dimension(s), but got array with shape ${JSON.stringify(i.shape)}`);for(let r=0;r<n[e].length;++r){if(0===r&&!s)continue;const o=i.shape[r],l=n[e][r];if(null!=l&&l!==o)throw new Gs(`Error when checking ${a}: expected ${t[e]} to have shape ${JSON.stringify(n[e])} but got array with shape ${JSON.stringify(i.shape)}.`)}}}class to extends Li{constructor(e){super(e),this.isTraining=!1}summary(e,t,n=console.log){if(!this.built)throw new Gs("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");!function(e,t,n,s=console.log){const a=function(e){let t=!0;const n=[],s=[];for(const t in e.nodesByDepth)n.push(e.nodesByDepth[t]);for(const e of n){if(e.length>1||1===e.length&&e[0].inboundLayers.length>1){t=!1;break}s.push(...e)}if(t)for(const n of e.layers){let e=!1;for(const a of n.inboundNodes)if(-1!==s.indexOf(a)){if(e){t=!1;break}e=!0}if(!t)break}return t}(e),r=["Layer (type)","Output shape","Param #"];let i;if(a?(t=t||65,n=n||[.45,.85,1]):(t=t||98,n=n||[.33,.55,.67,1]),n[n.length-1]<=1&&(n=n.map((e=>Math.floor(t*e)))),!a){r.push("Receives inputs"),i=[];for(const t in e.nodesByDepth)i.push(...e.nodesByDepth[t])}s("_".repeat(t)),Si(r,n,s),s("=".repeat(t));const o=e.layers;for(let e=0;e<o.length;++e)a?Ti(o[e],n,s):Ci(o[e],n,i,s),s((e===o.length-1?"=":"_").repeat(t));e.checkTrainableWeightsConsistency();const l=function(e){let t;return t=null!=e.collectedTrainableWeights?Dr(e.collectedTrainableWeights):Dr(e.trainableWeights),t}(e),u=Dr(e.nonTrainableWeights);s(`Total params: ${l+u}`),s(`Trainable params: ${l}`),s(`Non-trainable params: ${u}`),s("_".repeat(t))}(this,e,t,n)}compile(t){if(null==t.loss&&(t.loss=[]),this.loss=t.loss,"string"==typeof t.optimizer)this.optimizer_=function(t){const n={Adagrad:()=>e.train.adagrad(.01),Adadelta:()=>e.train.adadelta(1,.95,Vs()),Adam:()=>e.train.adam(.001,.9,.999,Vs()),Adamax:()=>e.train.adamax(.002,.9,.999,Vs(),0),RMSProp:()=>e.train.rmsprop(.001,.9,0,Vs()),SGD:()=>e.train.sgd(.01)};if(n.adagrad=n.Adagrad,n.adadelta=n.Adadelta,n.adam=n.Adam,n.adamax=n.Adamax,n.rmsprop=n.RMSProp,n.sgd=n.SGD,t in n)return n[t]();throw new Gs(`Unknown Optimizer ${t}`)}(t.optimizer),this.isOptimizerOwned=!0;else{if(!(t.optimizer instanceof e.Optimizer))throw new Gs("User-defined optimizer must be an instance of tf.Optimizer.");this.optimizer_=t.optimizer,this.isOptimizerOwned=!1}let n=[];if(Array.isArray(t.loss)||"string"==typeof t.loss||"function"==typeof t.loss)if(Array.isArray(t.loss)){if(t.loss.length!==this.outputs.length)throw new Gs(`When passing an Array as loss, it should have one entry per model output. The model has ${this.outputs.length} output(s), but you passed loss=${t.loss}.`);const e=t.loss;n=e.map((e=>di(e)))}else{const e=di(t.loss);this.outputs.forEach((t=>{n.push(e)}))}else{t.loss=t.loss;for(const e in t.loss)if(-1===this.outputNames.indexOf(e))throw new Gs(`Unknown entry in loss dictionary: "${e}". Only expected the following keys: ${this.outputNames}`);for(const e of this.outputNames)null==t.loss[e]&&console.warn(`Output "${e}" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ${e} during training`),n.push(di(t.loss[e]))}this.lossFunctions=n,this.feedOutputNames=[],this.feedOutputShapes=[],this.feedLossFns=[];for(let e=0;e<this.outputs.length;++e){const t=this.internalOutputShapes[e],n=this.outputNames[e];this.feedOutputNames.push(n),this.feedOutputShapes.push(t),this.feedLossFns.push(this.lossFunctions[e])}const s=[];this.metrics=t.metrics,this.metricsNames=["loss"],this.metricsTensors=[],Ra("loss",(()=>{for(let e=0;e<this.outputs.length;++e){if(-1!==s.indexOf(e))continue;const t=this.lossFunctions[e];this.outputs.length>1&&(this.metricsTensors.push([t,e]),this.metricsNames.push(this.outputNames[e]+"_loss"))}}));const a=function(e,t){if(null==e||Array.isArray(e)&&0===e.length)return t.map((e=>[]));let n;if("string"==typeof e||"function"==typeof e)n=[e];else{if(!Array.isArray(e)&&"object"!=typeof e)throw new TypeError(`Type of metrics argument not understood. Expected an string,function, Array, or Object, found: ${e}`);n=e}if(Array.isArray(n))return t.map((e=>n));{const e=[];for(const s of t){let t=n.hasOwnProperty(s)?n[s]:[];Array.isArray(t)||(t=[t]),e.push(t)}return e}}(t.metrics,this.outputNames),r=(e,t,n)=>{this.outputNames.length>1&&(t=this.outputNames[e]+"_"+t),this.metricsNames.push(t),this.metricsTensors.push([n,e])};Ra("metric",(()=>{for(let e=0;e<this.outputs.length;++e)-1===s.indexOf(e)&&(t=>{let n,s,a;for(const i of t){if("string"==typeof i&&-1!==["accuracy","acc","crossentropy","ce"].indexOf(i)){const t=this.internalOutputShapes[e];let r;1===t[t.length-1]||this.lossFunctions[e]===ci?-1!==["accuracy","acc"].indexOf(i)?s=fi:-1!==["crossentropy","ce"].indexOf(i)&&(s=gi):this.lossFunctions[e]===ui?-1!==["accuracy","acc"].indexOf(i)?s=yi:-1!==["crossentropy","ce"].indexOf(i)&&(s=xi):-1!==["accuracy","acc"].indexOf(i)?s=mi:-1!==["crossentropy","ce"].indexOf(i)&&(s=bi),-1!==["accuracy","acc"].indexOf(i)?r="acc":-1!==["crossentropy","ce"].indexOf(i)&&(r="ce"),a=s,n=""+r}else{const e=ki(i);a=e,n=""+wi(i)}let t;Ra(n,(()=>{t=a})),r(e,n,t)}})(a[e])})),this.collectedTrainableWeights=this.trainableWeights}checkTrainableWeightsConsistency(){null!=this.collectedTrainableWeights&&this.trainableWeights.length!==this.collectedTrainableWeights.length&&console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?")}evaluate(e,t,n={}){const s=null==n.batchSize?32:n.batchSize;Hi(s);const a=this.standardizeUserDataXY(e,t,!0,s);try{const r=a[0].concat(a[1]);this.makeTestFunction();const i=this.testFunction;return Ys(this.testLoop(i,r,s,n.verbose,n.steps))}finally{Yi(a[0],e),Yi(a[1],t)}}async evaluateDataset(t,n){return this.makeTestFunction(),async function(t,n,s){const a=null!=(s=s||{}).batches,r=t.testFunction;let i=[];if(s.verbose>0)throw new Hs("Verbose mode is not implemented yet.");e.util.assert(!a||s.batches>0&&Number.isInteger(s.batches),(()=>`Test loop expects \`batches\` to be a positive integer, but received ${JSON.stringify(s.batches)}`));const o="function"==typeof n.next?n:await n.iterator();let l=0,u=0;for(;!a||u<s.batches;){const n=await o.next();if(i=e.tidy((()=>{if(n.value){const{xs:s,ys:a}=Wi(t,n.value),o=s.concat(a),c=e.tidy((()=>r(o)));if(e.dispose(o),0===u)for(let t=0;t<c.length;++t)i.push((0,e.scalar)(0));const h=o[0].shape[0];for(let t=0;t<c.length;++t){const n=c[t],s=i[t];i[t]=e.tidy((()=>e.add(i[t],e.mul(h,n)))),u>0&&e.dispose(s)}e.dispose(c),l+=h,++u}return i})),n.done){a&&console.warn(`Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least \`batches\` batches (in this case, ${s.batches} batches). You may need to use the repeat() function when building your dataset.`);break}}for(let t=0;t<i.length;++t){const n=i[t];i[t]=e.div(i[t],l),e.dispose(n)}return Ys(i)}(this,t,n)}checkNumSamples(e,t,n,s="steps"){let a;if(null!=n){if(a=null,null!=t)throw new Gs(`If ${s} is set, batchSize must be null or undefined.Got batchSize = ${t}`)}else{if(null==e)throw new Gs(`Either the input data should have a defined shape, or ${s} shoud be specified.`);a=Array.isArray(e)?e[0].shape[0]:e.shape[0]}return a}execute(t,n){if(Array.isArray(n)&&0===n.length)throw new Gs("`outputs` is an empty Array, which is not allowed.");const s=Array.isArray(n),a=s?n:[n],r=this.retrieveSymbolicTensors(a),i=new _i;if(t instanceof e.Tensor&&(t=[t]),Array.isArray(t)){if(t.length!==this.inputs.length)throw new Gs(`The number of inputs provided (${t.length}) does not match the number of inputs of this model (${this.inputs.length}).`);for(let e=0;e<this.inputs.length;++e)i.add(this.inputs[e],t[e])}else for(const e of this.inputs){const n=t[e.name];if(null==n)throw new Gs(`No value is provided for the model's input ${e.name}`);i.add(e,n)}const o=Di(r,i);return s?o:o[0]}retrieveSymbolicTensors(e){const t=Xs(null,e.length);let n=e.length;for(const s of this.layers){const a=Array.isArray(s.output)?s.output:[s.output],r=a.map((e=>e.name));for(let s=0;s<e.length;++s){const i=r.indexOf(e[s]);if(-1!==i&&(t[s]=a[i],n--),0===n)break}if(0===n)break}if(n>0){const n=[];throw t.forEach(((t,s)=>{null==t&&n.push(e[s])})),new Gs(`Cannot find SymbolicTensors for output name(s): ${JSON.stringify(n)}`)}return t}predictLoop(t,n=32,s=!1){return e.tidy((()=>{const a=this.checkNumSamples(t);if(s)throw new Hs("Verbose predictLoop() is not implemented yet.");const r=qi(a,n),i=this.outputs.map((e=>[]));for(let n=0;n<r.length;++n)e.tidy((()=>{const e=r[n][0],s=r[n][1],a=ji(t,e,s),i=[];if(Array.isArray(a))for(let e=0;e<a.length;++e)i.push({key:this.inputs[e],value:a[e]});else i.push({key:this.inputs[0],value:a});const o=new _i(i);return Di(this.outputs,o)})).forEach(((e,t)=>i[t].push(e)));return Ys(i.map((t=>e.concat(t,0))))}))}predict(e,t={}){const n=Ki(e);eo(n,this.inputNames,this.feedInputShapes,!1);try{const s=null==t.batchSize?32:t.batchSize;return Hi(s),this.predictLoop(n,s)}finally{Yi(n,e)}}predictOnBatch(e){eo(e,this.inputNames,this.feedInputShapes,!0);const t=(Array.isArray(e)?e[0]:e).shape[0];return this.predictLoop(e,t)}standardizeUserDataXY(t,n,s=!0,a){if(null==this.optimizer_)throw new Us("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).");const r=[];for(let e=0;e<this.feedOutputShapes.length;++e){const t=this.feedOutputShapes[e];this.feedLossFns[e]===ui?r.push(t.slice(0,t.length-1).concat([1])):r.push(t)}if(function(t,n,s){const a=ra(t.map((e=>e.shape[0])));a.sort();const r=ra(n.map((e=>e.shape[0])));if(r.sort(),a.length>1)throw new Gs(`All input Tensors (x) should have the same number of samples. Got array shapes: ${JSON.stringify(t.map((e=>e.shape)))}`);if(r.length>1)throw new Gs(`All target Tensors (y) should have the same number of samples. Got array shapes: ${JSON.stringify(n.map((e=>e.shape)))}`);if(a.length>0&&r.length>0&&!e.util.arraysEqual(a,r))throw new Gs(`Input Tensors should have the same number of samples as target Tensors. Found ${a[0]} input sample(s) and ${r[0]} target sample(s).`)}(t=Zi(t,this.feedInputNames,this.feedInputShapes,!1,"input"),n=Zi(n,this.feedOutputNames,r,!1,"target")),function(e,t,n){const s=[ri,ci,li];for(let a=0;a<e.length;++a){const r=e[a],i=t[a],o=n[a];if(null!=i){if(i===li&&1===r.shape[r.shape.length-1])throw new Gs(`You are passing a target array of shape ${r.shape} while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].`);if(-1!==s.indexOf(i)){const e=r.shape.slice(1),t=o.slice(1);for(let n=0;n<e.length;++n){const s=e[n],a=t[n];if(null!=a&&s!==a)throw new Gs(`A target Tensor with shape ${r.shape} was passed for an output of shape ${o}, while using a loss function that expects targets to have the same shape as the output.`)}}}}}(n,this.feedLossFns,this.feedOutputShapes),this.stateful&&null!=a&&a>0&&t[0].shape[0]%a!=0)throw new Gs(`In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ${a}. Found: ${t[0].shape[0]} sample(s).`);return[t,n]}async standardizeUserData(e,t,n,s,a=!0,r){const[i,o]=this.standardizeUserDataXY(e,t,a,r);if(null!=n)throw new Error("sample weight is not supported yet.");let l=null;if(null!=s){const e=Bi(s,this.outputNames);l=[];for(let t=0;t<e.length;++t)l.push(await Pi(o[t],null,e[t]))}return[i,o,l]}testLoop(t,n,s,a=0,r){return e.tidy((()=>{const i=this.checkNumSamples(n,s,r,"steps"),o=[];if(a>0)throw new Hs("Verbose mode is not implemented yet.");if(null!=r)throw new Hs("steps mode in testLoop() is not implemented yet");{const a=qi(i,s),r=(0,e.tensor1d)(Va(0,i));for(let s=0;s<a.length;++s){const i=a[s][0],l=a[s][1],u=Ga(r,i,l-i),c=Xi(n,u),h=t(c);if(0===s)for(let t=0;t<h.length;++t)o.push((0,e.scalar)(0));for(let t=0;t<h.length;++t){const n=h[t];o[t]=e.add(o[t],e.mul(l-i,n))}}for(let t=0;t<o.length;++t)o[t]=e.div(o[t],i)}return o}))}getDedupedMetricsNames(){const e=this.metricsNames,t=[];for(let n=0;n<e.length;++n){const s=e[n];let a=s;Ks(e,s)>1&&(a+=`_${Ks(e.slice(0,n),s)}`),t.push(a)}return t}makeTrainFunction(){return t=>{const n=[],s=t.slice(0,this.inputs.length),a=t.slice(this.inputs.length,this.inputs.length+this.outputs.length),r=t.slice(this.inputs.length+this.outputs.length,this.inputs.length+2*this.outputs.length),i=[],o=this.collectedTrainableWeights.map((e=>e.read()));return[this.optimizer_.minimize((()=>{const t=[];for(let e=0;e<this.inputs.length;++e)t.push({key:this.inputs[e],value:s[e]});const o=new _i(t),l=Di(this.outputs,o,{training:!0});let u;for(let t=0;t<this.lossFunctions.length;++t){let s=(0,this.lossFunctions[t])(a[t],l[t]);null!=r[t]&&(s=Vi(s,r[t]));const i=e.mean(s);n.push(i),u=0===t?s:e.add(u,s)}for(let t=0;t<this.metricsTensors.length;++t){let s;if(this.outputs.length>1&&t<this.outputs.length)s=n[t];else{const n=this.metricsTensors[t][0],r=this.metricsTensors[t][1];s=e.mean(n(a[r],l[r]))}e.keep(s),i.push(s)}return u=e.mean(u),this.calculateLosses().forEach((t=>{u=e.add(u,t)})),u}),!0,o)].concat(i)}}makeTestFunction(){this.testFunction=t=>e.tidy((()=>{const n=[];let s;const a=t.slice(0,this.inputs.length),r=t.slice(this.inputs.length,this.inputs.length+this.outputs.length),i=[];for(let e=0;e<this.inputs.length;++e)i.push({key:this.inputs[e],value:a[e]});const o=new _i(i),l=Di(this.outputs,o);for(let t=0;t<this.lossFunctions.length;++t){const a=this.lossFunctions[t],i=e.mean(a(r[t],l[t]));s=0===t?i:e.add(s,i),n.push(s)}for(let t=0;t<this.metricsTensors.length;++t){const s=this.metricsTensors[t][0],a=this.metricsTensors[t][1],i=e.mean(s(r[a],l[a]));n.push(i)}return n}))}async fit(t,n,s={}){return async function(t,n,s,a={}){if(t.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");let r,i,o,l,u,c,h;t.isTraining=!0;try{const p=null==a.batchSize?32:a.batchSize;Hi(p);const d=!1,f=await t.standardizeUserData(n,s,a.sampleWeight,a.classWeight,d,p);r=f[0],i=f[1],h=f[2];let m,g=!1;if(null!=a.validationData&&a.validationData.length>0){if(g=!0,2!==a.validationData.length)throw 3===a.validationData.length?new Hs("validationData including sample weights is not supported yet."):new Gs(`When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; ${a.validationData} is invalid.`);o=a.validationData[0],l=a.validationData[1];const e=!0,n=await t.standardizeUserData(o,l,null,null,e,p);u=n[0],c=n[1],m=u.concat(c)}else if(null!=a.validationSplit&&a.validationSplit>0&&a.validationSplit<1){g=!0;const e=Math.floor(r[0].shape[0]*(1-a.validationSplit)),t=r[0].shape[0];u=ji(r,e,t),r=ji(r,0,e),c=ji(i,e,t),i=ji(i,0,e),m=u.concat(c)}else null!=a.validationSteps&&(g=!0);const y=r.concat(i).concat(h);t.checkTrainableWeightsConsistency();const b=t.makeTrainFunction(),x=t.getDedupedMetricsNames();let v,k;g?(t.makeTestFunction(),v=t.testFunction,k=x.slice().concat(x.map((e=>"val_"+e)))):(v=null,m=[],k=x.slice());const w=ei(a.callbacks,a.yieldEvery);return await async function(t,n,s,a,r,i,o,l,u,c,h,p,d,f,m){null==r&&(r=32),null==i&&(i=1),null==h&&(h=!0),null==d&&(d=0);let g=!1;null!=u&&null!=c&&(g=!0);const y=t.checkNumSamples(s,r,f,"steps_per_epoch");let b;null!=y&&(b=Va(0,y)),null==o&&(o=1);const{callbackList:x,history:v}=ni(l,o,i,d,y,f,r,g,p);x.setModel(t),t.history=v,await x.onTrainBegin(),t.stopTraining_=!1;for(let o=d;o<i;++o){await x.onEpochBegin(o);const i={};{if("batch"===h)throw new Hs("batch shuffling is not implemneted yet");h&&e.util.shuffle(b);const o=(0,e.tensor1d)(b),l=qi(y,r);for(let h=0;h<l.length;++h){const p={};if(await x.onBatchBegin(h,p),e.tidy((()=>{const d=l[h][0],f=l[h][1],m=Ga(o,d,f-d);p.batch=h,p.size=f-d;const y=Xi(s,m),b=n(y);for(let t=0;t<a.length;++t){const n=a[t],s=b[t];p[n]=s,e.keep(s)}if(h===l.length-1&&g){const n=t.testLoop(u,c,r);for(let t=0;t<a.length;++t){const s=a[t],r=n[t];e.keep(r),i["val_"+s]=r}}})),await x.onBatchEnd(h,p),Xr(p),t.stopTraining_)break}o.dispose()}if(await x.onEpochEnd(o,i),t.stopTraining_)break}return await x.onTrainEnd(),await t.history.syncData(),t.history}(t,b,y,x,p,a.epochs,a.verbose,w,v,m,a.shuffle,k,a.initialEpoch,null)}finally{t.isTraining=!1,Yi(r,n),Yi(i,s),Yi(u,o),Yi(c,l),null!=h&&e.dispose(h)}}(this,t,n,s)}async fitDataset(t,n){return async function(t,n,s){const a=null!=s.batchesPerEpoch;if(e.util.assert(null!=t.optimizer,(()=>"You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig).")),e.util.assert(null!=s,(()=>"For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call.")),e.util.assert(null!=s.epochs&&s.epochs>0&&Number.isInteger(s.epochs),(()=>`For fitDataset(), config.epochs is expected to be a positive integer, but got ${s.epochs}`)),e.util.assert(!a||s.batchesPerEpoch>0&&Number.isInteger(s.batchesPerEpoch),(()=>`For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got ${s.batchesPerEpoch}`)),e.util.assert(null==s.validationSplit,(()=>"`validationSplit` is not supported by `fitDataset()`. Use validationData instead.")),t.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");t.isTraining=!0;try{const r=null!=s.validationData;let i,o;if(r)if(Gi(s.validationData))e.util.assert(null==s.validationBatches||s.validationBatches>0&&Number.isInteger(s.validationBatches),(()=>`For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got ${s.validationBatches}`));else{const e=function(e){if(3===e.length)throw new Hs("Validation with sample weights is not implemented yet.");return{xs:e[0],ys:e[1]}}(s.validationData);i=e.xs,o=e.ys}const l=t.makeTrainFunction(),u=t.getDedupedMetricsNames();let c;c=r?u.slice().concat(u.map((e=>"val_"+e))):u.slice();const h=ei(s.callbacks,s.yieldEvery),p=null==s.verbose?1:s.verbose,{callbackList:d,history:f}=ni(h,p,s.epochs,null,null,function(e,t){let n=null;return null!=t.batchesPerEpoch?n=t.batchesPerEpoch:Number.isFinite(e.size)&&(n=e.size),n}(n,s),null,r,c);d.setModel(t),t.history=f,await d.onTrainBegin(),t.stopTraining_=!1;let m=null==s.initialEpoch?0:s.initialEpoch,g=await n.iterator();for(;m<s.epochs;){const c={};await d.onEpochBegin(m);let h=0,p=0;for(a||(g=await n.iterator());!a||h<s.batchesPerEpoch;){const n=await g.next();if(a&&n.done){console.warn(`You provided \`batchesPerEpoch\` as ${s.batchesPerEpoch}, but your dataset iterator ran out of data after ${h} batches; interrupting training. Make sure that your dataset can generate at least \`batchesPerEpoch * epochs\` batches (in this case, `+s.batchesPerEpoch*s.epochs+" batches). You may need to use the repeat() function when building your dataset.");break}if(null!=n.value){const{xs:a,ys:r}=Wi(t,n.value),i={};i.batch=p,i.size=a[0].shape[0],await d.onBatchBegin(p,i);const o=[];if(null!=s.classWeight){const e=Bi(s.classWeight,t.outputNames);for(let t=0;t<e.length;++t)o.push(await Pi(r[t],null,e[t]))}const c=a.concat(r).concat(o),f=l(c);e.dispose(c);for(let t=0;t<u.length;++t){const n=u[t],s=f[t];i[n]=s,e.keep(s)}await d.onBatchEnd(p,i),Xr(i),p++,h++}if(a?h>=s.batchesPerEpoch:n.done){if(r){let e;e=Gi(s.validationData)?Qs(await t.evaluateDataset(s.validationData,{batches:s.validationBatches})):Qs(t.evaluate(i,o,{batchSize:null==s.validationBatchSize?32:s.validationBatchSize,verbose:0}));for(let n=0;n<t.metricsNames.length;++n)c[`val_${t.metricsNames[n]}`]=e[n]}break}if(t.stopTraining_)break}if(await d.onEpochEnd(m,c),m++,t.stopTraining_)break}return await d.onTrainEnd(),await t.history.syncData(),t.history}finally{t.isTraining=!1}}(this,t,n)}async trainOnBatch(t,n){const s=await this.standardizeUserData(t,n),a=s[0],r=s[1],i=this.makeTrainFunction()(a.concat(r)),o=[];for(const e of i){const t=await e.data();o.push(t[0])}return e.dispose(i),Ys(o)}getNamedWeights(e){const t=[],n=null!=e&&e.trainableOnly,s=n?this.trainableWeights:this.weights,a=this.getWeights(n);for(let e=0;e<s.length;++e)n&&!s[e].trainable||t.push({name:s[e].originalName,tensor:a[e]});return t}set stopTraining(e){this.stopTraining_=e}get stopTraining(){return this.stopTraining_}get optimizer(){return this.optimizer_}set optimizer(e){this.optimizer_!==e&&(this.optimizer_=e,this.isOptimizerOwned=!1)}dispose(){const t=super.dispose();if(0===t.refCountAfterDispose&&null!=this.optimizer&&this.isOptimizerOwned){const n=e.memory().numTensors;this.optimizer_.dispose(),t.numDisposedVariables+=n-e.memory().numTensors}return t}getLossIdentifiers(){let e;if("string"==typeof this.loss)e=Js(this.loss);else if(Array.isArray(this.loss)){for(const e of this.loss)if("string"!=typeof e)throw new Error("Serialization of non-string loss is not supported.");e=this.loss.map((e=>Js(e)))}else{const t=Object.keys(this.loss);e={};const n=this.loss;for(const s of t){if("string"!=typeof n[s])throw new Error("Serialization of non-string loss is not supported.");e[s]=Js(n[s])}}return e}getMetricIdentifiers(){if("string"==typeof this.metrics||"function"==typeof this.metrics)return[Js(wi(this.metrics))];if(Array.isArray(this.metrics))return this.metrics.map((e=>Js(wi(e))));{const e={};for(const t in this.metrics)e[t]=Js(wi(this.metrics[t]));return e}}getTrainingConfig(){return{loss:this.getLossIdentifiers(),metrics:this.getMetricIdentifiers(),optimizer_config:{class_name:this.optimizer.getClassName(),config:this.optimizer.getConfig()}}}loadTrainingConfig(e){if(null!=e.weighted_metrics)throw new Error("Loading weight_metrics is not supported yet.");if(null!=e.loss_weights)throw new Error("Loading loss_weights is not supported yet.");if(null!=e.sample_weight_mode)throw new Error("Loading sample_weight_mode is not supported yet.");const t=si(Ai(e.optimizer_config));let n,s;if("string"==typeof e.loss)n=Zs(e.loss);else if(Array.isArray(e.loss))n=e.loss.map((e=>Zs(e)));else if(null!=e.loss){n={};for(const t in e.loss)n[t]=Zs(e.loss[t])}if(Array.isArray(e.metrics))s=e.metrics.map((e=>Zs(e)));else if(null!=e.metrics){s={};for(const t in e.metrics)s[t]=Zs(e.metrics[t])}this.compile({loss:n,metrics:s,optimizer:t})}async save(t,n){if("string"==typeof t){const n=e.io.getSaveHandlers(t);if(0===n.length)throw new Gs(`Cannot find any save handlers for URL '${t}'`);if(n.length>1)throw new Gs(`Found more than one (${n.length}) save handlers for URL '${t}'`);t=n[0]}if(null==t.save)throw new Gs("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");const s=await e.io.encodeWeights(this.getNamedWeights(n)),a={modelTopology:this.toJSON(null,!1),format:"layers-model",generatedBy:"TensorFlow.js tfjs-layers v3.3.0",convertedBy:null};if(null!=n&&n.includeOptimizer&&null!=this.optimizer){a.trainingConfig=this.getTrainingConfig();const t="optimizer",{data:n,specs:r}=await e.io.encodeWeights(await this.optimizer.getWeights(),t);s.specs.push(...r),s.data=e.io.concatenateArrayBuffers([s.data,n])}if(null!=this.userDefinedMetadata){const e=!0;Ni(this.userDefinedMetadata,this.name,e),a.userDefinedMetadata=this.userDefinedMetadata}return a.weightData=s.data,a.weightSpecs=s.specs,t.save(a)}setUserDefinedMetadata(e){Ni(e,this.name),this.userDefinedMetadata=e}getUserDefinedMetadata(){return this.userDefinedMetadata}}to.className="Model",e.serialization.registerClass(to);class no extends to{}no.className="Functional",e.serialization.registerClass(no);class so extends to{constructor(e){if(super({inputs:[],outputs:[]}),e=e||{},this.trainable=!0,this.built=!1,this.name=null!=e.name?e.name:Ar("sequential_"),null!=e.layers)for(const t of e.layers)this.add(t)}checkShape(e){if(e.inboundNodes[0].outputTensors[0].shape.some((e=>e<0)))throw new Gs(`Negative dimension size caused by adding layer ${e.name} with input shape [${e.inboundNodes[0].inputTensors[0].shape}]`)}add(e){const t=e instanceof so||e instanceof to;let n;if(t){if(n=e,1!==n.outputs.length)throw new Gs("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");if(1!==n.inputs.length)throw new Gs("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.")}if(0===this.outputs.length){if(0===e.inboundNodes.length){if(null==e.batchInputShape)throw new Gs("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");const t=function(e){if(null==e.batchShape&&null==e.shape)throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");if(null!=e.batchShape&&null!=e.shape)throw new Gs("Please provide either a `shape` or `batchShape` argument to Input, but not both.");let t=e.batchShape;null!=e.shape&&null==t&&(t=[null].concat(e.shape));let n=e.dtype;return null==n&&(n="float32"),new Hr({batchInputShape:t,name:e.name,dtype:n,sparse:e.sparse}).inboundNodes[0].outputTensors[0]}({batchShape:e.batchInputShape,dtype:e.dtype,name:e.name+"_input"});e.apply(t)}if(t)this.outputs=n.outputs,this.inputs=n.inputs;else{if(1!==e.inboundNodes.length)throw new Gs(`A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${e.name} which has ${e.inboundNodes.length} pre-existing inbound connections.`);if(1!==e.inboundNodes[0].outputTensors.length)throw new Gs("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[e.inboundNodes[0].outputTensors[0]],this.inputs=Gr(this.outputs[0])}this.inboundNodes=[],new Vr({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:Xs(null,this.inputs.length),outputMasks:[null],inputShapes:this.inputs.map((e=>e.shape)),outputShapes:this.outputs[0].shape})}else{const t=e.apply(this.outputs[0]);if(Array.isArray(t))throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[t],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}this.layers.push(e),this.built=!1}pop(){if(0===this.layers.length)throw new TypeError("There are no layers in the model.");if(this.layers.pop(),0===this.layers.length)this.outputs=[],this.inboundNodes=[],this.outboundNodes=[];else{const e=this.layers.length-1;this.layers[e].outboundNodes=[],this.outputs=[this.layers[e].output],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}}call(e,t){return null==this.model&&this.build(),this.model.call(e,t)}build(e){if(Fr(e),0===this.inputs.length||0===this.outputs.length)throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");this.model=new to({inputs:this.inputs,outputs:this.outputs[0],name:this.name+"_model"}),this.model.trainable=this.trainable,this.supportsMasking=this.model.supportsMasking,this.inputLayers=this.model.inputLayers,this.inputLayersNodeIndices=this.model.inputLayersNodeIndices,this.inputLayersTensorIndices=this.model.inputLayersTensorIndices,this.outputLayers=this.model.outputLayers,this.outputLayersNodeIndices=this.model.outputLayersNodeIndices,this.outputLayersTensorIndices=this.model.outputLayersTensorIndices,this.nodesByDepth=this.model.nodesByDepth,this.containerNodes=this.model.containerNodes,this.outputNames=this.model.outputNames,this.inputNames=this.model.inputNames,this.built=!0}countParams(){return this.built||this.build(),super.countParams()}summary(e,t,n=console.log){this.built||this.build(),super.summary(e,t,n)}setWeights(e){null==this.model&&this.build(),this.model.setWeights(e)}evaluate(e,t,n={}){if(!this.built)throw new Us("The model needs to be compiled before being used.");return this.model.evaluate(e,t,n)}async evaluateDataset(e,t){if(!this.built)throw new Us("The model needs to be compiled before being used.");return this.model.evaluateDataset(e,t)}predict(e,t={}){return null==this.model&&this.build(),this.model.predict(e,t)}predictOnBatch(e){return null==this.model&&this.build(),this.model.predictOnBatch(e)}compile(e){this.build(),this.model.compile(e),this.optimizer_=this.model.optimizer,this.isOptimizerOwned=this.model.isOptimizerOwned,this.loss=this.model.loss,this.metrics=this.model.metrics,this.metricsTensors=this.model.metricsTensors,this.metricsNames=this.model.metricsNames}get optimizer(){return null==this.model?void 0:this.model.optimizer}set optimizer(e){this.model.optimizer=e}async fit(e,t,n={}){if(!this.built)throw new Us("The model needs to be compiled before being used.");return this.model.fit(e,t,n)}async fitDataset(e,t){if(!this.built)throw new Us("The model needs to be compiled before being used.");return this.model.fitDataset(e,t)}async trainOnBatch(e,t){return this.model.trainOnBatch(e,t)}static fromConfig(t,n,s={},a=!1){let r,i={};if(n instanceof Array){if(null==n[0].className||"Merge"===n[0].className)throw new Gs("Legacy serialization format not supported yet.");r=n}else e.util.assert(null!=n.layers,(()=>"When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field.")),r=n.layers,delete n.layers,i=n;const o=new t(i);if(!(o instanceof so))throw new Hs(`Sequential.fromConfig called on non-Sequential input: ${o}`);for(const e of r){const t=si(e,void 0,a);a&&t.setFastWeightInitDuringBuild(!0),o.add(t)}return o}set stopTraining(e){if(null==this.model)throw new Gs("Cannot set the stopTraining property of a sequential model before it is compiled.");this.model.stopTraining=e}get stopTraining(){if(null==this.model)throw new Gs("Cannot get the stopTraining property of a sequential model before it is compiled.");return this.model.stopTraining}getConfig(){const e=[];for(const t of this.layers){const n={};n.className=t.getClassName(),n.config=t.getConfig(),e.push(n)}return{name:this.name,layers:e}}}so.className="Sequential",e.serialization.registerClass(so);class ao extends e.serialization.Serializable{getConfig(){return{}}}class ro extends ao{apply(t,n=1){return function(t,n=1){if(1!==n)throw new Hs(`Support for alpha values other than 1 (${n}) is not implemented yet.`);return e.elu(t)}(t,n)}}ro.className="elu",e.serialization.registerClass(ro);class io extends ao{apply(t){return e.selu(t)}}io.className="selu",e.serialization.registerClass(io);class oo extends ao{apply(t){return e.relu(t)}}oo.className="relu",e.serialization.registerClass(oo);class lo extends ao{apply(t){return(0,e.tidy)((()=>e.minimum(6,e.relu(t))))}}lo.className="relu6",e.serialization.registerClass(lo);class uo extends ao{apply(e){return e}}uo.className="linear",e.serialization.registerClass(uo);class co extends ao{apply(t){return e.sigmoid(t)}}co.className="sigmoid",e.serialization.registerClass(co);class ho extends ao{apply(t){return function(t){return(0,e.tidy)((()=>{const n=e.add(.5,e.mul(.2,t));return e.clipByValue(n,0,1)}))}(t)}}ho.className="hardSigmoid",e.serialization.registerClass(ho);class po extends ao{apply(t){return e.softplus(t)}}po.className="softplus",e.serialization.registerClass(po);class fo extends ao{apply(t){return function(t){return(0,e.tidy)((()=>e.div(t,e.abs(t).add(1))))}(t)}}fo.className="softsign",e.serialization.registerClass(fo);class mo extends ao{apply(t){return e.tanh(t)}}mo.className="tanh",e.serialization.registerClass(mo);class go extends ao{apply(t,n=-1){return e.softmax(t,n)}}go.className="softmax",e.serialization.registerClass(go);class yo extends ao{apply(t,n=-1){return e.logSoftmax(t,n)}}yo.className="logSoftmax",e.serialization.registerClass(yo);class bo extends ao{apply(t,n=1){return(0,e.tidy)((()=>e.sigmoid(t.mul(n)).mul(t)))}}function xo(e){return e.getClassName()}function vo(t,n={}){return sa(t,e.serialization.SerializationMap.getMap().classNameMap,n,"activation")}function ko(e){if(null==e){return vo({className:"linear",config:{}})}if("string"==typeof e){const t={};return t.className=e,t.config={},vo(t)}return e instanceof ao?e:vo(e)}bo.className="swish",e.serialization.registerClass(bo);class wo extends e.serialization.Serializable{}class No extends wo{constructor(e){super(),function(e){if(null!=e&&"object"!=typeof e)throw new Error(`Argument to L1L2 regularizer's constructor is expected to be an object, but received: ${e}`)}(e),this.l1=null==e||null==e.l1?.01:e.l1,this.l2=null==e||null==e.l2?.01:e.l2,this.hasL1=0!==this.l1,this.hasL2=0!==this.l2}apply(t){return(0,e.tidy)((()=>{let n=(0,e.zeros)([1]);return this.hasL1&&(n=(0,e.add)(n,(0,e.sum)(e.mul(this.l1,(0,e.abs)(t))))),this.hasL2&&(n=(0,e.add)(n,(0,e.sum)(e.mul(this.l2,Za(t))))),n.asScalar()}))}getConfig(){return{l1:this.l1,l2:this.l2}}static fromConfig(e,t){return new e({l1:t.l1,l2:t.l2})}}No.className="L1L2",e.serialization.registerClass(No);const Io={l1l2:"L1L2"};function So(e){return ta(e)}function To(t,n={}){return sa(t,e.serialization.SerializationMap.getMap().classNameMap,n,"regularizer")}function Co(e){return null==e?null:"string"==typeof e?To({className:e in Io?Io[e]:e,config:{}}):e instanceof wo?e:To(e)}class $o extends Ur{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,null!=e&&(this.maxValue=e.maxValue)}call(t,n){t=Rr(t);let s=(0,e.relu)(t);return null!=this.maxValue&&(s=(0,e.clipByValue)(s,0,this.maxValue)),s}computeOutputShape(e){return e}getConfig(){const e={maxValue:this.maxValue},t=super.getConfig();return Object.assign(e,t),e}}$o.className="ReLU",e.serialization.registerClass($o);class Ao extends Ur{constructor(e){super(null==e?{}:e),this.DEFAULT_ALPHA=.3,null==e&&(e={}),this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(t,n){const s=Rr(t);return(0,e.leakyRelu)(s,this.alpha)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},t=super.getConfig();return Object.assign(e,t),e}}Ao.className="LeakyReLU",e.serialization.registerClass(Ao);class Eo extends Ur{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA_INITIALIZER="zeros",null==e&&(e={}),this.supportsMasking=!0,this.alphaInitializer=Sr(e.alphaInitializer||this.DEFAULT_ALPHA_INITIALIZER),this.alphaRegularizer=Co(e.alphaRegularizer),this.alphaConstraint=ka(e.alphaConstraint),null==e.sharedAxes)this.sharedAxes=null;else if(Array.isArray(e.sharedAxes))this.sharedAxes=e.sharedAxes;else{if("number"!=typeof e.sharedAxes)throw new Gs(`Expected sharedAxes to be a number or an array of numbers, but got ${e.sharedAxes}`);this.sharedAxes=[e.sharedAxes]}}build(e){const t=(e=Fr(e)).slice(1);if(null!=this.sharedAxes)for(const e of this.sharedAxes)t[e-1]=1;this.alpha=this.addWeight("alpha",t,"float32",this.alphaInitializer,this.alphaRegularizer,!0,this.alphaConstraint);const n={};if(null!=this.sharedAxes)for(let t=1;t<e.length;++t)n[t]=e[t];this.inputSpec=[new Lr({ndim:e.length,axes:n})],this.built=!0}call(t,n){return t=Rr(t),(0,e.prelu)(t,this.alpha.read())}getConfig(){const e={alphaInitializer:Ir(this.alphaInitializer),alphaRegularizer:So(this.alphaRegularizer),alphaConstraint:xa(this.alphaConstraint),sharedAxes:this.sharedAxes},t=super.getConfig();return Object.assign(e,t),e}}Eo.className="PReLU",e.serialization.registerClass(Eo);class _o extends Ur{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA=1,null==e&&(e={}),null!=e.alpha&&e.alpha!==this.DEFAULT_ALPHA)throw new Hs(`Non-default alpha value (${e.alpha}) is not supported by the ELU layer yet.`);this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(t,n){const s=Rr(t);return(0,e.elu)(s)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},t=super.getConfig();return Object.assign(e,t),e}}_o.className="ELU",e.serialization.registerClass(_o);class Ro extends Ur{constructor(e){super(null==e?{}:e),this.DEFAULT_THETA=1,null==e&&(e={}),this.theta=null==e.theta?this.DEFAULT_THETA:e.theta}call(e,t){const n=Rr(e);return n.mul(Wa(n.greater(this.theta),"float32"))}computeOutputShape(e){return e}getConfig(){const e={theta:this.theta},t=super.getConfig();return Object.assign(e,t),e}}Ro.className="ThresholdedReLU",e.serialization.registerClass(Ro);class Fo extends Ur{constructor(e){super(null==e?{}:e),this.DEFAULT_AXIS=1,null==e&&(e={}),this.softmax=(new go).apply,this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis}call(e,t){const n=Rr(e);return this.softmax(n,this.axis)}computeOutputShape(e){return e}getConfig(){const e={axis:this.axis},t=super.getConfig();return Object.assign(e,t),e}}function Do(e,t,n){if("number"==typeof e)return Xs(e,t);if(e.length!==t)throw new Gs(`The ${n} argument must be an integer or tuple of ${t} integers. Received: ${e.length} elements.`);for(let a=0;a<t;++a){const r=e[a];if((s=r)!==parseInt(s.toString(),10))throw new Gs(`The ${n} argument must be an integer or tuple of ${t} integers. Received: ${JSON.stringify(e)} including a non-integer number ${r}`)}return e;var s}function Oo(e,t,n,s,a=1){if(null==e)return e;let r;return r="same"===n?e:e-(t+(t-1)*(a-1))+1,Math.floor((r+s-1)/s)}function Mo(e,t,n,s){if(null==e)return null;if("valid"===s)e=e*t+Pa([n-t,0]);else{if("same"!==s)throw new Gs(`Unsupport padding mode: ${s}.`);e*=t}return e}function zo(t,n){return(0,e.tidy)((()=>($a(n),"channelsFirst"===n?e.transpose(t,[0,2,3,1]):t)))}function Lo(t,n){return(0,e.tidy)((()=>($a(n),"channelsFirst"===n?e.transpose(t,[0,2,3,4,1]):t)))}function Bo(t,n,s,a=[1,1],r="valid",i,o,l=null){return(0,e.tidy)((()=>{if(null==i&&(i="channelsLast"),$a(i),3!==t.rank&&4!==t.rank)throw new Gs(`conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ${t.rank}.`);if(3!==n.rank&&4!==n.rank)throw new Gs(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ${t.rank}.`);let u=zo(t,i);if("causal"===r)throw new Hs("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");return u=e.fused.conv2d({x:u,filter:n,strides:a,pad:"same"===r?"same":"valid",dilations:o,dataFormat:"NHWC",bias:s,activation:l}),"channelsFirst"===i&&(u=e.transpose(u,[0,3,1,2])),u}))}Fo.className="Softmax",e.serialization.registerClass(Fo);class Po extends Ur{constructor(e,t){if(super(t),this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",Po.verifyArgs(t),this.rank=e,ua(this.rank,"rank"),1!==this.rank&&2!==this.rank&&3!==this.rank)throw new Hs(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is not implemented yet.`);if(this.kernelSize=Do(t.kernelSize,e,"kernelSize"),this.strides=Do(null==t.strides?1:t.strides,e,"strides"),this.padding=null==t.padding?"valid":t.padding,Aa(this.padding),this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,$a(this.dataFormat),this.activation=ko(t.activation),this.useBias=null==t.useBias||t.useBias,this.biasInitializer=Sr(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.biasConstraint=ka(t.biasConstraint),this.biasRegularizer=Co(t.biasRegularizer),this.activityRegularizer=Co(t.activityRegularizer),this.dilationRate=Do(null==t.dilationRate?1:t.dilationRate,e,"dilationRate"),1===this.rank&&Array.isArray(this.dilationRate)&&1!==this.dilationRate.length)throw new Gs(`dilationRate must be a number or an array of a single number for 1D convolution, but received ${JSON.stringify(this.dilationRate)}`);if(2===this.rank){if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate];else if(2!==this.dilationRate.length)throw new Gs(`dilationRate must be a number or array of two numbers for 2D convolution, but received ${JSON.stringify(this.dilationRate)}`)}else if(3===this.rank)if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate,this.dilationRate];else if(3!==this.dilationRate.length)throw new Gs(`dilationRate must be a number or array of three numbers for 3D convolution, but received ${JSON.stringify(this.dilationRate)}`)}static verifyArgs(e){if(qs("kernelSize"in e,"required key 'kernelSize' not in config"),"number"!=typeof e.kernelSize&&!la(e.kernelSize,"number",1,3))throw new Gs(`BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ${JSON.stringify(e.kernelSize)}.`)}getConfig(){const e={kernelSize:this.kernelSize,strides:this.strides,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,activation:xo(this.activation),useBias:this.useBias,biasInitializer:Ir(this.biasInitializer),biasRegularizer:So(this.biasRegularizer),activityRegularizer:So(this.activityRegularizer),biasConstraint:xa(this.biasConstraint)},t=super.getConfig();return Object.assign(e,t),e}}class Vo extends Po{constructor(e,t){super(e,t),this.kernel=null,Vo.verifyArgs(t),this.filters=t.filters,ua(this.filters,"filters"),this.kernelInitializer=Sr(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.kernelConstraint=ka(t.kernelConstraint),this.kernelRegularizer=Co(t.kernelRegularizer)}build(e){e=Fr(e);const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new Gs(`The channel dimension of the input should be defined. Found ${e[t]}`);const n=e[t],s=this.kernelSize.concat([n,this.filters]);this.kernel=this.addWeight("kernel",s,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[{ndim:this.rank+2,axes:{[t]:n}}],this.built=!0}call(t,n){return(0,e.tidy)((()=>{let n;t=Rr(t);const s=null==this.bias?null:this.bias.read(),a=ha(this.activation.getClassName());if(null!=a&&2===this.rank)n=Bo(t,this.kernel.read(),s,this.strides,this.padding,this.dataFormat,this.dilationRate,a);else{if(1===this.rank)n=function(t,n,s,a=1,r="valid",i,o=1){return(0,e.tidy)((()=>{if(null==i&&(i="channelsLast"),$a(i),3!==t.shape.length)throw new Gs(`The input of a conv1dWithBias operation should be 3, but is ${t.shape.length} instead.`);if(3!==n.shape.length)throw new Gs(`The kernel for a conv1dWithBias operation should be 3, but is ${n.shape.length} instead`);if(null!=s&&1!==s.shape.length)throw new Gs(`The bias for a conv1dWithBias operation should be 1, but is ${n.shape.length} instead`);if("channelsFirst"===i&&(t=e.transpose(t,[0,2,1])),"causal"===r)throw new Hs("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");let l=e.conv1d(t,n,a,"same"===r?"same":"valid","NWC",o);return null!=s&&(l=tr(l,s)),l}))}(t,this.kernel.read(),s,this.strides[0],this.padding,this.dataFormat,this.dilationRate[0]);else if(2===this.rank)n=Bo(t,this.kernel.read(),s,this.strides,this.padding,this.dataFormat,this.dilationRate);else{if(3!==this.rank)throw new Hs("convolutions greater than 3D are not implemented yet.");n=function(t,n,s,a=[1,1,1],r="valid",i,o){return(0,e.tidy)((()=>{if(null==i&&(i="channelsLast"),$a(i),4!==t.rank&&5!==t.rank)throw new Gs(`conv3dWithBias expects input to be of rank 4 or 5, but received ${t.rank}.`);if(4!==n.rank&&5!==n.rank)throw new Gs(`conv3dWithBias expects kernel to be of rank 4 or 5, but received ${t.rank}.`);let l=Lo(t,i);if("causal"===r)throw new Hs("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.");return l=e.conv3d(l,n,a,"same"===r?"same":"valid","NDHWC",o),null!=s&&(l=tr(l,s)),"channelsFirst"===i&&(l=e.transpose(l,[0,4,1,2,3])),l}))}(t,this.kernel.read(),s,this.strides,this.padding,this.dataFormat,this.dilationRate)}null!=this.activation&&(n=this.activation.apply(n))}return n}))}computeOutputShape(e){e=Fr(e);const t=[],n="channelsLast"===this.dataFormat?e.slice(1,e.length-1):e.slice(2);for(let e=0;e<n.length;++e){const s=Oo(n[e],this.kernelSize[e],this.padding,this.strides[e],"number"==typeof this.dilationRate?this.dilationRate:this.dilationRate[e]);t.push(s)}let s=[e[0]];return"channelsLast"===this.dataFormat?(s=s.concat(t),s.push(this.filters)):(s.push(this.filters),s=s.concat(t)),s}getConfig(){const e={filters:this.filters,kernelInitializer:Ir(this.kernelInitializer),kernelRegularizer:So(this.kernelRegularizer),kernelConstraint:xa(this.kernelConstraint)},t=super.getConfig();return Object.assign(e,t),e}static verifyArgs(e){if(!("filters"in e)||"number"!=typeof e.filters||e.filters<1)throw new Gs(`Convolution layer expected config.filters to be a 'number' > 0 but got ${JSON.stringify(e.filters)}`)}}class Wo extends Vo{constructor(e){super(2,e),Wo.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!la(e.kernelSize,"number",1,2))throw new Gs(`Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ${JSON.stringify(e.kernelSize)}.`)}}Wo.className="Conv2D",e.serialization.registerClass(Wo);class Uo extends Vo{constructor(e){super(3,e),Uo.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&(!Array.isArray(e.kernelSize)||1!==e.kernelSize.length&&3!==e.kernelSize.length))throw new Gs(`Conv3D expects config.kernelSize to be number or [number, number, number], but received ${JSON.stringify(e.kernelSize)}.`)}}Uo.className="Conv3D",e.serialization.registerClass(Uo);class Go extends Wo{constructor(e){if(super(e),this.inputSpec=[new Lr({ndim:4})],"same"!==this.padding&&"valid"!==this.padding)throw new Gs(`Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if(4!==(e=Fr(e)).length)throw new Gs("Input should have rank 4; Received input shape: "+JSON.stringify(e));const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new Gs("The channel dimension of the inputs should be defined. Found `None`.");const n=e[t],s=this.kernelSize.concat([this.filters,n]);this.kernel=this.addWeight("kernel",s,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new Lr({ndim:4,axes:{[t]:n}})],this.built=!0}call(t,n){return e.tidy((()=>{let n=Rr(t);if(4!==n.shape.length)throw new Gs(`Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${n.shape.length}`);const s=n.shape,a=s[0];let r,i;"channelsFirst"===this.dataFormat?(r=2,i=3):(r=1,i=2);const o=s[r],l=s[i],u=this.kernelSize[0],c=this.kernelSize[1],h=this.strides[0],p=this.strides[1],d=[a,Mo(o,h,u,this.padding),Mo(l,p,c,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(n=e.transpose(n,[0,2,3,1]));let f=e.conv2dTranspose(n,this.kernel.read(),d,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(f=e.transpose(f,[0,3,1,2])),null!=this.bias&&(f=tr(f,this.bias.read(),this.dataFormat)),null!=this.activation&&(f=this.activation.apply(f)),f}))}computeOutputShape(e){const t=(e=Fr(e)).slice();let n,s,a;"channelsFirst"===this.dataFormat?(n=1,s=2,a=3):(n=3,s=1,a=2);const r=this.kernelSize[0],i=this.kernelSize[1],o=this.strides[0],l=this.strides[1];return t[n]=this.filters,t[s]=Mo(t[s],o,r,this.padding),t[a]=Mo(t[a],l,i,this.padding),t}getConfig(){const e=super.getConfig();return delete e.dilationRate,e}}Go.className="Conv2DTranspose",e.serialization.registerClass(Go);class Ho extends Vo{constructor(e,t){if(super(e,t),this.DEFAULT_DEPTHWISE_INITIALIZER="glorotUniform",this.DEFAULT_POINTWISE_INITIALIZER="glorotUniform",this.depthwiseKernel=null,this.pointwiseKernel=null,null==t.filters)throw new Gs("The `filters` configuration field is required by SeparableConv, but is unspecified.");if(null!=t.kernelInitializer||null!=t.kernelRegularizer||null!=t.kernelConstraint)throw new Gs("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");if(null!=t.padding&&"same"!==t.padding&&"valid"!==t.padding)throw new Gs(`SeparableConv${this.rank}D supports only padding modes: 'same' and 'valid', but received ${JSON.stringify(t.padding)}`);this.depthMultiplier=null==t.depthMultiplier?1:t.depthMultiplier,this.depthwiseInitializer=Sr(t.depthwiseInitializer||this.DEFAULT_DEPTHWISE_INITIALIZER),this.depthwiseRegularizer=Co(t.depthwiseRegularizer),this.depthwiseConstraint=ka(t.depthwiseConstraint),this.pointwiseInitializer=Sr(t.depthwiseInitializer||this.DEFAULT_POINTWISE_INITIALIZER),this.pointwiseRegularizer=Co(t.pointwiseRegularizer),this.pointwiseConstraint=ka(t.pointwiseConstraint)}build(e){if((e=Fr(e)).length<this.rank+2)throw new Gs(`Inputs to SeparableConv${this.rank}D should have rank ${this.rank+2}, but received input shape: ${JSON.stringify(e)}`);const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t]||e[t]<0)throw new Gs(`The channel dimension of the inputs should be defined, but found ${JSON.stringify(e[t])}`);const n=e[t],s=this.kernelSize.concat([n,this.depthMultiplier]),a=[];for(let e=0;e<this.rank;++e)a.push(1);a.push(n*this.depthMultiplier,this.filters);const r=!0;this.depthwiseKernel=this.addWeight("depthwise_kernel",s,"float32",this.depthwiseInitializer,this.depthwiseRegularizer,r,this.depthwiseConstraint),this.pointwiseKernel=this.addWeight("pointwise_kernel",a,"float32",this.pointwiseInitializer,this.pointwiseRegularizer,r,this.pointwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,r,this.biasConstraint):this.bias=null,this.inputSpec=[new Lr({ndim:this.rank+2,axes:{[t]:n}})],this.built=!0}call(t,n){return(0,e.tidy)((()=>{let n;if(t=Rr(t),1===this.rank)throw new Hs("1D separable convolution is not implemented yet.");return 2===this.rank&&("channelsFirst"===this.dataFormat&&(t=e.transpose(t,[0,2,3,1])),n=e.separableConv2d(t,this.depthwiseKernel.read(),this.pointwiseKernel.read(),this.strides,this.padding,this.dilationRate,"NHWC")),this.useBias&&(n=tr(n,this.bias.read(),this.dataFormat)),null!=this.activation&&(n=this.activation.apply(n)),"channelsFirst"===this.dataFormat&&(n=e.transpose(n,[0,3,1,2])),n}))}getConfig(){const e=super.getConfig();return delete e.rank,delete e.kernelInitializer,delete e.kernelRegularizer,delete e.kernelConstraint,e.depthwiseInitializer=Ir(this.depthwiseInitializer),e.pointwiseInitializer=Ir(this.pointwiseInitializer),e.depthwiseRegularizer=So(this.depthwiseRegularizer),e.pointwiseRegularizer=So(this.pointwiseRegularizer),e.depthwiseConstraint=xa(this.depthwiseConstraint),e.pointwiseConstraint=xa(this.pointwiseConstraint),e}}Ho.className="SeparableConv";class jo extends Ho{constructor(e){super(2,e)}}jo.className="SeparableConv2D",e.serialization.registerClass(jo);class Xo extends Vo{constructor(e){super(1,e),Xo.verifyArgs(e),this.inputSpec=[{ndim:3}]}getConfig(){const e=super.getConfig();return delete e.rank,delete e.dataFormat,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!la(e.kernelSize,"number",1,1))throw new Gs(`Conv1D expects config.kernelSize to be number or number[] with length 1, but received ${JSON.stringify(e.kernelSize)}.`)}}Xo.className="Conv1D",e.serialization.registerClass(Xo);class qo extends Ur{constructor(e){super(e),"number"==typeof e.cropping?this.cropping=[[e.cropping,e.cropping],[e.cropping,e.cropping]]:"number"==typeof e.cropping[0]?this.cropping=[[e.cropping[0],e.cropping[0]],[e.cropping[1],e.cropping[1]]]:this.cropping=e.cropping,this.dataFormat=void 0===e.dataFormat?"channelsLast":e.dataFormat,this.inputSpec=[{ndim:4}]}computeOutputShape(e){return"channelsFirst"===this.dataFormat?[e[0],e[1],e[2]-this.cropping[0][0]-this.cropping[0][1],e[3]-this.cropping[1][0]-this.cropping[1][1]]:[e[0],e[1]-this.cropping[0][0]-this.cropping[0][1],e[2]-this.cropping[1][0]-this.cropping[1][1],e[3]]}call(t,n){return(0,e.tidy)((()=>{if(t=Rr(t),"channelsLast"===this.dataFormat){const e=ja(t,this.cropping[0][0],t.shape[1]-this.cropping[0][0]-this.cropping[0][1],2);return ja(e,this.cropping[1][0],t.shape[2]-this.cropping[1][1]-this.cropping[1][0],3)}{const e=ja(t,this.cropping[0][0],t.shape[2]-this.cropping[0][0]-this.cropping[0][1],3);return ja(e,this.cropping[1][0],t.shape[3]-this.cropping[1][1]-this.cropping[1][0],4)}}))}getConfig(){const e={cropping:this.cropping,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}qo.className="Cropping2D",e.serialization.registerClass(qo);class Ko extends Ur{constructor(e){var t;super(e),this.DEFAULT_SIZE=[2,2],this.inputSpec=[{ndim:4}],this.size=null==e.size?this.DEFAULT_SIZE:e.size,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,$a(this.dataFormat),this.interpolation=null==e.interpolation?"nearest":e.interpolation,t=this.interpolation,oa(Na,"InterpolationFormat",t)}computeOutputShape(e){if("channelsFirst"===this.dataFormat){const t=null==e[2]?null:this.size[0]*e[2],n=null==e[3]?null:this.size[1]*e[3];return[e[0],e[1],t,n]}{const t=null==e[1]?null:this.size[0]*e[1],n=null==e[2]?null:this.size[1]*e[2];return[e[0],t,n,e[3]]}}call(t,n){return e.tidy((()=>{let n=Rr(t);const s=n.shape;if("channelsFirst"===this.dataFormat){n=e.transpose(n,[0,2,3,1]);const t=this.size[0]*s[2],a=this.size[1]*s[3],r="nearest"===this.interpolation?n.resizeNearestNeighbor([t,a]):n.resizeBilinear([t,a]);return e.transpose(r,[0,3,1,2])}{const e=this.size[0]*s[1],t=this.size[1]*s[2];return"nearest"===this.interpolation?n.resizeNearestNeighbor([e,t]):n.resizeBilinear([e,t])}}))}getConfig(){const e={size:this.size,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}Ko.className="UpSampling2D",e.serialization.registerClass(Ko);class Yo extends Po{constructor(e){super(2,e),this.depthwiseKernel=null,this.depthMultiplier=null==e.depthMultiplier?1:e.depthMultiplier,this.depthwiseInitializer=Sr(e.depthwiseInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.depthwiseConstraint=ka(e.depthwiseConstraint),this.depthwiseRegularizer=Co(e.depthwiseRegularizer)}build(e){if((e=Fr(e)).length<4)throw new Gs(`Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(e)}.`);const t="channelsFirst"===this.dataFormat?1:3;if(null==e[t]||e[t]<0)throw new Gs(`The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${e[t]}).`);const n=e[t],s=[this.kernelSize[0],this.kernelSize[1],n,this.depthMultiplier];this.depthwiseKernel=this.addWeight("depthwise_kernel",s,null,this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[n*this.depthMultiplier],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(t,n){return(0,e.tidy)((()=>{let n=function(t,n,s=[1,1],a="valid",r,i){return(0,e.tidy)((()=>{null==r&&(r="channelsLast"),$a(r);let o=zo(t,r);if(4!==t.rank)throw new Gs(`Input for depthwiseConv2d is required to be 4-D, but is instead ${t.rank}-D`);if(4!==n.rank)throw new Gs(`depthwiseKernel is required to be 4-D, but is instead ${n.rank}-D`);return o=e.depthwiseConv2d(o,n,s,"same"===a?"same":"valid","NHWC",i),"channelsFirst"===r&&(o=e.transpose(o,[0,3,1,2])),o}))}(t=Rr(t),this.depthwiseKernel.read(),this.strides,this.padding,this.dataFormat,null);return this.useBias&&(n=tr(n,this.bias.read(),this.dataFormat)),null!=this.activation&&(n=this.activation.apply(n)),n}))}computeOutputShape(e){e=Fr(e);const t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2],s="channelsFirst"===this.dataFormat?e[1]*this.depthMultiplier:e[3]*this.depthMultiplier,a=Oo(t,this.kernelSize[0],this.padding,this.strides[0]),r=Oo(n,this.kernelSize[1],this.padding,this.strides[1]);return"channelsFirst"===this.dataFormat?[e[0],s,a,r]:[e[0],a,r,s]}getConfig(){const e=super.getConfig();return e.depthMultiplier=this.depthMultiplier,e.depthwiseInitializer=Ir(this.depthwiseInitializer),e.depthwiseRegularizer=So(this.depthwiseRegularizer),e.depthwiseConstraint=xa(this.depthwiseRegularizer),e}}function Qo(e,t,n,s){if(Array.isArray(e)){if(null!=t||null!=n)throw new Gs("When inputs is an array, neither initialState or constants should be provided");null!=s&&(n=e.slice(e.length-s,e.length),e=e.slice(0,e.length-s)),e.length>1&&(t=e.slice(1,e.length)),e=e[0]}function a(e){return null==e||Array.isArray(e)?e:[e]}return{inputs:e,initialState:t=a(t),constants:n=a(n)}}function Jo(t,n,s,a=!1,r,i,o=!1,l=!1){return e.tidy((()=>{const u=n.shape.length;if(u<3)throw new Gs(`Input should be at least 3D, but is ${u}D.`);const c=[1,0].concat(Va(2,u));if(n=e.transpose(n,c),null!=i)throw new Hs("The rnn() functoin of the deeplearn.js backend does not support constants yet.");o&&console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."),null!=r&&((r=r.asType("bool").asType("float32")).rank===u-1&&(r=e.expandDims(r,-1)),r=e.transpose(r,c)),a&&(n=e.reverse(n,0),null!=r&&(r=e.reverse(r,0)));const h=[];let p,d=s;const f=n.shape[0],m=e.unstack(n);let g,y;null!=r&&(g=e.unstack(r));for(let n=0;n<f;++n){const s=m[n],a=e.tidy((()=>t(s,d)));if(null==r)p=a[0],d=a[1];else{const t=e.tidy((()=>{const t=g[n],s=e.onesLike(t).sub(t);return{output:a[0].mul(t).add(d[0].mul(s)),newStates:d.map(((e,n)=>a[1][n].mul(t).add(e.mul(s))))}}));p=t.output,d=t.newStates}l&&h.push(p)}if(l){const t=1;y=e.stack(h,t)}return[p,y,d]}))}Yo.className="DepthwiseConv2D",e.serialization.registerClass(Yo);class Zo extends Ur{constructor(e){let t;if(super(e),null==e.cell)throw new Gs("cell property is missing for the constructor of RNN.");if(t=Array.isArray(e.cell)?new ol({cells:e.cell}):e.cell,null==t.stateSize)throw new Gs("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");this.cell=t,this.returnSequences=null!=e.returnSequences&&e.returnSequences,this.returnState=null!=e.returnState&&e.returnState,this.goBackwards=null!=e.goBackwards&&e.goBackwards,this._stateful=null!=e.stateful&&e.stateful,this.unroll=null!=e.unroll&&e.unroll,this.supportsMasking=!0,this.inputSpec=[new Lr({ndim:3})],this.stateSpec=null,this.states_=null,this.numConstants=null,this.keptStates=[]}getStates(){return null==this.states_?Va(0,Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1).map((e=>null)):this.states_}setStates(e){this.states_=e}computeOutputShape(e){Er(e)&&(e=e[0]),e=e;let t=this.cell.stateSize;Array.isArray(t)||(t=[t]);const n=t[0];let s;if(s=this.returnSequences?[e[0],e[1],n]:[e[0],n],this.returnState){const n=[];for(const s of t)n.push([e[0],s]);return[s].concat(n)}return s}computeMask(t,n){return e.tidy((()=>{Array.isArray(n)&&(n=n[0]);const e=this.returnSequences?n:null;if(this.returnState){const t=this.states.map((e=>null));return[e].concat(t)}return e}))}get states(){if(null==this.states_){const e=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1,t=[];for(let n=0;n<e;++n)t.push(null);return t}return this.states_}set states(e){this.states_=e}build(t){if(null!=this.numConstants)throw new Hs("Constants support is not implemented in RNN yet.");Er(t)&&(t=t[0]),t=t;const n=this.stateful?t[0]:null,s=t.slice(2);this.inputSpec[0]=new Lr({shape:[n,null,...s]});const a=[t[0]].concat(t.slice(2));let r;if(this.cell.build(a),r=Array.isArray(this.cell.stateSize)?this.cell.stateSize:[this.cell.stateSize],null!=this.stateSpec){if(!e.util.arraysEqual(this.stateSpec.map((e=>e.shape[e.shape.length-1])),r))throw new Gs(`An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=${this.stateSpec}; However cell.stateSize is ${this.cell.stateSize}`)}else this.stateSpec=r.map((e=>new Lr({shape:[null,e]})));this.stateful&&this.resetStates()}resetStates(t,n=!1){(0,e.tidy)((()=>{if(!this.stateful)throw new Ws("Cannot call resetStates() on an RNN Layer that is not stateful.");const s=this.inputSpec[0].shape[0];if(null==s)throw new Gs("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.states_)Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((t=>e.zeros([s,t]))):this.states_=[e.zeros([s,this.cell.stateSize])];else if(null==t)e.dispose(this.states_),null!=this.keptStates&&(e.dispose(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((t=>e.zeros([s,t]))):this.states_[0]=e.zeros([s,this.cell.stateSize]);else{if(Array.isArray(t)||(t=[t]),t.length!==this.states_.length)throw new Gs(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${t.length} state value(s). Input received: ${t}`);!0===n?this.keptStates.push(this.states_.slice()):e.dispose(this.states_);for(let n=0;n<this.states_.length;++n){const a=t[n],r=Array.isArray(this.cell.stateSize)?this.cell.stateSize[n]:this.cell.stateSize,i=[s,r];if(!e.util.arraysEqual(a.shape,i))throw new Gs(`State ${n} is incompatible with layer ${this.name}: expected shape=${i}, received shape=${a.shape}`);this.states_[n]=a}}this.states_=this.states_.map((t=>e.keep(t.clone())))}))}apply(e,t){let n=null==t?null:t.initialState,s=null==t?null:t.constants;null==t&&(t={});const a=Qo(e,n,s,this.numConstants);e=a.inputs,n=a.initialState,s=a.constants;let r=[],i=[];if(null!=n){t.initialState=n,r=r.concat(n),this.stateSpec=[];for(const e of n)this.stateSpec.push(new Lr({shape:e.shape}));i=i.concat(this.stateSpec)}if(null!=s&&(t.constants=s,r=r.concat(s),this.numConstants=s.length),r[0]instanceof Br){const n=[e].concat(r),s=this.inputSpec.concat(i),a=this.inputSpec;this.inputSpec=s;const o=super.apply(n,t);return this.inputSpec=a,o}return super.apply(e,t)}call(t,n){return(0,e.tidy)((()=>{const e=null==n?null:n.mask,s=null==n?null:n.training;let a=null==n?null:n.initialState;t=Rr(t),null==a&&(a=this.stateful?this.states_:this.getInitialState(t));const r=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1;if(a.length!==r)throw new Gs(`RNN Layer has ${r} state(s) but was passed ${a.length} initial state(s).`);this.unroll&&console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");const i={training:s},o=Jo(((e,t)=>{const n=this.cell.call([e].concat(t),i);return[n[0],n.slice(1)]}),t,a,this.goBackwards,e,null,this.unroll,this.returnSequences),l=o[0],u=o[1],c=o[2];this.stateful&&this.resetStates(c,s);const h=this.returnSequences?u:l;return this.returnState?[h].concat(c):h}))}getInitialState(t){return(0,e.tidy)((()=>{let n=e.zeros(t.shape);return n=e.sum(n,[1,2]),n=Ua(n),Array.isArray(this.cell.stateSize)?this.cell.stateSize.map((e=>e>1?Ka(n,[1,e]):n)):this.cell.stateSize>1?[Ka(n,[1,this.cell.stateSize])]:[n]}))}get trainableWeights(){return this.trainable?this.cell.trainableWeights:[]}get nonTrainableWeights(){return this.trainable?this.cell.nonTrainableWeights:this.cell.weights}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.cell&&this.cell.setFastWeightInitDuringBuild(e)}getConfig(){const e=super.getConfig(),t={returnSequences:this.returnSequences,returnState:this.returnState,goBackwards:this.goBackwards,stateful:this.stateful,unroll:this.unroll};null!=this.numConstants&&(t.numConstants=this.numConstants);const n=this.cell.getConfig();return this.getClassName()===Zo.className&&(t.cell={className:this.cell.getClassName(),config:n}),Object.assign({},n,e,t)}static fromConfig(e,t,n={}){const s=si(t.cell,n);return new e(Object.assign(t,{cell:s}))}}Zo.className="RNN",e.serialization.registerClass(Zo);class el extends Ur{}class tl extends el{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,ua(this.units,"units"),this.activation=ko(null==e.activation?this.DEFAULT_ACTIVATION:e.activation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=Sr(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=Sr(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=Sr(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=Co(e.kernelRegularizer),this.recurrentRegularizer=Co(e.recurrentRegularizer),this.biasRegularizer=Co(e.biasRegularizer),this.kernelConstraint=ka(e.kernelConstraint),this.recurrentConstraint=ka(e.recurrentConstraint),this.biasConstraint=ka(e.biasConstraint),this.dropout=Ba([1,Pa([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=Ba([1,Pa([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){e=Fr(e),this.kernel=this.addWeight("kernel",[e[e.length-1],this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(t,n){return(0,e.tidy)((()=>{if(2!==(t=t).length)throw new Gs(`SimpleRNNCell expects 2 input Tensors, got ${t.length}.`);let s=t[1];t=t[0];const a=null!=n.training&&n.training;let r;0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=ll({ones:()=>e.onesLike(t),rate:this.dropout,training:a})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=ll({ones:()=>e.onesLike(s),rate:this.recurrentDropout,training:a}));const i=this.dropoutMask,o=this.recurrentDropoutMask;r=Qa(null!=i?e.mul(t,i):t,this.kernel.read()),null!=this.bias&&(r=tr(r,this.bias.read())),null!=o&&(s=e.mul(s,o));let l=e.add(r,Qa(s,this.recurrentKernel.read()));return null!=this.activation&&(l=this.activation.apply(l)),[l,l]}))}getConfig(){const e=super.getConfig(),t={units:this.units,activation:xo(this.activation),useBias:this.useBias,kernelInitializer:Ir(this.kernelInitializer),recurrentInitializer:Ir(this.recurrentInitializer),biasInitializer:Ir(this.biasInitializer),kernelRegularizer:So(this.kernelRegularizer),recurrentRegularizer:So(this.recurrentRegularizer),biasRegularizer:So(this.biasRegularizer),activityRegularizer:So(this.activityRegularizer),kernelConstraint:xa(this.kernelConstraint),recurrentConstraint:xa(this.recurrentConstraint),biasConstraint:xa(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout};return Object.assign({},e,t)}}tl.className="SimpleRNNCell",e.serialization.registerClass(tl);class nl extends Zo{constructor(e){e.cell=new tl(e),super(e)}call(t,n){return(0,e.tidy)((()=>{null!=this.cell.dropoutMask&&(e.dispose(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(e.dispose(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const s=null==n?null:n.mask,a=null==n?null:n.training,r=null==n?null:n.initialState;return super.call(t,{mask:s,training:a,initialState:r})}))}static fromConfig(e,t){return new e(t)}}nl.className="SimpleRNN",e.serialization.registerClass(nl);class sl extends el{constructor(e){if(super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",e.resetAfter)throw new Gs("GRUCell does not support reset_after parameter set to true.");this.units=e.units,ua(this.units,"units"),this.activation=ko(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=ko(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=Sr(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=Sr(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=Sr(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=Co(e.kernelRegularizer),this.recurrentRegularizer=Co(e.recurrentRegularizer),this.biasRegularizer=Co(e.biasRegularizer),this.kernelConstraint=ka(e.kernelConstraint),this.recurrentConstraint=ka(e.recurrentConstraint),this.biasConstraint=ka(e.biasConstraint),this.dropout=Ba([1,Pa([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=Ba([1,Pa([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.implementation=e.implementation,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){const t=(e=Fr(e))[e.length-1];this.kernel=this.addWeight("kernel",[t,3*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,3*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[3*this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(t,n){return(0,e.tidy)((()=>{if(2!==(t=t).length)throw new Gs(`GRUCell expects 2 input Tensors (inputs, h, c), got ${t.length}.`);const s=null!=n.training&&n.training;let a=t[1];t=t[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=ll({ones:()=>e.onesLike(t),rate:this.dropout,training:s,count:3})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=ll({ones:()=>e.onesLike(a),rate:this.recurrentDropout,training:s,count:3}));const r=this.dropoutMask,i=this.recurrentDropoutMask;let o,l,u;0<this.dropout&&this.dropout<1&&(t=e.mul(t,r[0]));let c=Qa(t,this.kernel.read());this.useBias&&(c=tr(c,this.bias.read())),0<this.recurrentDropout&&this.recurrentDropout<1&&(a=e.mul(a,i[0]));const h=this.recurrentKernel.read(),[p,d]=e.split(h,[2*this.units,this.units],h.rank-1),f=Qa(a,p),[m,g,y]=e.split(c,3,c.rank-1),[b,x]=e.split(f,2,f.rank-1);o=this.recurrentActivation.apply(e.add(m,b)),l=this.recurrentActivation.apply(e.add(g,x));const v=Qa(e.mul(l,a),d);u=this.activation.apply(e.add(y,v));const k=e.add(e.mul(o,a),e.mul(e.add(1,e.neg(o)),u));return[k,k]}))}getConfig(){const e=super.getConfig(),t={units:this.units,activation:xo(this.activation),recurrentActivation:xo(this.recurrentActivation),useBias:this.useBias,kernelInitializer:Ir(this.kernelInitializer),recurrentInitializer:Ir(this.recurrentInitializer),biasInitializer:Ir(this.biasInitializer),kernelRegularizer:So(this.kernelRegularizer),recurrentRegularizer:So(this.recurrentRegularizer),biasRegularizer:So(this.biasRegularizer),activityRegularizer:So(this.activityRegularizer),kernelConstraint:xa(this.kernelConstraint),recurrentConstraint:xa(this.recurrentConstraint),biasConstraint:xa(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation,resetAfter:!1};return Object.assign({},e,t)}}sl.className="GRUCell",e.serialization.registerClass(sl);class al extends Zo{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new sl(e),super(e)}call(t,n){return(0,e.tidy)((()=>{null!=this.cell.dropoutMask&&(e.dispose(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(e.dispose(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const s=null==n?null:n.mask,a=null==n?null:n.training,r=null==n?null:n.initialState;return super.call(t,{mask:s,training:a,initialState:r})}))}static fromConfig(e,t){return 0===t.implmentation&&(t.implementation=1),new e(t)}}al.className="GRU",e.serialization.registerClass(al);class rl extends el{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,ua(this.units,"units"),this.activation=ko(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=ko(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=Sr(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=Sr(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=Sr(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.unitForgetBias=e.unitForgetBias,this.kernelRegularizer=Co(e.kernelRegularizer),this.recurrentRegularizer=Co(e.recurrentRegularizer),this.biasRegularizer=Co(e.biasRegularizer),this.kernelConstraint=ka(e.kernelConstraint),this.recurrentConstraint=ka(e.recurrentConstraint),this.biasConstraint=ka(e.biasConstraint),this.dropout=Ba([1,Pa([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=Ba([1,Pa([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.implementation=e.implementation,this.stateSize=[this.units,this.units],this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){var t;const n=(e=Fr(e))[e.length-1];let s;if(this.kernel=this.addWeight("kernel",[n,4*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,4*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){if(this.unitForgetBias){const e=this.biasInitializer,n=this.units;s=new((t=class extends ir{apply(t,s){const a=e.apply([n]),r=(new lr).apply([n]),i=e.apply([2*n]);return qa(qa(a,r),i)}}).className="CustomInit",t)}else s=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.units],null,s,this.biasRegularizer,!0,this.biasConstraint)}else this.bias=null;this.built=!0}call(t,n){return(0,e.tidy)((()=>{const s=null!=n.training&&n.training;if(3!==(t=t).length)throw new Gs(`LSTMCell expects 3 input Tensors (inputs, h, c), got ${t.length}.`);let a=t[1];const r=t[2];t=t[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=ll({ones:()=>e.onesLike(t),rate:this.dropout,training:s,count:4})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=ll({ones:()=>e.onesLike(a),rate:this.recurrentDropout,training:s,count:4}));const i=this.dropoutMask,o=this.recurrentDropoutMask;let l,u,c,h;0<this.dropout&&this.dropout<1&&(t=e.mul(t,i[0]));let p=Qa(t,this.kernel.read());0<this.recurrentDropout&&this.recurrentDropout<1&&(a=e.mul(a,o[0])),p=e.add(p,Qa(a,this.recurrentKernel.read())),this.useBias&&(p=tr(p,this.bias.read()));const[d,f,m,g]=e.split(p,4,p.rank-1);l=this.recurrentActivation.apply(d),u=this.recurrentActivation.apply(f),c=e.add(e.mul(u,r),e.mul(l,this.activation.apply(m))),h=this.recurrentActivation.apply(g);const y=e.mul(h,this.activation.apply(c));return[y,y,c]}))}getConfig(){const e=super.getConfig(),t={units:this.units,activation:xo(this.activation),recurrentActivation:xo(this.recurrentActivation),useBias:this.useBias,kernelInitializer:Ir(this.kernelInitializer),recurrentInitializer:Ir(this.recurrentInitializer),biasInitializer:Ir(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:So(this.kernelRegularizer),recurrentRegularizer:So(this.recurrentRegularizer),biasRegularizer:So(this.biasRegularizer),activityRegularizer:So(this.activityRegularizer),kernelConstraint:xa(this.kernelConstraint),recurrentConstraint:xa(this.recurrentConstraint),biasConstraint:xa(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation};return Object.assign({},e,t)}}rl.className="LSTMCell",e.serialization.registerClass(rl);class il extends Zo{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new rl(e),super(e)}call(t,n){return(0,e.tidy)((()=>{null!=this.cell.dropoutMask&&(e.dispose(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(e.dispose(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const s=null==n?null:n.mask,a=null==n?null:n.training,r=null==n?null:n.initialState;return super.call(t,{mask:s,training:a,initialState:r})}))}static fromConfig(e,t){return 0===t.implmentation&&(t.implementation=1),new e(t)}}il.className="LSTM",e.serialization.registerClass(il);class ol extends el{constructor(e){super(e),this.cells=e.cells}get stateSize(){const e=[];for(const t of this.cells.slice().reverse())Array.isArray(t.stateSize)?e.push(...t.stateSize):e.push(t.stateSize);return e}call(t,n){return(0,e.tidy)((()=>{let e=(t=t).slice(1);const s=[];for(const t of this.cells.slice().reverse())Array.isArray(t.stateSize)?s.push(e.splice(0,t.stateSize.length)):s.push(e.splice(0,1));s.reverse();const a=[];let r;for(let i=0;i<this.cells.length;++i){const o=this.cells[i];e=s[i],r=0===i?[t[0]].concat(e):[r[0]].concat(e),r=o.call(r,n),a.push(r.slice(1))}e=[];for(const t of a.slice().reverse())e.push(...t);return[r[0]].concat(e)}))}build(e){let t;Er(e)&&(e=e[0]),e=e,this.cells.forEach(((n,s)=>{Ra(`RNNCell_${s}`,(()=>{n.build(e),t=Array.isArray(n.stateSize)?n.stateSize[0]:n.stateSize,e=[e[0],t]}))})),this.built=!0}getConfig(){const e=super.getConfig(),t={cells:this.cells.map((e=>({className:e.getClassName(),config:e.getConfig()})))};return Object.assign({},e,t)}static fromConfig(e,t,n={}){const s=[];for(const e of t.cells)s.push(si(e,n));return new e({cells:s})}get trainableWeights(){if(!this.trainable)return[];const e=[];for(const t of this.cells)e.push(...t.trainableWeights);return e}get nonTrainableWeights(){const e=[];for(const t of this.cells)e.push(...t.nonTrainableWeights);if(!this.trainable){const t=[];for(const e of this.cells)t.push(...e.trainableWeights);return t.concat(e)}return e}getWeights(){const e=[];for(const t of this.cells)e.push(...t.weights);return Mr(e)}setWeights(e){const t=[];for(const n of this.cells){const s=n.weights.length,a=e.splice(s);for(let e=0;e<n.weights.length;++e)t.push([n.weights[e],a[e]])}zr(t)}}function ll(t){const{ones:n,rate:s,training:a=!1,count:r=1}=t,i=()=>nr(n(),s),o=()=>sr(i,n,a);return!r||r<=1?e.keep(o().clone()):Array(r).fill(void 0).map(o).map((t=>e.keep(t.clone())))}ol.className="StackedRNNCells",e.serialization.registerClass(ol);class ul extends Zo{constructor(e){if(e.unroll)throw new Hs("Unrolling is not possible with convolutional RNNs.");if(Array.isArray(e.cell))throw new Hs("It is not possible at the moment to stack convolutional cells.");super(e),this.inputSpec=[new Lr({ndim:5})]}call(t,n){return e.tidy((()=>{if(null!=this.cell.dropoutMask&&(e.dispose(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(e.dispose(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),n&&n.constants)throw new Gs("ConvRNN2D cell does not support constants");const s=null==n?null:n.mask,a=null==n?null:n.training,r=null==n?null:n.initialState;return super.call(t,{mask:s,training:a,initialState:r})}))}computeOutputShape(e){let t=this.computeSingleOutputShape(e);return this.returnSequences||(t=[t[0],...t.slice(2)]),this.returnState&&(t=[t,...Array(2).fill([e[0],...t.slice(-3)])]),t}getInitialState(t){return e.tidy((()=>{const{stateSize:n}=this.cell,s=t.shape,a=this.computeSingleOutputShape(s),r=[a[0],...a.slice(2)],i=e.zeros(r);return Array.isArray(n)?Array(n.length).fill(i):[i]}))}resetStates(t,n=!1){e.tidy((()=>{if(!this.stateful)throw new Ws("Cannot call resetStates() on an RNN Layer that is not stateful.");const s=this.inputSpec[0].shape,a=this.computeSingleOutputShape(s),r=[a[0],...a.slice(2)];if(null==s[0])throw new Gs("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.getStates())Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((()=>e.zeros(r))):this.states_=[e.zeros(r)];else if(null==t)e.dispose(this.states_),null!=this.keptStates&&(e.dispose(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((()=>e.zeros(r))):this.states_[0]=e.zeros(r);else{if(Array.isArray(t)||(t=[t]),t.length!==this.states_.length)throw new Gs(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${t.length} state value(s). Input received: ${t}`);n?this.keptStates.push(this.states_.slice()):e.dispose(this.states_);for(let n=0;n<this.states_.length;++n){const s=t[n],a=r;if(!e.util.arraysEqual(s.shape,a))throw new Gs(`State ${n} is incompatible with layer ${this.name}: expected shape=${a}, received shape=${s.shape}`);this.states_[n]=s}}this.states_=this.states_.map((t=>e.keep(t.clone())))}))}computeSingleOutputShape(e){const{dataFormat:t,filters:n,kernelSize:s,padding:a,strides:r,dilationRate:i}=this.cell,o="channelsFirst"===t,l=e[o?3:2],u=e[o?4:3],c=Oo(l,s[0],a,r[0],i[0]),h=Oo(u,s[1],a,r[1],i[1]);return[...e.slice(0,2),...o?[n,c,h]:[c,h,n]]}}ul.className="ConvRNN2D";class cl extends rl{constructor(e){const{filters:t,kernelSize:n,strides:s,padding:a,dataFormat:r,dilationRate:i}=e;super(Object.assign({},e,{units:t})),this.filters=t,ua(this.filters,"filters"),this.kernelSize=Do(n,2,"kernelSize"),this.kernelSize.forEach((e=>ua(e,"kernelSize"))),this.strides=Do(s||1,2,"strides"),this.strides.forEach((e=>ua(e,"strides"))),this.padding=a||"valid",Aa(this.padding),this.dataFormat=r||"channelsLast",$a(this.dataFormat),this.dilationRate=Do(i||1,2,"dilationRate"),this.dilationRate.forEach((e=>ua(e,"dilationRate")))}build(t){var n;t=Fr(t);const s="channelsFirst"===this.dataFormat?1:t.length-1;if(null==t[s])throw new Gs(`The channel dimension of the input should be defined. Found ${t[s]}`);const a=t[s],r=this.kernelSize.concat([a,4*this.filters]);this.kernel=this.addWeight("kernel",r,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint);const i=this.kernelSize.concat([this.filters,4*this.filters]);if(this.recurrentKernel=this.addWeight("recurrent_kernel",i,null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){let t;if(this.unitForgetBias){const s=this.biasInitializer,a=this.filters;t=new((n=class extends ir{apply(t,n){return Xa([s.apply([a]),e.ones([a]),s.apply([2*a])])}}).className="CustomInit",n)}else t=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.filters],null,t,this.biasRegularizer,!0,this.biasConstraint)}this.built=!0}call(t,n){return e.tidy((()=>{if(3!==t.length)throw new Gs(`ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got ${t.length}.`);const s=n.training||!1,a=t[0],r=t[1],i=t[2];0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=ll({ones:()=>e.onesLike(a),rate:this.dropout,training:s,count:4}));const o=this.dropoutMask,l=(t,n,s)=>n&&n[s]?e.mul(n[s],t):t;let u=l(a,o,0),c=l(a,o,1),h=l(a,o,2),p=l(a,o,3);0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=ll({ones:()=>e.onesLike(r),rate:this.recurrentDropout,training:s,count:4}));const d=this.recurrentDropoutMask;let f=l(r,d,0),m=l(r,d,1),g=l(r,d,2),y=l(r,d,3);const[b,x,v,k]=e.split(this.kernel.read(),4,3),[w,N,I,S]=this.useBias?e.split(this.bias.read(),4):[null,null,null,null];u=this.inputConv(u,b,w,this.padding),c=this.inputConv(c,x,N,this.padding),h=this.inputConv(h,v,I,this.padding),p=this.inputConv(p,k,S,this.padding);const[T,C,$,A]=e.split(this.recurrentKernel.read(),4,3);f=this.recurrentConv(f,T),m=this.recurrentConv(m,C),g=this.recurrentConv(g,$),y=this.recurrentConv(y,A);const E=this.recurrentActivation.apply(e.add(u,f)),_=this.recurrentActivation.apply(e.add(c,m)),R=e.add(e.mul(_,i),e.mul(E,this.activation.apply(e.add(h,g)))),F=e.mul(this.recurrentActivation.apply(e.add(p,y)),this.activation.apply(R));return[F,F,R]}))}getConfig(){const e=super.getConfig(),{units:t}=e,n=function(e,t){var n={};for(var s in e)Object.prototype.hasOwnProperty.call(e,s)&&t.indexOf(s)<0&&(n[s]=e[s]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var a=0;for(s=Object.getOwnPropertySymbols(e);a<s.length;a++)t.indexOf(s[a])<0&&Object.prototype.propertyIsEnumerable.call(e,s[a])&&(n[s[a]]=e[s[a]])}return n}(e,["units"]),s={filters:this.filters,kernelSize:this.kernelSize,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,strides:this.strides};return Object.assign({},n,s)}inputConv(t,n,s,a){const r=e.conv2d(t,n,this.strides,a||"valid","channelsFirst"===this.dataFormat?"NCHW":"NHWC",this.dilationRate);return s?tr(r,s,this.dataFormat):r}recurrentConv(t,n){return e.conv2d(t,n,1,"same","channelsFirst"===this.dataFormat?"NCHW":"NHWC")}}cl.className="ConvLSTM2DCell",e.serialization.registerClass(cl);class hl extends ul{constructor(e){const t=new cl(e);super(Object.assign({},e,{cell:t}))}static fromConfig(e,t){return new e(t)}}hl.className="ConvLSTM2D",e.serialization.registerClass(hl);class pl extends Ur{constructor(e){super(e),this.rate=Math.max(Math.min(e.rate,1),0),this.noiseShape=e.noiseShape,this.seed=e.seed,this.supportsMasking=!0}getNoiseShape(e){if(null==this.noiseShape)return this.noiseShape;const t=e.shape,n=[];for(let e=0;e<this.noiseShape.length;++e)n.push(null==this.noiseShape[e]?t[e]:this.noiseShape[e]);return n}call(t,n){return(0,e.tidy)((()=>{this.invokeCallHook(t,n);const e=Rr(t);if(0<this.rate&&this.rate<1){const t=null!=n.training&&n.training,s=this.getNoiseShape(e);return sr((()=>nr(e,this.rate,s,this.seed)),(()=>e),t)}return t}))}getConfig(){const e={rate:this.rate,noiseShape:this.noiseShape,seed:this.seed},t=super.getConfig();return Object.assign(e,t),e}dispose(){return super.dispose()}}pl.className="Dropout",e.serialization.registerClass(pl);class dl extends pl{constructor(e){super(e),this.inputSpec=[{ndim:3}]}getNoiseShape(e){const t=e.shape;return[t[0],1,t[2]]}}dl.className="SpatialDropout1D",e.serialization.registerClass(dl);class fl extends Ur{constructor(e){if(super(e),this.activation=null,this.useBias=!0,this.kernel=null,this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",null==e.batchInputShape&&null==e.inputShape&&null!=e.inputDim){let t=null;null!=e.batchSize&&(t=e.batchSize),this.batchInputShape=[t,e.inputDim]}this.units=e.units,ua(this.units,"units"),this.activation=ko(e.activation),null!=e.useBias&&(this.useBias=e.useBias),this.kernelInitializer=Sr(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.biasInitializer=Sr(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelConstraint=ka(e.kernelConstraint),this.biasConstraint=ka(e.biasConstraint),this.kernelRegularizer=Co(e.kernelRegularizer),this.biasRegularizer=Co(e.biasRegularizer),this.activityRegularizer=Co(e.activityRegularizer),this.supportsMasking=!0,this.inputSpec=[{minNDim:2}]}build(e){const t=(e=Fr(e))[e.length-1];null==this.kernel&&(this.kernel=this.addWeight("kernel",[t,this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint))),this.inputSpec=[{minNDim:2,axes:{[-1]:t}}],this.built=!0}computeOutputShape(e){const t=(e=Fr(e)).slice();return t[t.length-1]=this.units,t}call(t,n){return(0,e.tidy)((()=>{this.invokeCallHook(t,n);const e=Rr(t),s=ha(this.activation.getClassName());let a;return null!=s?a=Qa(e,this.kernel.read(),s,this.bias?this.bias.read():null):(a=Qa(e,this.kernel.read()),null!=this.bias&&(a=tr(a,this.bias.read())),null!=this.activation&&(a=this.activation.apply(a))),a}))}getConfig(){const e={units:this.units,activation:xo(this.activation),useBias:this.useBias,kernelInitializer:Ir(this.kernelInitializer),biasInitializer:Ir(this.biasInitializer),kernelRegularizer:So(this.kernelRegularizer),biasRegularizer:So(this.biasRegularizer),activityRegularizer:So(this.activityRegularizer),kernelConstraint:xa(this.kernelConstraint),biasConstraint:xa(this.biasConstraint)},t=super.getConfig();return Object.assign(e,t),e}}fl.className="Dense",e.serialization.registerClass(fl);class ml extends Ur{constructor(e){super(e=e||{}),this.inputSpec=[{minNDim:3}],this.dataFormat=e.dataFormat}computeOutputShape(e){e=Fr(e);for(const t of e.slice(1))if(null==t)throw new Gs(`The shape of the input to "Flatten" is not fully defined (got ${e.slice(1)}). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.`);return[e[0],za(e,1)]}call(t,n){return(0,e.tidy)((()=>{this.invokeCallHook(t,n);let e=Rr(t);if("channelsFirst"===this.dataFormat&&e.rank>1){const t=[0];for(let n=2;n<e.rank;++n)t.push(n);t.push(1),e=e.transpose(t)}return function(e){if(e.rank<=1)throw new Gs(`batchFlatten requires a minimum rank of 2. Got rank: ${e.rank}.`);const t=[e.shape[0],za(e.shape,1)];return e.reshape(t)}(e)}))}getConfig(){const e={};null!=this.dataFormat&&(e.dataFormat=this.dataFormat);const t=super.getConfig();return Object.assign(e,t),e}}ml.className="Flatten",e.serialization.registerClass(ml);class gl extends Ur{constructor(e){super(e),this.supportsMasking=!0,this.activation=ko(e.activation)}call(t,n){return(0,e.tidy)((()=>{this.invokeCallHook(t,n);const e=Rr(t);return this.activation.apply(e)}))}getConfig(){const e={activation:xo(this.activation)},t=super.getConfig();return Object.assign(e,t),e}}gl.className="Activation",e.serialization.registerClass(gl);class yl extends Ur{constructor(e){super(e),this.n=e.n,this.inputSpec=[{ndim:2}]}computeOutputShape(e){return[e[0],this.n,e[1]]}call(t,n){return(0,e.tidy)((()=>{return t=Rr(t),n=t,s=this.n,(0,e.tidy)((()=>{if(2!==n.shape.length)throw new Gs(`repeat() expects a rank-2 tensor, but received a rank-${n.shape.length} tensor.`);return Ka(Ua(n,1),[1,s,1])}));var n,s}))}getConfig(){const e={n:this.n},t=super.getConfig();return Object.assign(e,t),e}}yl.className="RepeatVector",e.serialization.registerClass(yl);class bl extends Ur{constructor(e){super(e),this.targetShape=e.targetShape;for(let e=0;e<this.targetShape.length;++e)this.isUnknown(this.targetShape[e])&&(this.targetShape[e]=null)}isUnknown(e){return e<0||null==e}fixUnknownDimension(e,t){const n="Total size of new array must be unchanged.",s=t.slice();let a=1,r=null;for(let e=0;e<s.length;++e){const t=s[e];if(this.isUnknown(t)){if(null!==r)throw new Gs("Can only specifiy one unknown dimension.");r=e}else a*=t}const i=za(e);if(null!==r){if(0===a||i%a!=0)throw new Gs(n);s[r]=i/a}else if(i!==a)throw new Gs(n);return s}computeOutputShape(e){let t=!1;for(let n=0;n<e.length;++n)if(this.isUnknown(e[n])){t=!0;break}return t?e.slice(0,1).concat(this.targetShape):e.slice(0,1).concat(this.fixUnknownDimension(e.slice(1),this.targetShape))}call(t,n){return(0,e.tidy)((()=>{this.invokeCallHook(t,n);const e=Rr(t),s=e.shape,a=s.slice(0,1).concat(this.fixUnknownDimension(s.slice(1),this.targetShape));return e.reshape(a)}))}getConfig(){const e={targetShape:this.targetShape},t=super.getConfig();return Object.assign(e,t),e}}bl.className="Reshape",e.serialization.registerClass(bl);class xl extends Ur{constructor(t){if(super(t),null==t.dims)throw new Error("Required configuration field `dims` is missing during Permute constructor call.");if(!Array.isArray(t.dims))throw new Error(`Permute constructor requires \`dims\` to be an Array, but received ${t.dims} instead.`);const n=Va(1,t.dims.length+1);if(!e.util.arraysEqual(t.dims.slice().sort(),n))throw new Error("Invalid permutation `dims`: "+JSON.stringify(t.dims)+" `dims` must contain consecutive integers starting from 1.");this.dims=t.dims,this.dimsIncludingBatch=[0].concat(this.dims),this.inputSpec=[new Lr({ndim:this.dims.length+1})]}computeOutputShape(e){const t=(e=Fr(e)).slice();return this.dims.forEach(((n,s)=>{t[s+1]=e[n]})),t}call(t,n){return(0,e.transpose)(Rr(t),this.dimsIncludingBatch)}getConfig(){const e={dims:this.dims},t=super.getConfig();return Object.assign(e,t),e}}xl.className="Permute",e.serialization.registerClass(xl);class vl extends Ur{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,this.maskValue=null!=e?null==e.maskValue?0:e.maskValue:0}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={maskValue:this.maskValue};return Object.assign(t,e),t}computeMask(t,n){const s=Rr(t);return(0,e.any)((0,e.notEqual)(s,this.maskValue),-1)}call(t,n){return(0,e.tidy)((()=>{this.invokeCallHook(t,n);const s=Rr(t),a=(0,e.any)((0,e.notEqual)(s,this.maskValue),-1,!0);return s.mul(a.asType(s.dtype))}))}}vl.className="Masking",e.serialization.registerClass(vl);class kl extends Ur{constructor(e){if(super(e),this.embeddings=null,this.DEFAULT_EMBEDDINGS_INITIALIZER="randomUniform",null==e.batchInputShape&&null==e.inputShape){let t=null;null!=e.batchSize&&(t=e.batchSize),null==e.inputLength?this.batchInputShape=[t,null]:this.batchInputShape=[t].concat(Qs(e.inputLength))}this.inputDim=e.inputDim,ua(this.inputDim,"inputDim"),this.outputDim=e.outputDim,ua(this.outputDim,"outputDim"),this.embeddingsInitializer=Sr(e.embeddingsInitializer||this.DEFAULT_EMBEDDINGS_INITIALIZER),this.embeddingsRegularizer=Co(e.embeddingsRegularizer),this.activityRegularizer=Co(e.activityRegularizer),this.embeddingsConstraint=ka(e.embeddingsConstraint),this.maskZero=e.maskZero,this.supportsMasking=e.maskZero,this.inputLength=e.inputLength}build(e){this.embeddings=this.addWeight("embeddings",[this.inputDim,this.outputDim],this.dtype,this.embeddingsInitializer,this.embeddingsRegularizer,!0,this.embeddingsConstraint),this.built=!0}warnOnIncompatibleInputShape(e){}computeMask(t,n){return(0,e.tidy)((()=>this.maskZero?(t=Rr(t),(0,e.notEqual)(t,(0,e.zerosLike)(t))):null))}computeOutputShape(e){if(e=Fr(e),null==this.inputLength)return[...e,this.outputDim];const t=Qs(this.inputLength);if(t.length!==e.length-1)throw new Gs(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);{let n=0;for(let s=0;s<t.length;++s){const a=t[s],r=e[s+1];if(null!=a&&null!=r&&a!==r)throw new Gs(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);null==a&&(t[n]=r),n++}}return[e[0],...t,this.outputDim]}call(t,n){return(0,e.tidy)((()=>{this.invokeCallHook(t,n);let e=Rr(t);return"int32"!==e.dtype&&(e=Wa(e,"int32")),Ja(this.embeddings.read(),e.as1D()).reshape(Fr(this.computeOutputShape(e.shape)))}))}getConfig(){const e={inputDim:this.inputDim,outputDim:this.outputDim,embeddingsInitializer:Ir(this.embeddingsInitializer),embeddingsRegularizer:So(this.embeddingsRegularizer),activityRegularizer:So(this.activityRegularizer),embeddingsConstraint:xa(this.embeddingsConstraint),maskZero:this.maskZero,inputLength:this.inputLength},t=super.getConfig();return Object.assign(e,t),e}}kl.className="Embedding",e.serialization.registerClass(kl);class wl extends Ur{constructor(e){super(e||{}),this.supportsMasking=!0}mergeFunction(e){throw new Hs}computeElementwiseOpOutputShape(e,t){if(null==e||null==t)return null;if(e.length<t.length)return this.computeElementwiseOpOutputShape(t,e);if(0===t.length)return e;const n=e.slice(0,e.length-t.length);for(let s=0;s<t.length;++s){const a=e[e.length-t.length+s],r=t[s];if(null==a||null==r||a<0||r<0)n.push(null);else if(1===a)n.push(r);else if(1===r)n.push(a);else{if(a!==r)throw new Gs("Operands could not be broadcast together with shapes "+JSON.stringify(e)+" "+JSON.stringify(t));n.push(a)}}return n}build(e){if(Array.isArray(e)&&!Array.isArray(e[0])&&(e=[Fr(e)]),(e=e).length<2)throw new Gs(`A merge layer should be called on an Array of at least 2 inputs. Got ${e.length} input(s).`);let t=[];for(const n of e)null!=n&&null!==n[0]&&t.push(n[0]);if(t=ra(t),t.length>1)throw new Gs(`Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(e)}.`);let n=null==e[0]?null:e[0].slice(1);for(let t=1;t<e.length;++t){const s=null==e[t]?null:e[t].slice(1);n=this.computeElementwiseOpOutputShape(n,s)}const s=e.map((e=>e.length));-1===e.indexOf(null)&&1===ra(s).length?this.reshapeRequired=!1:this.reshapeRequired=!0}call(t,n){return(0,e.tidy)((()=>{if(t=t,this.reshapeRequired){const n=[],s=t.map((e=>e.rank));if(-1===s.indexOf(null)){const e=Pa(s);for(let s of t){const t=s.rank;for(let n=0;n<e-t;++n)s=Ua(s,1);n.push(s)}return this.mergeFunction(n)}{let s=!1;for(const a of t){const t=a.rank;if(null==t){const t=a.shape,r=t[0],i=t.slice(1).concat([r]);let o=a.reshape([r].concat(za(t.slice(1))));o=e.transpose(o,[1,0]),o=o.reshape(i),n.push(o),s=!0}else if(t>1){const r=Va(1,t).concat([0]);n.push(e.transpose(a,r)),s=!0}else n.push(a)}let a=this.mergeFunction(n);const r=a.rank;if(s)if(null==r){const t=a.shape,n=t[t.length-1],s=[n].concat(t.slice(0,t.length-1));a=e.transpose(a.reshape([-1,n]),[1,0]).reshape(s)}else if(r>1){const t=[r-1].concat(Va(0,r-1));a=e.transpose(a,t)}return a}}return this.mergeFunction(t)}))}computeOutputShape(e){let t;t=null==(e=e)[0]?null:e[0].slice(1);for(let n=1;n<e.length;++n){const s=null==e[n]?null:e[n].slice(1);t=this.computeElementwiseOpOutputShape(t,s)}let n=[];for(const t of e)null!=t&&null!==t[0]&&n.push(t[0]);return n=ra(n),t=1===n.length?n.concat(t):[null].concat(t),t}computeMask(t,n){return e.tidy((()=>{if(null==n)return null;if(!Array.isArray(n))throw new Gs("`mask` should be an Array");if(!Array.isArray(t))throw new Gs("`inputs` should be an Array");if(n.length!==t.length)throw new Gs(`The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${t.length} vs ${n.length})`);if(n.every((e=>null==e)))return null;let s=(n=n.map((t=>null==t?t:e.expandDims(t,0))))[0];for(let t=1;t<n.length-1;++t)s=e.logicalAnd(s,n[t]);return s}))}}class Nl extends wl{constructor(e){super(e)}mergeFunction(t){return(0,e.tidy)((()=>{let n=t[0].clone();for(let s=1;s<t.length;++s)n=e.add(n,t[s]);return n}))}}Nl.className="Add",e.serialization.registerClass(Nl);class Il extends wl{constructor(e){super(e)}mergeFunction(t){return(0,e.tidy)((()=>{let n=t[0].clone();for(let s=1;s<t.length;++s)n=e.mul(n,t[s]);return n}))}}Il.className="Multiply",e.serialization.registerClass(Il);class Sl extends wl{constructor(e){super(e)}mergeFunction(t){return(0,e.tidy)((()=>{let n=t[0].clone();for(let s=1;s<t.length;++s)n=e.add(n,t[s]);return e.mul(1/t.length,n)}))}}Sl.className="Average",e.serialization.registerClass(Sl);class Tl extends wl{constructor(e){super(e)}mergeFunction(t){return(0,e.tidy)((()=>{let n=t[0];for(let s=1;s<t.length;++s)n=e.maximum(n,t[s]);return n}))}}Tl.className="Maximum",e.serialization.registerClass(Tl);class Cl extends wl{constructor(e){super(e)}mergeFunction(t){return(0,e.tidy)((()=>{let n=t[0];for(let s=1;s<t.length;++s)n=e.minimum(n,t[s]);return n}))}}Cl.className="Minimum",e.serialization.registerClass(Cl);class $l extends wl{constructor(e){super(e),this.DEFAULT_AXIS=-1,null==e&&(e={}),this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis,this.supportsMasking=!0,this.reshapeRequired=!1}build(t){if(!Array.isArray(t)||!Array.isArray(t[0])||1===t.length)throw new Gs("A `Concatenate` layer should be called on a list of at least 2 inputs");t=t;let n=!0;for(const e of t)if(null!=e){n=!1;break}if(n)return;const s=[];for(let n=0;n<t.length;++n){const a=t[n].slice();a.splice(this.axis,1);let r=!1;for(const t of s)if(e.util.arraysEqual(t,a)){r=!0;break}r||s.push(a)}if(s.length>1)throw new Gs("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: "+JSON.stringify(t))}mergeFunction(t){return(0,e.tidy)((()=>Xa(t,this.axis)))}computeOutputShape(e){if(!Array.isArray(e)||!Array.isArray(e[0]))throw new Gs("A `Concatenate` layer should be called on a list of inputs.");const t=e,n=t[0].slice(),s=this.axis<0?n.length+this.axis:this.axis;for(const e of t.slice(1)){if(null==n[s]||null==e[s]){n[s]=null;break}n[s]+=e[s]}return n}computeMask(t,n){if(null==n)return null;if(!Array.isArray(n))throw new Gs("`mask` should be an array for Concatenate");if(!Array.isArray(t))throw new Gs("`inputs` should be an array for Concatenate");if(n.length!==t.length)throw new Gs(`Mismatch in the length of mask (${n.length}) and the legnth of inputs (${t.length})`);return e.tidy((()=>{let s=!0;if(n.forEach((e=>{null==e||(s=!1)})),s)return null;const a=[];for(let s=0;s<t.length;++s)null==n[s]?a.push(e.onesLike(t[s]).asType("bool")):n[s].rank<t[s].rank?a.push(e.expandDims(n[s],-1)):a.push(n[s]);const r=e.concat(a,this.axis);return e.all(r,-1,!1)}))}getConfig(){const e={axis:this.axis},t=super.getConfig();return Object.assign(e,t),e}}function Al(e,t){for(;e<0;)e+=t;return e}$l.className="Concatenate",e.serialization.registerClass($l);class El extends wl{constructor(e){super(e),this.axes=e.axes,this.normalize=null!=e.normalize&&e.normalize,this.supportsMasking=!0,this.reshapeRequired=!1}build(t){e.util.assert(Array.isArray(t)&&2===t.length&&Array.isArray(t[0])&&Array.isArray(t[1]),(()=>"A `Dot` layer should be called on a list of exactly 2 inputs."));const n=t[0],s=t[1];if(n.length>3||s.length>3)throw new Hs("Dot layer does not support tensors of 4D or higher rank yet.");const a=this.interpretAxes(n,s);if(n[a[0]]!==s[a[1]])throw new Gs(`Dimension incompatibility: ${n[a[0]]} !== ${s[a[1]]}`)}mergeFunction(t){if(2!==t.length)throw new Gs(`A \`Dot\` layer must be called on exactly 2 inputs, but received ${t.length} input(s).`);let n,s=t[0],a=t[1];return n=Array.isArray(this.axes)?this.axes.map(((e,n)=>Al(e,t[n].shape.length))):[Al(this.axes,s.shape.length),Al(this.axes,a.shape.length)],this.normalize&&(s=ai(s,n[0]),a=ai(a,n[1])),function(t,n,s){if(t.shape.length>3||n.shape.length>3)throw new Hs("batchDot is not implemented for tensors of 4D or higher rank yet");if(e.util.assert(t.shape.length>=2,(()=>`batchDot requires the rank of x to be >= 2, but got ${t.shape.length}`)),e.util.assert(t.shape.length>=2,(()=>`batchDot requires the rank of y to be >= 2, but got ${n.shape.length}`)),"number"==typeof s&&(s=[s,s]),"complex64"===t.dtype||"complex64"===n.dtype)throw new Hs("batchDot is not implemented for complex64-type Tensors yet.");const a=t.shape.length,r=n.shape.length;null==s&&(s=[a-1,r-2]);const i=s;return e.tidy((()=>{let e,s;if(a>r){e=a-r;const t=[];for(let n=0;n<e;++n)t.push(1);n=n.reshape(n.shape.concat(t))}else if(r>a){e=r-a;const n=[];for(let t=0;t<e;++t)n.push(1);t=t.reshape(t.shape.concat(n))}else e=0;if(2===t.shape.length&&2===n.shape.length)s=i[0]===i[1]?t.mul(n).sum(i[0]):t.transpose([1,0]).mul(n).sum(i[1]);else{const e=i[0]!==t.shape.length-1,a=i[1]===n.shape.length-1;s=t.matMul(n,e,a)}if(e>0){let t;t=a>r?a+r-3:a-1;const n=[];for(let s=t;s<t+e;++s)n.push(s);s=s.squeeze(n)}return 1===s.shape.length&&(s=s.expandDims(1)),s}))}(s,a,n)}interpretAxes(e,t){let n;return n=Array.isArray(this.axes)?this.axes:[Al(this.axes,e.length),Al(this.axes,t.length)],n}computeOutputShape(t){e.util.assert(Array.isArray(t)&&2===t.length&&Array.isArray(t[0])&&Array.isArray(t[1]),(()=>"A `Dot` layer should be called on a list of exactly 2 inputs."));const n=t[0].slice(),s=t[1].slice();if(n.length>3||s.length>3)throw new Hs("Dot layer does not support tensors of 4D or higher rank yet.");const a=this.interpretAxes(n,s);n.splice(a[0],1),s.splice(a[1],1),s.splice(0,1);const r=n.concat(s);return 1===r.length&&r.push(1),r}computeMask(e,t){return null}getConfig(){const e={axes:this.axes,normalize:this.normalize},t=super.getConfig();return Object.assign(e,t),e}}El.className="Dot",e.serialization.registerClass(El);class _l extends Ur{constructor(e){super(e),this.supportsMasking=!0,this.stddev=e.stddev}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={stddev:this.stddev};return Object.assign(t,e),t}call(t,n){return(0,e.tidy)((()=>{this.invokeCallHook(t,n);const e=Rr(t);return sr((()=>Ya(e.shape,0,this.stddev).add(e)),(()=>e),n.training||!1)}))}}_l.className="GaussianNoise",e.serialization.registerClass(_l);class Rl extends Ur{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(t,n){return(0,e.tidy)((()=>{this.invokeCallHook(t,n);const e=Rr(t);return this.rate>0&&this.rate<1?sr((()=>{const t=Math.sqrt(this.rate/(1-this.rate));return e.mul(Ya(e.shape,1,t))}),(()=>e),n.training||!1):e}))}}Rl.className="GaussianDropout",e.serialization.registerClass(Rl);class Fl extends Ur{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate,this.noiseShape=e.noiseShape}_getNoiseShape(e){return this.noiseShape||Rr(e).shape}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(t,n){return(0,e.tidy)((()=>{if(this.rate<1&&this.rate>0){const s=this._getNoiseShape(t);return sr((()=>{const n=Rr(t),a=-1.7580993408473766;let r=(0,e.greaterEqual)((0,e.randomUniform)(s),this.rate);r=Wa(r,"float32");const i=((1-this.rate)*(1+this.rate*a**2))**-.5,o=-i*a*this.rate;return n.mul(r).add(r.add(-1).mul(a)).mul(i).add(o)}),(()=>Rr(t)),n.training||!1)}return t}))}}function Dl(t,n,s,a,r,i=.001){let o;if(2===t.rank)o=e.batchNorm2d(t,n,s,a,r,i);else if(3===t.rank)o=e.batchNorm3d(t,n,s,a,r,i);else{if(4!==t.rank)throw new Hs(`batchNormalization is not implemented for array of rank ${t.rank} yet`);o=e.batchNorm4d(t,n,s,a,r,i)}return o}Fl.className="AlphaDropout",e.serialization.registerClass(Fl);class Ol extends Ur{constructor(e){null==e&&(e={}),super(e),this.supportsMasking=!0,this.axis=null==e.axis?-1:e.axis,this.momentum=null==e.momentum?.99:e.momentum,this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=Sr(e.betaInitializer||"zeros"),this.gammaInitializer=Sr(e.gammaInitializer||"ones"),this.movingMeanInitializer=Sr(e.movingMeanInitializer||"zeros"),this.movingVarianceInitializer=Sr(e.movingVarianceInitializer||"ones"),this.betaConstraint=ka(e.betaConstraint),this.gammaConstraint=ka(e.gammaConstraint),this.betaRegularizer=Co(e.betaRegularizer),this.gammaRegularizer=Co(e.gammaRegularizer)}build(e){e=Fr(e);const t=this.axis>=0?this.axis:this.axis+e.length,n=e[t];if(null==n)throw new Gs(`Axis ${t} of input tensor should have a defined dimension but the layer received an input with shape ${JSON.stringify(e)}.`);this.inputSpec=[new Lr({ndim:e.length,axes:{[t]:n}})];const s=[n];this.scale&&(this.gamma=this.addWeight("gamma",s,null,this.gammaInitializer,this.gammaRegularizer,!0,this.gammaConstraint)),this.center&&(this.beta=this.addWeight("beta",s,null,this.betaInitializer,this.betaRegularizer,!0,this.betaConstraint)),this.movingMean=this.addWeight("moving_mean",s,null,this.movingMeanInitializer,null,!1),this.movingVariance=this.addWeight("moving_variance",s,null,this.movingVarianceInitializer,null,!1),this.built=!0}call(t,n){return(0,e.tidy)((()=>{const s=null!=n.training&&n.training,a=Rr(t),r=a.shape,i=r.length,o=Va(0,i),l=this.axis>=0?this.axis:this.axis+i;o.splice(l,1);const u=Xs(1,i);u[l]=r[l];const c=o.slice();c.sort();const h=!e.util.arraysEqual(c,Va(0,i).slice(0,i-1));if(!s)return(()=>{if(h){const e=this.movingMean.read().reshape(u),t=this.movingVariance.read().reshape(u),n=this.center?this.beta.read().reshape(u):null,s=this.scale?this.gamma.read().reshape(u):null;return Dl(a,e,t,n,s,this.epsilon)}return Dl(a,this.movingMean.read(),this.movingVariance.read(),null==this.beta?null:this.beta.read(),null==this.gamma?null:this.gamma.read(),this.epsilon)})();const[p,d,f]=function(t,n,s,a,r=.001){return e.util.arraysEqual(a.slice().sort(),Va(0,t.rank-1))?function(t,n,s,a,r=.001){return(0,e.tidy)((()=>{const i=e.moments(t,a),o=i.mean,l=i.variance;return[Dl(t,o,l,s,n,r),o,l]}))}(t,n,s,a,r):function(t,n,s,a,r=.001){return(0,e.tidy)((()=>{const i=e.moments(t,a),o=i.mean,l=i.variance,u=[];for(const e of Va(0,t.rank))-1!==a.indexOf(e)?u.push(1):u.push(t.shape[e]);const c=o.reshape(u),h=l.reshape(u),p=null==n?null:n.reshape(u),d=null==s?null:s.reshape(u);return[Dl(t,c,h,d,p,r),o,l]}))}(t,n,s,a,r)}(a,this.gamma.read(),this.beta.read(),o,this.epsilon),m=(t,n,s)=>{e.tidy((()=>{const e=1-s,a=t.read(),r=a.sub(n).mul(e);t.write(a.sub(r))}))};return(()=>{m(this.movingMean,d,this.momentum),m(this.movingVariance,f,this.momentum)})(),p}))}getConfig(){const e={axis:this.axis,momentum:this.momentum,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:Ir(this.betaInitializer),gammaInitializer:Ir(this.gammaInitializer),movingMeanInitializer:Ir(this.movingMeanInitializer),movingVarianceInitializer:Ir(this.movingVarianceInitializer),betaRegularizer:So(this.betaRegularizer),gammaRegularizer:So(this.gammaRegularizer),betaConstraint:xa(this.betaConstraint),gammaConstraint:xa(this.gammaConstraint)},t=super.getConfig();return Object.assign(e,t),e}}Ol.className="BatchNormalization",e.serialization.registerClass(Ol);class Ml extends Ur{constructor(e){if(null==e&&(e={}),super(e),this.axis=null==e.axis?-1:e.axis,"number"==typeof this.axis){if(!Number.isInteger(this.axis))throw new Error(`Expected axis to be an integer, but received ${this.axis}`)}else{if(!Array.isArray(this.axis))throw new Error(`Expected axis to be an integer or an array of integers, but received ${JSON.stringify(this.axis)}`);for(const e of this.axis)if(!Number.isInteger(e))throw new Error(`Expected axis to be an array of integers, but received ${JSON.stringify(this.axis)}`)}this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=Sr(e.betaInitializer||"zeros"),this.gammaInitializer=Sr(e.gammaInitializer||"ones"),this.betaRegularizer=Co(e.betaRegularizer),this.gammaRegularizer=Co(e.gammaRegularizer),this.supportsMasking=!0}build(e){const t=(e=Fr(e)).length;"number"==typeof this.axis&&(this.axis=[this.axis]);for(let e=0;e<this.axis.length;++e)this.axis[e]<0&&(this.axis[e]+=t);for(const e of this.axis)if(e<0||e>=t)throw new Error(`Invalid axis: ${e}`);if(this.axis.length!==ra(this.axis).length)throw new Error(`Found duplicate axes in: ${this.axis}`);const n=this.axis.map((t=>e[t]));this.scale?this.gamma=this.addWeight("gamma",n,"float32",this.gammaInitializer,this.gammaRegularizer,!0):this.gamma=null,this.center?this.beta=this.addWeight("beta",n,"float32",this.betaInitializer,this.betaRegularizer,!0):this.beta=null,this.built=!0}call(t,n){const s=Rr(t),a=s.shape,r=a.length;return(0,e.tidy)((()=>{let{mean:t,variance:n}=(0,e.moments)(s,this.axis,!0);const i=Xs(1,r);for(const e of this.axis)i[e]=a[e];const o=e=>null!=e&&e.shape.length!==r&&this.axis!==[r-1]?e.reshape(i):e;let l=o(this.gamma.read()),u=o(this.beta.read());const c=[],h=[];for(let e=0;e<r;++e)-1!==this.axis.indexOf(e)?(c.push(a[e]),h.push(1)):(c.push(1),h.push(a[e]));return t=t.tile(c),n=n.tile(c),l=l.tile(h),u=u.tile(h),Dl(s,t,n,u,l,this.epsilon)}))}getConfig(){const e={axis:this.axis,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:Ir(this.betaInitializer),gammaInitializer:Ir(this.gammaInitializer),betaRegularizer:So(this.betaRegularizer),gammaRegularizer:So(this.gammaRegularizer)},t=super.getConfig();return Object.assign(e,t),e}}Ml.className="LayerNormalization",e.serialization.registerClass(Ml);class zl extends Ur{constructor(e){if(null==e&&(e={}),super(e),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,null==e.padding)this.padding=[[1,1],[1,1]];else if("number"==typeof e.padding)this.padding=[[e.padding,e.padding],[e.padding,e.padding]];else{if(e.padding=e.padding,2!==e.padding.length)throw new Gs(`ZeroPadding2D expects padding to be a length-2 array, but received a length-${e.padding.length} array.`);let t,n;if("number"==typeof e.padding[0])t=[e.padding[0],e.padding[0]],n=[e.padding[1],e.padding[1]];else{if(e.padding=e.padding,2!==e.padding[0].length)throw new Gs(`ZeroPadding2D expects height padding to be a length-2 array, but received a length-${e.padding[0].length} array.`);if(t=e.padding[0],2!==e.padding[1].length)throw new Gs(`ZeroPadding2D expects width padding to be a length-2 array, but received a length-${e.padding[1].length} array.`);n=e.padding[1]}this.padding=[t,n]}this.inputSpec=[new Lr({ndim:4})]}computeOutputShape(e){let t,n;return e=Fr(e),"channelsFirst"===this.dataFormat?(t=null!=e[2]&&e[2]>=0?e[2]+this.padding[0][0]+this.padding[0][1]:null,n=null!=e[3]&&e[3]>=0?e[3]+this.padding[1][0]+this.padding[1][1]:null,[e[0],e[1],t,n]):(t=null!=e[1]&&e[1]>=0?e[1]+this.padding[0][0]+this.padding[0][1]:null,n=null!=e[2]&&e[2]>=0?e[2]+this.padding[1][0]+this.padding[1][1]:null,[e[0],t,n,e[3]])}call(t,n){return(0,e.tidy)((()=>{return n=Rr(t),s=this.padding,a=this.dataFormat,(0,e.tidy)((()=>{if(4!==n.rank)throw new Gs(`temporalPadding expects input tensor to be 4-D, but received a ${n.rank}-D tensor.`);if(null==s&&(s=[[1,1],[1,1]]),2!==s.length||2!==s[0].length||2!==s[1].length)throw new Gs("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");if(null==a&&(a="channelsLast"),"channelsLast"!==a&&"channelsFirst"!==a)throw new Gs(`Unknown data format: ${a}. Supported data formats are 'channelsLast' and 'channelsFirst.`);let t;return t="channelsFirst"===a?[[0,0],[0,0],s[0],s[1]]:[[0,0],s[0],s[1],[0,0]],e.pad(n,t)}));var n,s,a}))}getConfig(){const e={padding:this.padding,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}function Ll(t,n,s,a,r,i){return(0,e.tidy)((()=>{let o;$a(r),Ea(i),Aa(a),null==s&&(s=[1,1]),null==a&&(a="valid"),null==r&&(r="channelsLast"),null==i&&(i="max"),t=zo(t,r);const l="same"===a?"same":"valid";return o="max"===i?e.maxPool(t,n,s,l):e.avgPool(t,n,s,l),"channelsFirst"===r&&(o=e.transpose(o,[0,3,1,2])),o}))}function Bl(t,n,s,a,r,i){return(0,e.tidy)((()=>{let o;$a(r),Ea(i),Aa(a),null==s&&(s=[1,1,1]),null==a&&(a="valid"),null==r&&(r="channelsLast"),null==i&&(i="max"),t=Lo(t,r);const l="same"===a?"same":"valid";return o="max"===i?e.maxPool3d(t,n,s,l):e.avgPool3d(t,n,s,l),"channelsFirst"===r&&(o=e.transpose(o,[0,4,1,2,3])),o}))}zl.className="ZeroPadding2D",e.serialization.registerClass(zl);class Pl extends Ur{constructor(e){if(null==e.poolSize&&(e.poolSize=2),super(e),"number"==typeof e.poolSize)this.poolSize=[e.poolSize];else{if(!Array.isArray(e.poolSize)||1!==e.poolSize.length||"number"!=typeof e.poolSize[0])throw new Gs(`poolSize for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.poolSize)}`);this.poolSize=e.poolSize}if(ua(this.poolSize,"poolSize"),null==e.strides)this.strides=this.poolSize;else if("number"==typeof e.strides)this.strides=[e.strides];else{if(!Array.isArray(e.strides)||1!==e.strides.length||"number"!=typeof e.strides[0])throw new Gs(`strides for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.strides)}`);this.strides=e.strides}ua(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,Aa(this.padding),this.inputSpec=[new Lr({ndim:3})]}computeOutputShape(e){const t=Oo((e=Fr(e))[1],this.poolSize[0],this.padding,this.strides[0]);return[e[0],t,e[2]]}call(t,n){return(0,e.tidy)((()=>{this.invokeCallHook(t,n),t=Ua(Rr(t),2);const s=this.poolingFunction(Rr(t),[this.poolSize[0],1],[this.strides[0],1],this.padding,"channelsLast");return e.squeeze(s,[2])}))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides},t=super.getConfig();return Object.assign(e,t),e}}class Vl extends Pl{constructor(e){super(e)}poolingFunction(e,t,n,s,a){return $a(a),Aa(s),Ll(e,t,n,s,a,"max")}}Vl.className="MaxPooling1D",e.serialization.registerClass(Vl);class Wl extends Pl{constructor(e){super(e)}poolingFunction(e,t,n,s,a){return $a(a),Aa(s),Ll(e,t,n,s,a,"avg")}}Wl.className="AveragePooling1D",e.serialization.registerClass(Wl);class Ul extends Ur{constructor(e){if(null==e.poolSize&&(e.poolSize=[2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize],null==e.strides)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(2!==e.strides.length)throw new Gs(`If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length ${e.strides.length}.`);this.strides=e.strides}else this.strides=[e.strides,e.strides];ua(this.poolSize,"poolSize"),ua(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,$a(this.dataFormat),Aa(this.padding),this.inputSpec=[new Lr({ndim:4})]}computeOutputShape(e){e=Fr(e);let t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2];return t=Oo(t,this.poolSize[0],this.padding,this.strides[0]),n=Oo(n,this.poolSize[1],this.padding,this.strides[1]),"channelsFirst"===this.dataFormat?[e[0],e[1],t,n]:[e[0],t,n,e[3]]}call(t,n){return(0,e.tidy)((()=>(this.invokeCallHook(t,n),this.poolingFunction(Rr(t),this.poolSize,this.strides,this.padding,this.dataFormat))))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class Gl extends Ul{constructor(e){super(e)}poolingFunction(e,t,n,s,a){return $a(a),Aa(s),Ll(e,t,n,s,a,"max")}}Gl.className="MaxPooling2D",e.serialization.registerClass(Gl);class Hl extends Ul{constructor(e){super(e)}poolingFunction(e,t,n,s,a){return $a(a),Aa(s),Ll(e,t,n,s,a,"avg")}}Hl.className="AveragePooling2D",e.serialization.registerClass(Hl);class jl extends Ur{constructor(e){if(null==e.poolSize&&(e.poolSize=[2,2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize,e.poolSize],null==e.strides)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(3!==e.strides.length)throw new Gs(`If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length ${e.strides.length}.`);this.strides=e.strides}else this.strides=[e.strides,e.strides,e.strides];ua(this.poolSize,"poolSize"),ua(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,$a(this.dataFormat),Aa(this.padding),this.inputSpec=[new Lr({ndim:5})]}computeOutputShape(e){e=Fr(e);let t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2],s="channelsFirst"===this.dataFormat?e[4]:e[3];return t=Oo(t,this.poolSize[0],this.padding,this.strides[0]),n=Oo(n,this.poolSize[1],this.padding,this.strides[1]),s=Oo(s,this.poolSize[2],this.padding,this.strides[2]),"channelsFirst"===this.dataFormat?[e[0],e[1],t,n,s]:[e[0],t,n,s,e[4]]}call(t,n){return(0,e.tidy)((()=>(this.invokeCallHook(t,n),this.poolingFunction(Rr(t),this.poolSize,this.strides,this.padding,this.dataFormat))))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class Xl extends jl{constructor(e){super(e)}poolingFunction(e,t,n,s,a){return $a(a),Aa(s),Bl(e,t,n,s,a,"max")}}Xl.className="MaxPooling3D",e.serialization.registerClass(Xl);class ql extends jl{constructor(e){super(e)}poolingFunction(e,t,n,s,a){return $a(a),Aa(s),Bl(e,t,n,s,a,"avg")}}ql.className="AveragePooling3D",e.serialization.registerClass(ql);class Kl extends Ur{constructor(e){super(e),this.inputSpec=[new Lr({ndim:3})]}computeOutputShape(e){return[e[0],e[2]]}call(e,t){throw new Hs}}class Yl extends Kl{constructor(e){super(e||{})}call(t,n){return(0,e.tidy)((()=>{const n=Rr(t);return e.mean(n,1)}))}}Yl.className="GlobalAveragePooling1D",e.serialization.registerClass(Yl);class Ql extends Kl{constructor(e){super(e||{})}call(t,n){return(0,e.tidy)((()=>{const n=Rr(t);return e.max(n,1)}))}}Ql.className="GlobalMaxPooling1D",e.serialization.registerClass(Ql);class Jl extends Ur{constructor(e){super(e),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,$a(this.dataFormat),this.inputSpec=[new Lr({ndim:4})]}computeOutputShape(e){return e=e,"channelsLast"===this.dataFormat?[e[0],e[3]]:[e[0],e[1]]}call(e,t){throw new Hs}getConfig(){const e={dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class Zl extends Jl{call(t,n){return(0,e.tidy)((()=>{const n=Rr(t);return"channelsLast"===this.dataFormat?e.mean(n,[1,2]):e.mean(n,[2,3])}))}}Zl.className="GlobalAveragePooling2D",e.serialization.registerClass(Zl);class eu extends Jl{call(t,n){return(0,e.tidy)((()=>{const n=Rr(t);return"channelsLast"===this.dataFormat?e.max(n,[1,2]):e.max(n,[2,3])}))}}eu.className="GlobalMaxPooling2D",e.serialization.registerClass(eu);class tu extends Ur{constructor(e){super(e),this.layer=e.layer}build(e){this.built=!0}get trainable(){return null!=this.layer&&this.layer.trainable}set trainable(e){null!=this.layer&&(this.layer.trainable=e)}get trainableWeights(){return this.layer.trainableWeights}get nonTrainableWeights(){return this.layer.nonTrainableWeights}get updates(){return this.layer._updates}get losses(){return this.layer.losses}getWeights(){return this.layer.getWeights()}setWeights(e){this.layer.setWeights(e)}getConfig(){const e={layer:{className:this.layer.getClassName(),config:this.layer.getConfig()}},t=super.getConfig();return Object.assign(e,t),e}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.layer&&this.layer.setFastWeightInitDuringBuild(e)}static fromConfig(e,t,n={}){const s=si(t.layer,n);delete t.layer;const a={layer:s};return Object.assign(a,t),new e(a)}}class nu extends tu{constructor(e){super(e),this.supportsMasking=!0}build(e){if((e=Fr(e)).length<3)throw new Gs(`TimeDistributed layer expects an input shape >= 3D, but received input shape ${JSON.stringify(e)}`);this.inputSpec=[{shape:e}];const t=[e[0]].concat(e.slice(2));this.layer.built||(this.layer.build(t),this.layer.built=!0),super.build(e)}computeOutputShape(e){const t=[(e=Fr(e))[0]].concat(e.slice(2)),n=this.layer.computeOutputShape(t),s=e[1];return[n[0],s].concat(n.slice(1))}call(t,n){return(0,e.tidy)((()=>Jo(((e,t)=>[Rr(this.layer.call(e,n)),[]]),t=Rr(t),[],!1,null,null,!1,!0)[1]))}}nu.className="TimeDistributed",e.serialization.registerClass(nu);class su extends tu{constructor(e){super(e);const t=e.layer.getConfig(),n={};n.className=e.layer.getClassName(),n.config=t,this.forwardLayer=si(n),t.goBackwards=!0!==t.goBackwards;const s={};var a;if(s.className=e.layer.getClassName(),s.config=t,this.backwardLayer=si(s),this.forwardLayer.name="forward_"+this.forwardLayer.name,this.backwardLayer.name="backward_"+this.backwardLayer.name,this.mergeMode=void 0===e.mergeMode?"concat":e.mergeMode,a=this.mergeMode,oa(Ta,"BidirectionalMergeMode",a),e.weights)throw new Hs("weights support is not implemented for Bidirectional layer yet.");this._stateful=e.layer.stateful,this.returnSequences=e.layer.returnSequences,this.returnState=e.layer.returnState,this.supportsMasking=!0,this._trainable=!0,this.inputSpec=e.layer.inputSpec,this.numConstants=null}get trainable(){return this._trainable}set trainable(e){this._trainable=e,null!=this.forwardLayer&&(this.forwardLayer.trainable=e),null!=this.backwardLayer&&(this.backwardLayer.trainable=e)}getWeights(){return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights())}setWeights(e){const t=e.length,n=Math.floor(t/2);this.forwardLayer.setWeights(e.slice(0,n)),this.backwardLayer.setWeights(e.slice(n))}computeOutputShape(e){let t,n,s,a=this.forwardLayer.computeOutputShape(e);return Array.isArray(a)&&Array.isArray(a[0])||(a=[a]),a=a,this.returnState?(s=a.slice(1),t=a[0]):t=a[0],t=t,"concat"===this.mergeMode?(t[t.length-1]*=2,n=[t]):n=null==this.mergeMode?[t,t.slice()]:[t],this.returnState?null==this.mergeMode?n.concat(s).concat(s.slice()):[t].concat(s).concat(s.slice()):Ys(n)}apply(e,t){let n=null==t?null:t.initialState,s=null==t?null:t.constants;null==t&&(t={});const a=Qo(e,n,s,this.numConstants);if(e=a.inputs,n=a.initialState,s=a.constants,Array.isArray(e)&&(n=e.slice(1),e=e[0]),(null==n||0===n.length)&&null==s)return super.apply(e,t);const r=[],i=[];if(null!=n){const e=n.length;if(e%2>0)throw new Gs("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");t.initialState=n,r.push(...n);const s=n.map((e=>new Lr({shape:e.shape})));this.forwardLayer.stateSpec=s.slice(0,e/2),this.backwardLayer.stateSpec=s.slice(e/2),i.push(...s)}if(null!=s)throw new Hs("Support for constants in Bidirectional layers is not implemented yet.");const o=r[0]instanceof Br;for(const e of r)if(e instanceof Br!==o)throw new Gs("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");if(o){const n=[e].concat(r),s=this.inputSpec.concat(i),a=this.inputSpec;this.inputSpec=s;const o=super.apply(n,t);return this.inputSpec=a,o}return super.apply(e,t)}call(t,n){return(0,e.tidy)((()=>{const s=n.initialState;let a,r,i,o;if(null==s)a=this.forwardLayer.call(t,n),r=this.backwardLayer.call(t,n);else{const e=s.slice(0,s.length/2),i=s.slice(s.length/2);a=this.forwardLayer.call(t,Object.assign(n,{initialState:e})),r=this.backwardLayer.call(t,Object.assign(n,{initialState:i}))}return this.returnState&&(Array.isArray(a)&&(i=a.slice(1).concat(r.slice(1))),a=a[0],r=r[0]),this.returnSequences&&(r=e.reverse(r,1)),"concat"===this.mergeMode?o=Xa([a,r]):"sum"===this.mergeMode?o=e.add(a,r):"ave"===this.mergeMode?o=e.mul(.5,e.add(a,r)):"mul"===this.mergeMode?o=e.mul(a,r):null==this.mergeMode&&(o=[a,r]),this.returnState?null==this.mergeMode?o.concat(i):[o].concat(i):o}))}resetStates(e){this.forwardLayer.resetStates(),this.backwardLayer.resetStates()}build(e){Ra(this.forwardLayer.name,(()=>{this.forwardLayer.build(e)})),Ra(this.backwardLayer.name,(()=>{this.backwardLayer.build(e)})),this.built=!0}computeMask(e,t){let n;if(Array.isArray(t)&&(t=t[0]),n=this.returnSequences?null==this.mergeMode?[t,t]:t:null==this.mergeMode?[null,null]:null,this.returnState){const e=this.forwardLayer.states.map((e=>null));return Array.isArray(n)?n.concat(e).concat(e):[n].concat(e).concat(e)}return n}get trainableWeights(){return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights)}get nonTrainableWeights(){return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights)}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.forwardLayer&&this.forwardLayer.setFastWeightInitDuringBuild(e),null!=this.backwardLayer&&this.backwardLayer.setFastWeightInitDuringBuild(e)}getConfig(){const e={mergeMode:this.mergeMode},t=super.getConfig();return Object.assign(e,t),e}static fromConfig(e,t){const n=si(t.layer);if(delete t.layer,null!=t.numConstants)throw new Hs("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");const s=t;return s.layer=n,new e(s)}}su.className="Bidirectional",e.serialization.registerClass(su);var au,ru,iu=n(3916),ou=n(6377);function lu(e,t,n=new Map,s=new Set){if(null==e)return null;if(s.has(e))throw new Error("Circular references are not supported.");if(n.has(e))return n.get(e);const a=t(e);if(a.recurse&&null!==a.value)throw new Error("A deep map function may not return both a value and recurse=true.");if(a.recurse){if(pu(e)){const a=Array.isArray(e)?[]:{};s.add(e);for(const r in e){const i=lu(e[r],t,n,s);a[r]=i}return s.delete(e),a}throw new Error(`Can't recurse into non-iterable type: ${e}`)}return n.set(e,a.value),a.value}function uu(e,t=hu){return cu(e,t)}function cu(e,t,n=new Set){const s=e[0];if(n.has(s))throw new Error("Circular references are not supported.");const a=t(e);if(a.recurse&&null!==a.value)throw new Error("A deep zip function may not return both a value and recurse=true.");if(a.recurse){if(pu(s)){const a=Array.isArray(s)?[]:{};n.add(s);for(const r in s){const s=cu(e.map((e=>e[r])),t,n);a[r]=s}return n.delete(s),a}throw new Error(`Can't recurse into non-iterable type: ${s}`)}return a.value}function hu(e){return null===e?null:pu(e[0])?{value:null,recurse:!0}:{value:e,recurse:!1}}function pu(t){return null!=t&&!ArrayBuffer.isView(t)&&(Array.isArray(t)||"object"==typeof t&&!(t instanceof e.Tensor))}function du(e){return lu(e,fu)}function fu(t){return t instanceof e.Tensor?{value:t.clone(),recurse:!1}:pu(t)?{value:null,recurse:!0}:{value:t,recurse:!1}}class mu{constructor(e){if(this.capacity=e,this.begin=0,this.end=0,null==e)throw new RangeError("Can't create a ring buffer of unknown capacity.");if(e<1)throw new RangeError("Can't create ring buffer of capacity < 1.");this.data=new Array(e),this.doubledCapacity=2*e}wrap(e){for(;e<0;)e+=this.doubledCapacity;return e%this.doubledCapacity}get(e){if(e<0)throw new RangeError("Can't get item at a negative index.");return this.data[e%this.capacity]}set(e,t){if(e<0)throw new RangeError("Can't set item at a negative index.");this.data[e%this.capacity]=t}length(){let e=this.end-this.begin;return e<0&&(e=this.doubledCapacity+e),e}isFull(){return this.length()===this.capacity}isEmpty(){return 0===this.length()}push(e){if(this.isFull())throw new RangeError("Ring buffer is full.");this.set(this.end,e),this.end=this.wrap(this.end+1)}pushAll(e){for(const t of e)this.push(t)}pop(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");this.end=this.wrap(this.end-1);const e=this.get(this.end);return this.set(this.end,void 0),e}unshift(e){if(this.isFull())throw new RangeError("Ring buffer is full.");this.begin=this.wrap(this.begin-1),this.set(this.begin,e)}shift(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const e=this.get(this.begin);return this.set(this.begin,void 0),this.begin=this.wrap(this.begin+1),e}shuffleExcise(e){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const t=this.wrap(this.begin+e),n=this.get(t);return this.set(t,this.pop()),n}}class gu extends mu{constructor(){super(gu.INITIAL_CAPACITY)}isFull(){return!1}push(e){super.isFull()&&this.expand(),super.push(e)}unshift(e){super.isFull()&&this.expand(),super.unshift(e)}expand(){const e=2*this.capacity,t=new Array(e),n=this.length();for(let e=0;e<n;e++)t[e]=this.get(this.wrap(this.begin+e));this.data=t,this.capacity=e,this.doubledCapacity=2*this.capacity,this.begin=0,this.end=n}}gu.INITIAL_CAPACITY=32;class yu{async toArray(){const e=[];let t=await this.next();for(;!t.done;)e.push(t.value),t=await this.next();return e}async toArrayForTest(){const e=this.prefetch(100),t=[];let n=await e.next();for(;!n.done;)t.push(n.value),n=await e.next();return t}async resolveFully(){let e=await this.next();for(;!e.done;)e=await this.next()}async resolveWhile(e){let t=await this.next(),n=e(t.value);for(;!t.done&&n;)t=await this.next(),n=e(t.value)}handleErrors(e){return new Tu(this,e)}filter(e){return new Iu(this,e)}map(e){return new Su(this,e)}mapAsync(e){return new Cu(this,e)}serialMapAsync(e){return new Cu(this,e).serial()}flatmap(e){return new Au(this,e)}async forEachAsync(e){return this.map(e).resolveFully()}async serialForEach(e){return this.serialMapAsync(e).resolveWhile((e=>!0===e))}rowMajorBatch(e,t=!0){return new Nu(this,e,t)}columnMajorBatch(e,t=!0,n=hu){return this.rowMajorBatch(e,t).map((e=>uu(e,n)))}concatenate(e,t){return new Eu(new bu([this,e]),t)}take(e){return e<0||null==e?this:new wu(this,e)}skip(e){return e<0||null==e?this:new ku(this,e)}prefetch(e){return new _u(this,e)}shuffle(e,t){return new Ru(this,e,t)}serial(){return new vu(this)}}class bu extends yu{constructor(e){super(),this.items=e,this.trav=0}summary(){return`Array of ${this.items.length} items`}async next(){if(this.trav>=this.items.length)return{value:null,done:!0};const e=this.items[this.trav];return this.trav++,{value:du(e),done:!1}}}class xu extends yu{constructor(e){super(),this.nextFn=e}summary(){return"Function call"}async next(){try{return this.nextFn()}catch(e){throw e.message=`Error thrown while iterating through a dataset: ${e.message}`,e}}}class vu extends yu{constructor(e){super(),this.upstream=e,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Serial`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){return this.upstream.next()}}class ku extends yu{constructor(e,t){super(),this.upstream=e,this.maxCount=t,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Skip`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;this.count++<this.maxCount;){const t=await this.upstream.next();if(t.done)return t;e.dispose(t.value)}return this.upstream.next()}}class wu extends yu{constructor(e,t){super(),this.upstream=e,this.maxCount=t,this.count=0}summary(){return`${this.upstream.summary()} -> Take`}async next(){return this.count++>=this.maxCount?{value:null,done:!0}:this.upstream.next()}}class Nu extends yu{constructor(e,t,n=!0){super(),this.upstream=e,this.batchSize=t,this.enableSmallLastBatch=n,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> RowMajorBatch`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){const e=[];for(;e.length<this.batchSize;){const t=await this.upstream.next();if(t.done)return this.enableSmallLastBatch&&e.length>0?{value:e,done:!1}:{value:null,done:!0};e.push(t.value)}return{value:e,done:!1}}}class Iu extends yu{constructor(e,t){super(),this.upstream=e,this.predicate=t,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Filter`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;;){const t=await this.upstream.next();if(t.done||this.predicate(t.value))return t;e.dispose(t.value)}}}class Su extends yu{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> Map`}async next(){const t=await this.upstream.next();if(t.done)return{value:null,done:!0};const n=e.tensor_util.getTensorsInContainer(t.value),s=this.transform(t.value),a=e.tensor_util.getTensorsInContainer(s);for(const t of n)e.tensor_util.isTensorInList(t,a)||t.dispose();return{value:s,done:!1}}}class Tu extends yu{constructor(e,t){super(),this.upstream=e,this.handler=t,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> handleErrors`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;;)try{return await this.upstream.next()}catch(e){if(!this.handler(e))return{value:null,done:!0}}}}class Cu extends yu{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> AsyncMap`}async next(){const t=await this.upstream.next();if(t.done)return{value:null,done:!0};const n=e.tensor_util.getTensorsInContainer(t.value),s=await this.transform(t.value),a=e.tensor_util.getTensorsInContainer(s);for(const t of n)e.tensor_util.isTensorInList(t,a)||t.dispose();return{value:s,done:!1}}}class $u extends yu{constructor(){super(),this.outputQueue=new gu,this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;0===this.outputQueue.length();)if(!await this.pump())return{value:null,done:!0};return{value:this.outputQueue.shift(),done:!1}}}class Au extends $u{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> Flatmap`}async pump(){const t=await this.upstream.next();if(t.done)return!1;const n=e.tensor_util.getTensorsInContainer(t.value),s=this.transform(t.value),a=e.tensor_util.getTensorsInContainer(s);this.outputQueue.pushAll(s);for(const t of n)e.tensor_util.isTensorInList(t,a)||t.dispose();return!0}}class Eu extends yu{constructor(e,t){super(),this.baseErrorHandler=t,this.lastRead=null,this.iterator=null,this.moreIterators=e}summary(){return"TODO: fill in upstream of chained summaries -> Chained"}async next(){return this.lastRead=this.readFromChain(this.lastRead),this.lastRead}async readFromChain(e){if(await e,null==this.iterator){const e=await this.moreIterators.next();if(e.done)return{value:null,done:!0};this.iterator=e.value,null!=this.baseErrorHandler&&(this.iterator=this.iterator.handleErrors(this.baseErrorHandler))}const t=await this.iterator.next();return t.done?(this.iterator=null,this.readFromChain(e)):t}}(ru=au||(au={}))[ru.FAIL=0]="FAIL",ru[ru.SHORTEST=1]="SHORTEST",ru[ru.LONGEST=2]="LONGEST";class _u extends yu{constructor(e,t){super(),this.upstream=e,this.bufferSize=t,this.buffer=new mu(t)}summary(){return`${this.upstream.summary()} -> Prefetch`}refill(){for(;!this.buffer.isFull();){const e=this.upstream.next();this.buffer.push(e)}}next(){return this.refill(),this.buffer.shift()}}class Ru extends _u{constructor(t,n,s){super(t,n),this.upstream=t,this.windowSize=n,this.upstreamExhausted=!1,this.random=ou.alea(s||e.util.now().toString()),this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}randomInt(e){return Math.floor(this.random()*e)}chooseIndex(){return this.randomInt(this.buffer.length())}async serialNext(){for(this.upstreamExhausted||this.refill();!this.buffer.isEmpty();){const e=this.chooseIndex(),t=await this.buffer.shuffleExcise(e);if(!t.done)return this.refill(),t;this.upstreamExhausted=!0}return{value:null,done:!0}}}class Fu{constructor(){this.size=null}batch(t,n=!0){const s=this;let a;return e.util.assert(t>0,(()=>`batchSize needs to be positive, but it is\n      ${t}`)),a=this.size===1/0||null==this.size?this.size:n?Math.ceil(this.size/t):Math.floor(this.size/t),Du((async()=>(await s.iterator()).columnMajorBatch(t,n,Ou)),a)}concatenate(e){const t=this;let n;return n=this.size===1/0||e.size===1/0?1/0:null!=this.size&&null!=e.size?this.size+e.size:null,Du((async()=>(await t.iterator()).concatenate(await e.iterator())),n)}filter(t){const n=this;let s;return s=this.size===1/0?1/0:null,Du((async()=>(await n.iterator()).filter((n=>e.tidy((()=>t(n)))))),s)}async forEachAsync(e){return(await this.iterator()).forEachAsync(e)}map(t){const n=this;return Du((async()=>(await n.iterator()).map((n=>e.tidy((()=>t(n)))))),this.size)}mapAsync(e){const t=this;return Du((async()=>(await t.iterator()).mapAsync(e)),this.size)}prefetch(e){if(null==e)throw new RangeError("`Dataset.prefetch()` requires bufferSize to be specified.");const t=this;return Du((async()=>(await t.iterator()).prefetch(e)),this.size)}repeat(e){const t=this;let n;return n=null!=this.size&&e>0?this.size*e:0===e?0:null!=this.size&&(void 0===e||e<0)?1/0:null,Du((async()=>{return n=(a=async()=>({value:await t.iterator(),done:!1}),new xu(a)).take(e),new Eu(n,s);var n,s,a}),n)}skip(e){const t=this;let n;return n=null!=this.size&&e>=0&&this.size>=e?this.size-e:null!=this.size&&(this.size<e||void 0===e||e<0)?0:null,Du((async()=>(await t.iterator()).skip(e)),n)}shuffle(t,n,s=!0){if(null==t||t<0)throw null==this.size?new RangeError("`Dataset.shuffle()` requires bufferSize to be specified."):new RangeError(`\`Dataset.shuffle()\` requires bufferSize to be specified.  If your data fits in main memory (for regular JS objects), and/or GPU memory (for \`tf.Tensor\`s), consider setting bufferSize to the dataset size (${this.size} elements)`);const a=this,r=ou.alea(n||e.util.now().toString());return Du((async()=>{let e=r.int32();return s&&(e+=r.int32()),(await a.iterator()).shuffle(t,e.toString())}),this.size)}take(e){const t=this;let n;return n=null!=this.size&&this.size>e?e:null!=this.size&&this.size<=e?this.size:null,Du((async()=>(await t.iterator()).take(e)),n)}async toArray(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArray()}async toArrayForTest(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArrayForTest()}}function Du(e,t=null){return new class extends Fu{constructor(){super(...arguments),this.size=t}async iterator(){return e()}}}function Ou(t){if(null===t)return null;return null==(n=t[0])||null===(s=n)||"object"!=typeof s&&"function"!=typeof s||Array.isArray(n)||"object"==typeof n&&n instanceof e.Tensor||e.util.isTypedArray(n)?{value:function(t){if(0===t.length)throw new Error("Can't make a batch of zero elements.");return t[0]instanceof e.Tensor?e.stack(t):e.tensor(t)}(t),recurse:!1}:{value:null,recurse:!0};var n,s}Fu.MAX_BUFFER_SIZE=1e4,Symbol("out"),Symbol("field"),Symbol("quote"),Symbol("quoteafterquote"),Symbol("quoteinquote");var Mu=n(6772),zu=n(3448);e.version_core,Mu.version_cpu,zu.version_webgl,iu.version_converter,n(6772),n(3448);const Lu=n(9503);(async()=>{window.onload=()=>window.modelPromise=Lu.load()})()})()})();